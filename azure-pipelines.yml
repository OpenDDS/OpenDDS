schedules:
- cron: "0 7 * * SUN"
  displayName: Weekly Sunday
  branches:
    include:
    - master
  always: true

jobs:
- job: VisualStudio2019
  timeoutInMinutes: 90
  pool:
    vmImage: windows-2019
  strategy:
    matrix:
      Debug64:
        BuildPlatform: x64
        BuildConfiguration: Debug
      Release64:
        BuildPlatform: x64
        BuildConfiguration: Release
      Debug32:
        BuildPlatform: Win32
        BuildConfiguration: Debug
      Release32:
        BuildPlatform: Win32
        BuildConfiguration: Release
  variables:
    VCPKG_ROOT: $(Build.SourcesDirectory)\vcpkg
  steps:
  - script: |
      if %BuildPlatform%==x64 (set VCVARS_ARCH=x64) else set VCVARS_ARCH=x86
      echo ##vso[task.setvariable variable=VcVarsArch]%VCVARS_ARCH%
    displayName: Set VcVarsArch
  - script: |
      git clone -q --depth 1 git://github.com/Microsoft/vcpkg.git %VCPKG_ROOT%
      call %VCPKG_ROOT%\bootstrap-vcpkg.bat
      set VCPKG_ARCH=$(VcVarsArch)-windows
      %VCPKG_ROOT%\vcpkg install --triplet %VCPKG_ARCH% openssl xerces-c
      rmdir /s/q %VCPKG_ROOT%\packages %VCPKG_ROOT%\buildtrees
      echo ##vso[task.setvariable variable=VcPkgInst]%VCPKG_ROOT%\installed\%VCPKG_ARCH%
    displayName: Vcpkg
  - task: BatchScript@1
    displayName: VcVars
    inputs:
      filename: '"C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat"'
      arguments: $(VcVarsArch)
      modifyEnvironment: true
  - task: BatchScript@1
    displayName: Put perl on PATH
    inputs:
      filename: tools\scripts\prepend_path
      arguments: 'C:\Strawberry\perl\bin'
      modifyEnvironment: true
  - script: |
      if %BuildConfiguration%==Release set OPT=--no-tests --no-debug --optimize
      call configure -v --ace-github-latest --security --xerces3=$(VcPkgInst) --openssl=$(VcPkgInst) %OPT%
      perl tools\scripts\show_build_config.pl
      if %BuildConfiguration%==Release (set SLN=DDS_TAOv2.sln) else set SLN=DDS_TAOv2_all.sln
      echo ##vso[task.setvariable variable=BuildSolution]%SLN%
    failOnStderr: #
    displayName: Run configure script
  - task: BatchScript@1
    displayName: Setenv from configure script
    inputs:
      filename: setenv.cmd
      modifyEnvironment: true
  - task: VSBuild@1
    displayName: Build solution
    inputs:
      solution: $(BuildSolution)
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)
      maximumCpuCount: true
  - script: |
      perl "%DDS_ROOT%\tests\cmake_integration\run_ci_tests.pl" --build-config=$(BuildConfiguration) --generator="Visual Studio 16 2019" --arch $(BuildPlatform)
    displayName: Compile and run CMake tests

- job: VisualStudio2017
  timeoutInMinutes: 90
  pool:
    vmImage: vs2017-win2016
  strategy:
    matrix:
      Debug64:
        BuildPlatform: x64
        BuildConfiguration: Debug
      Release64:
        BuildPlatform: x64
        BuildConfiguration: Release
      Debug32:
        BuildPlatform: Win32
        BuildConfiguration: Debug
      Release32:
        BuildPlatform: Win32
        BuildConfiguration: Release
  variables:
    VCPKG_ROOT: $(Build.SourcesDirectory)\vcpkg
  steps:
  - script: |
      if %BuildPlatform%==x64 (set VCVARS_ARCH=x64) else set VCVARS_ARCH=x86
      echo ##vso[task.setvariable variable=VcVarsArch]%VCVARS_ARCH%
    displayName: Set VcVarsArch
  - script: |
      git clone -q --depth 1 git://github.com/Microsoft/vcpkg.git %VCPKG_ROOT%
      call %VCPKG_ROOT%\bootstrap-vcpkg.bat
      set VCPKG_ARCH=$(VcVarsArch)-windows
      %VCPKG_ROOT%\vcpkg install --triplet %VCPKG_ARCH% openssl xerces-c
      rmdir /s/q %VCPKG_ROOT%\packages %VCPKG_ROOT%\buildtrees
      echo ##vso[task.setvariable variable=VcPkgInst]%VCPKG_ROOT%\installed\%VCPKG_ARCH%
    displayName: Vcpkg
    condition: not(and(eq(variables['BuildConfiguration'], 'Debug'), eq(variables['BuildPlatform'], 'x64')))
  - task: BatchScript@1
    displayName: VcVars
    inputs:
      filename: '"C:\Program Files (x86)\Microsoft Visual Studio\2017\Enterprise\VC\Auxiliary\Build\vcvarsall.bat"'
      arguments: $(VcVarsArch)
      modifyEnvironment: true
  - task: BatchScript@1
    displayName: Put perl on PATH
    inputs:
      filename: tools\scripts\prepend_path
      arguments: 'C:\Strawberry\perl\bin'
      modifyEnvironment: true
  - script: |
      if %BuildConfiguration%==Release set OPT=--no-tests --no-debug --optimize
      set SEC=--security --xerces3=$(VcPkgInst) --openssl=$(VcPkgInst)
      if %BuildConfiguration%==Debug if %BuildPlatform%==x64 set SEC= # Debug64 Fills up Disk with Security
      call configure -v --ace-github-latest %SEC% %OPT%
      perl tools\scripts\show_build_config.pl
      if %BuildConfiguration%==Release (set SLN=DDS_TAOv2.sln) else set SLN=DDS_TAOv2_all.sln
      echo ##vso[task.setvariable variable=BuildSolution]%SLN%
    failOnStderr: #
    displayName: Run configure script
  - task: BatchScript@1
    displayName: Setenv from configure script
    inputs:
      filename: setenv.cmd
      modifyEnvironment: true
  - task: VSBuild@1
    displayName: Build solution
    inputs:
      solution: $(BuildSolution)
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)
      maximumCpuCount: true
  - script: |
      perl "%DDS_ROOT%\tests\cmake_integration\run_ci_tests.pl" --build-config=$(BuildConfiguration) --generator="Visual Studio 15 2017" --arch $(BuildPlatform)
    displayName: Compile and run CMake tests

- job: VisualStudio2015
  timeoutInMinutes: 90
  pool:
    vmImage: vs2015-win2012r2
  strategy:
    matrix:
      Release64:
        BuildPlatform: x64
        BuildConfiguration: Release
  variables:
    VCPKG_ROOT: $(Build.SourcesDirectory)\vcpkg
  steps:
  - script: |
      if %BuildPlatform%==x64 (set VCVARS_ARCH=x64) else set VCVARS_ARCH=x86
      echo ##vso[task.setvariable variable=VcVarsArch]%VCVARS_ARCH%
    displayName: Set VcVarsArch
  - script: |
      git clone -q --depth 1 git://github.com/Microsoft/vcpkg.git %VCPKG_ROOT%
      call %VCPKG_ROOT%\bootstrap-vcpkg.bat
      set VCPKG_ARCH=$(VcVarsArch)-windows
      %VCPKG_ROOT%\vcpkg install --triplet %VCPKG_ARCH% openssl xerces-c
      rmdir /s/q %VCPKG_ROOT%\packages %VCPKG_ROOT%\buildtrees
      echo ##vso[task.setvariable variable=VcPkgInst]%VCPKG_ROOT%\installed\%VCPKG_ARCH%
    displayName: Vcpkg
  - task: BatchScript@1
    displayName: VcVars
    inputs:
      filename: '"C:\Program Files (x86)\Microsoft Visual Studio 14.0\VC\vcvarsall.bat"'
      arguments: $(VcVarsArch)
      modifyEnvironment: true
  - powershell: |
      $client = new-object System.Net.WebClient
      $client.DownloadFile("http://strawberryperl.com/download/5.30.0.1/strawberry-perl-5.30.0.1-64bit-portable.zip", "strawberry-perl.zip");
    displayName: Download perl
  - task: ExtractFiles@1
    displayName: Extract perl
    inputs:
      archiveFilePatterns: strawberry-perl.zip
      destinationFolder: ext\strawberry
  - task: BatchScript@1
    displayName: Put perl on PATH
    inputs:
      filename: tools\scripts\prepend_path
      arguments: '%CD%\ext\strawberry\perl\bin'
      modifyEnvironment: true
  - script: |
      if %BuildConfiguration%==Release set OPT=--no-tests --no-debug --optimize
      call configure -v --ace-github-latest --security --xerces3=$(VcPkgInst) --openssl=$(VcPkgInst) %OPT%
      perl tools\scripts\show_build_config.pl
      if %BuildConfiguration%==Release (set SLN=DDS_TAOv2.sln) else set SLN=DDS_TAOv2_all.sln
      echo ##vso[task.setvariable variable=BuildSolution]%SLN%
    failOnStderr: #
    displayName: Run configure script
  - task: BatchScript@1
    displayName: Setenv from configure script
    inputs:
      filename: setenv.cmd
      modifyEnvironment: true
  - task: VSBuild@1
    displayName: Build solution
    inputs:
      solution: $(BuildSolution)
      platform: $(BuildPlatform)
      configuration: $(BuildConfiguration)
      maximumCpuCount: true

- job: Linux
  timeoutInMinutes: 90
  pool:
    vmImage: ubuntu-18.04
  strategy:
    matrix:
      Debug:
        ConfigOpts: --no-inline --java=/usr/lib/jvm/zulu-12-azure-amd64
      Release:
        ConfigOpts: --no-debug --optimize --java=/usr/lib/jvm/zulu-12-azure-amd64
      Safety:
        ConfigOpts: --safety-profile
      SafetyBaseNoBuiltinTopics:
        ConfigOpts: --safety-profile=base --no-built-in-topics
      Security:
        ConfigOpts: --security --features=versioned_namespace=1
        PackageDeps: libxerces-c-dev libssl-dev cmake
      SecurityWithoutFeatures:
        ConfigOpts: --no-inline --no-debug --no-built-in-topics --no-content-subscription --no-ownership-profile --no-object-model-profile --no-persistence-profile --security
        PackageDeps: libxerces-c-dev libssl-dev cmake
      WChar:
        ConfigOpts: --features=uses_wchar=1 --no-inline
      CLANG5:
        ConfigOpts: --compiler=clang++-5.0 --security --std=c++11
        PackageDeps: libxerces-c-dev libssl-dev cmake clang-5.0
      CLANG6:
        ConfigOpts: --compiler=clang++-6.0 --security
        PackageDeps: libxerces-c-dev libssl-dev cmake clang-6.0
      CLANG7:
        ConfigOpts: --compiler=clang++-7 --security
        PackageDeps: libxerces-c-dev libssl-dev cmake clang-7
      CLANG8:
        ConfigOpts: --compiler=clang++-8 --security
        PackageDeps: libxerces-c-dev libssl-dev cmake clang-8
      CLANG9:
        ConfigOpts: --compiler=clang++-9 --security
        PackageDeps: libxerces-c-dev libssl-dev cmake clang-9
        Repo: llvm-toolchain-$(lsb_release -cs)-9
      GCC6:
        ConfigOpts: --compiler=g++-6 --no-inline
        PackageDeps: g++-6
      GCC7:
        ConfigOpts: --compiler=g++-7 --no-inline
        PackageDeps: g++-7
      GCC8:
        ConfigOpts: --compiler=g++-8 --no-inline
        PackageDeps: g++-8
      GCC9:
        ConfigOpts: --compiler=g++-9 --no-inline
        PackageDeps: g++-9
  steps:
  - script: |
      wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key|sudo apt-key add -
      sudo apt-add-repository "deb http://apt.llvm.org/$(lsb_release -cs)/ $(Repo) main"
    displayName: Add repository ($(Repo))
    condition: and(succeeded(), ne(variables['Repo'], ''))
  - script: |
      sudo apt-get --yes update
      sudo apt-get --yes install libxerces-c-dev libssl-dev $(PackageDeps)
    displayName: Install system packages
    condition: and(succeeded(), ne(variables['PackageDeps'], ''))
  - script: |
      ./configure -v --mpcopts="-workers 4" --ace-github-latest $(ConfigOpts)
      tools/scripts/show_build_config.pl
    displayName: Run configure script
  - script: make -sj6
    displayName: Compile
  - script: |
      source $(Build.SourcesDirectory)/setenv.sh && $DDS_ROOT/tests/cmake_integration/run_ci_tests.pl
    displayName: Compile and run CMake tests
    condition: >
      and(succeeded(),
          not(contains(variables['ConfigOpts'], '--safety-profile')),
          not(contains(variables['ConfigOpts'], '--no-ownership-profile')))

- job: macOS
  timeoutInMinutes: 90
  pool:
    vmImage: macOS-latest
  strategy:
    maxParallel: 2
    matrix:
      Debug:
        ConfigOpts: --no-inline
      Release:
        ConfigOpts: --no-debug --optimize
  steps:
  - script: |
      ./configure -v --ace-github-latest $(ConfigOpts)
      tools/scripts/show_build_config.pl
    displayName: Run configure script
  - script: make -sj6
    displayName: Compile
  - script: >
      source $(Build.SourcesDirectory)/setenv.sh &&
      $DDS_ROOT/tests/cmake_integration/run_ci_tests.pl
    displayName: Compile and run CMake tests
