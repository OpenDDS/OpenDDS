#include "Builder.idl"
#include "dds/DdsDcpsGuid.idl"

module Bench {

  struct UniqueId {
    unsigned long long high;
    unsigned long long low;
  };

  typedef sequence<octet> OctetSeq;

// ---
// Data Section
// ---

  @topic
  struct Data {
    @key UniqueId id;
    unsigned long msg_count;
    unsigned long total_hops;
    unsigned long hop_count;
    Builder::TimeStamp created_time;
    Builder::TimeStamp sent_time;
    OctetSeq buffer;
    unsigned long filter_class;
  };

// ---
// Action Section
// ---

  struct ActionConfig {
    string name;
    string type;
    Builder::PropertySeq params;
    Builder::StringSeq readers;
    Builder::StringSeq writers;
  };

  typedef sequence<ActionConfig> ActionConfigSeq;

  struct ActionReport {
    Builder::PropertySeq properties;
  };

  typedef sequence<ActionReport> ActionReportSeq;

// ---
// Worker Section
// ---

  struct WorkerConfig {
    Builder::TimeStamp create_time;
    Builder::TimeStamp enable_time;
    Builder::TimeStamp start_time;
    Builder::TimeStamp stop_time;
    Builder::TimeStamp destruction_time;
    Builder::PropertySeq properties;
    Builder::ProcessConfig process;
    ActionConfigSeq actions;
    ActionReportSeq action_reports;
    boolean wait_for_discovery;
    unsigned long wait_for_discovery_seconds;
  };

  struct WorkerReport {
    Builder::TimeStamp construction_time;
    Builder::TimeStamp enable_time;
    Builder::TimeStamp start_time;
    Builder::TimeStamp stop_time;
    Builder::TimeStamp destruction_time;

    Builder::ProcessReport process_report;

    // Discovery Stats
    unsigned long undermatched_readers;
    unsigned long undermatched_writers;
  };

  typedef sequence<WorkerReport> WorkerReportSeq;

  /*
   * Interface between the Test Controller and the Node Controllers
   */
  module NodeController {
    typedef OpenDDS::DCPS::GUID_t NodeId;
    typedef unsigned long SpawnedProcessId;

    const short default_control_domain = 89;

    enum StateEnum {
      AVAILABLE,
      BUSY
    };

    @topic
    struct Status {
      @key NodeId node_id;
      StateEnum state;
      // Optional Human Friendly Name
      string name;
    };
    const string status_topic_name = "Node_Controller_Status";

    struct SpawnedProcessConfig {
      // Worker executable name
      string executable;
      // Command to invoke worker
      string command;
      // Name of the originating configuration file
      string config_name;
      // JSON Serialized Bench::WorkerConfig
      string config;
      // Number of workers to spawn using this config (Must be >=1)
      unsigned long count;
      // If count > 1, then this is where the range of worker ids start
      SpawnedProcessId spawned_process_id;
      // Whether we expect a WorkerReport from this process
      boolean expect_worker_report;
      // Whether we ignore exit errors from this process
      boolean ignore_errors;
    };
    typedef sequence<SpawnedProcessConfig> SpawnedProcessConfigs;

    struct Config {
      NodeId node_id;
      /*
       * Number of seconds to wait for workers to finish before reporting them
       * as failed. 0 means never timeout.
       */
      unsigned long timeout;
      SpawnedProcessConfigs spawned_processes;
    };
    const string allocated_scenario_topic_name = "Allocated_Scenario_Config";
    typedef sequence<Config> Configs;

    struct SpawnedProcessReport {
      SpawnedProcessId spawned_process_id;
      long pid;
      boolean failed;
      // JSON Serialized Bench::WorkerReport
      string details;
      string log;
    };
    typedef sequence<SpawnedProcessReport> SpawnedProcessReports;

    @topic
    struct Report {
      string node_name;
      NodeId node_id;
      SpawnedProcessReports spawned_process_reports;
      Builder::PropertySeq properties;
    };
    const string report_topic_name = "Node_Controller_Report";
  };

  /*
   * Scenario Format for the Test Controller
   */
  module TestController {
    struct WorkerPrototype {
      // Filename of the executable to run. Defaults to "worker/worker"
      string executable;
      // Command to run. Defaults to "<executable> <config>"
      string command;
      // Whether the test controller should not expect a report from this worker instance. Defaults to false.
      boolean no_report;
      // Whether the test controller should ignore exit errors from this worker instance. Defaults to false.
      boolean ignore_errors;
      // Filename of the JSON Serialized Bench::WorkerConfig. Required. Config is modified
      // and transferred to node_controllers as dictated by the scenario.
      string config;
      // Number of workers to spawn using this prototype (Must be >=1)
      unsigned long count;
    };
    typedef sequence<WorkerPrototype> WorkerPrototypes;

    struct NodePrototype {
      // Assign to a node controller with a name that matches this wildcard
      string name_wildcard;
      WorkerPrototypes workers;
      // Number of Nodes to spawn using this prototype (Must be >=1)
      unsigned long count;
      // This NodePrototype must have a Node to itself
      boolean exclusive;
    };
    typedef sequence<NodePrototype> NodePrototypes;

    enum ParameterKind { PK_NUMBER, PK_STRING, PK_TIME };
    union ParameterValue switch (ParameterKind) {
      case PK_NUMBER:
        double number_param;
      case PK_STRING:
        string string_param;
      case PK_TIME:
        Builder::TimeStamp time_param;
    };

    struct Parameter {
      string name;
      string desc;
      ParameterValue value;
    };
    typedef sequence<Parameter> ParameterSeq;

    // This is the type of the scenario configuration
    struct ScenarioPrototype {
      // Unused Metadata
      string name;
      string desc;
      // Scenario parameters (for comparison with other scenarios)
      ParameterSeq scenario_parameters;
      // Workers that must be deployed in sets
      NodePrototypes nodes;
      // Workers that can be assigned to any node
      WorkerPrototypes any_node;
      /*
       * Number of seconds to wait for the scenario to end before deeming it
       * hopeless. 0 means never timeout.
       */
      unsigned long timeout;
    };

    // Result of Applying a Scenario Prototype to a List of Discovered Nodes
    @topic
    struct AllocatedScenario {
      string scenario_id;
      NodeController::Configs configs;
      unsigned long expected_process_reports;
      unsigned long expected_worker_reports;
      unsigned long timeout;
      Builder::TimeStamp launch_time;
    };

    typedef sequence<NodeController::SpawnedProcessId> SpawnedProcessIdSeq;
    typedef sequence<long> LocalProcessIdSeq;
    struct NodeReport {
      string node_name;
      NodeController::NodeId node_id;
      WorkerReportSeq worker_reports;
      Builder::StringSeq spawned_process_logs;
      SpawnedProcessIdSeq spawned_process_ids;
      LocalProcessIdSeq local_process_ids;
      Builder::PropertySeq properties;
    };

    typedef sequence<NodeReport> NodeReportSeq;

    struct Report {
      string scenario_name;
      ParameterSeq run_parameters;
      ParameterSeq scenario_parameters;
      Builder::TimeStamp time;
      NodeReportSeq node_reports;
      unsigned long missing_reports;
      Builder::PropertySeq properties;
    };
  };
};
