name: "Build & Test"

on:
  push:
    branches:
      - master
      - branch-DDS-3.*
      - gh_wf_*
    paths:
      - '**'
      # Don't run this workflow if the only files that changed are the
      # following. Make sure this is the same as the "pull_request.paths" list.
      - '!AUTHORS'
      - '!PROBLEM-REPORT-FORM'
      - '!LICENSE'
      - '!Dockerfile**'
      - '!.dockerignore'
      - '!.mailmap'
      - '!.github/workflows/lint.yml'
      - '!etc/**'
      - '!docs/**'
      - '!hooks/**'
      - '!tools/scripts/**'
      - '!**.md'
      - '!**.rst'
      - '!**/.gitignore'
      - '!**/.lint_config'
      - '!**/README*'
  pull_request:
    branches:
      - master
      - branch-DDS-3.*
    paths:
      - '**'
      # Don't run this workflow if the only files that changed are the
      # following. Make sure this is the same as the "push.paths" list.
      - '!AUTHORS'
      - '!PROBLEM-REPORT-FORM'
      - '!LICENSE'
      - '!Dockerfile**'
      - '!.dockerignore'
      - '!.mailmap'
      - '!.github/workflows/lint.yml'
      - '!etc/**'
      - '!docs/**'
      - '!hooks/**'
      - '!tools/scripts/**'
      - '!**.md'
      - '!**.rst'
      - '!**/.gitignore'
      - '!**/.lint_config'
      - '!**/README*'
  workflow_dispatch:

env:
  TRIGGERING_COMMIT: ${{ github.event.pull_request.head.sha || github.sha }}

jobs:

  wait_cancel_previous:

    runs-on: ubuntu-20.04

    steps:
    - uses: convictional/trigger-workflow-and-wait@v1.3.0
      with:
        owner: ${{ github.repository_owner }}
        repo: OpenDDS
        github_token: ${{ secrets.GITHUB_TOKEN }}
        workflow_file_name: cancel_previous_runs.yml
        ref: ${{ env.TRIGGERING_COMMIT }}
        trigger_workflow: false

  ACE_TAO_u18_i0_xer0_js0_j12:

    runs-on: ubuntu-18.04

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --no-inline --tests --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u18_i0_xer0_js0_j12:

    runs-on: ubuntu-18.04

    needs: ACE_TAO_u18_i0_xer0_js0_j12

    steps:
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_i0_xer0_js0_j12_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_i0_xer0_js0_j12.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --no-inline --tests --java=/usr/lib/jvm/adoptopenjdk-12-hotspot-amd64 --no-rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: gitclean
      shell: bash
      run: |
        touch output.txt
        cd OpenDDS
        git clean -nd -e ext | tee ../output.txt
        if [ -s ../output.txt ]; then exit 1; fi
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  cmake_u18_i0_xer0_js0_j12:

    runs-on: ubuntu-18.04

    needs: build_u18_i0_xer0_js0_j12
    timeout-minutes: 15

    steps:
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_i0_xer0_js0_j12_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_i0_xer0_js0_j12.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u18_i0_xer0_js0_j12_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_i0_xer0_js0_j12.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build and run CMake tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/cmake
        perl run_ci_tests.pl

  build_u18_o1d0v1_xer0_j12:

    runs-on: ubuntu-18.04
    needs: wait_cancel_previous

    steps:
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --doc-group --optimize --no-debug --features=versioned_namespace=1 --tests --java=/usr/lib/jvm/adoptopenjdk-12-hotspot-amd64 --rapidjson --mpc=$GITHUB_WORKSPACE/MPC
    - name: make OpenDDS
      run: |
        cd OpenDDS
        make -j4
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: make install OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        set -e
        export DESTDIR=$(realpath install_temp)
        export INSTALL_PREFIX=$(realpath install_prefix)
        . setenv.sh
        cd $ACE_ROOT
        make install
        cd $TAO_ROOT
        make install
        cd $GITHUB_WORKSPACE/OpenDDS
        make install
        cp -r $DESTDIR/$INSTALL_PREFIX .
        cat << EOF > install_setenv.sh
        export OPENDDS_INSTALL_PREFIX=$INSTALL_PREFIX
        source \$OPENDDS_INSTALL_PREFIX/share/ace/ace-devel.sh
        source \$OPENDDS_INSTALL_PREFIX/share/tao/tao-devel.sh
        source \$OPENDDS_INSTALL_PREFIX/share/dds/dds-devel.sh
        export JAVA_HOME=/usr/lib/jvm/adoptopenjdk-12-hotspot-amd64
        export JAVA_PLATFORM=linux
        export PATH="\$OPENDDS_INSTALL_PREFIX/bin:\$PATH"
        export LD_LIBRARY_PATH="\$OPENDDS_INSTALL_PREFIX/lib:\$LD_LIBRARY_PATH"
        export MPC_ROOT=$GITHUB_WORKSPACE/MPC
        export PERL5LIB=$(realpath bin):$(realpath $ACE_ROOT/bin)
        EOF
    - name: make install build messenger
      shell: bash
      run: |
        cd OpenDDS
        . install_setenv.sh
        cd tests/DCPS/Messenger
        git clean -dfx .
        $ACE_ROOT/bin/mwc.pl -type gnuace .
        make
    - name: make install build cmake
      shell: bash
      run: |
        cd OpenDDS
        . install_setenv.sh
        cd tests/cmake/Messenger/Messenger_1
        git clean -dfx .
        mkdir build
        cd build
        cmake -DCMAKE_PREFIX_PATH=$DDS_ROOT ..
        cmake --build .
    - name: make install build java
      shell: bash
      run: |
        cd OpenDDS
        . install_setenv.sh
        cd java/tests/messenger
        git clean -dfx .
        $ACE_ROOT/bin/mwc.pl -type gnuace
        make
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        tar cvf ../${{ github.job }}.tar setenv.sh install_setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  inst_u18_o1d0v1_xer0_j12:

    runs-on: ubuntu-18.04

    needs: build_u18_o1d0v1_xer0_j12
    timeout-minutes: 40

    steps:
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u18_o1d0v1_xer0_j12_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_o1d0v1_xer0_j12.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: test make install messenger
      shell: bash
      run: |
        cd OpenDDS
        . install_setenv.sh
        cd tests/DCPS/Messenger
        perl run_test.pl rtps
    - name: test make install cmake
      shell: bash
      run: |
        cd OpenDDS
        . install_setenv.sh
        cd tests/cmake/Messenger/Messenger_1/build
        perl run_test.pl
    - name: remove install clutter
      shell: bash
      run: |
        cd OpenDDS
        rm build_u18_o1d0v1_xer0_j12.tar.xz
        rm -rf install_temp install_prefix install_setenv.sh
    - name: gitclean
      shell: bash
      run: |
        touch output.txt
        cd OpenDDS
        git clean -nd -e ext | tee ../output.txt
        if [ -s ../output.txt ]; then exit 1; fi

  u18_esafe_js0:

    runs-on: ubuntu-18.04

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: setup gtest
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --tests --gtest=$GITHUB_WORKSPACE/OpenDDS/tests/googletest/build/install --safety-profile --no-rapidjson --mpc=$GITHUB_WORKSPACE/MPC
    - name: build everything
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        make -j4
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS/build/target
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: run OpenDDS tests
      shell: bash
      run: |
        cd OpenDDS/build/target
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config SAFETY_EXTENDED -Config RTPS -Config LINUX -Config CXX11 -Config OPENDDS_SAFETY_PROFILE -Config DDS_NO_CONTENT_SUBSCRIPTION -Config DDS_NO_CONTENT_FILTERED_TOPIC -Config DDS_NO_MULTI_TOPIC -Config DDS_NO_QUERY_CONDITION -Config DDS_NO_OWNERSHIP_KIND_EXCLUSIVE -Config DDS_NO_OBJECT_MODEL_PROFILE -Config DDS_NO_PERSISTENCE_PROFILE -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/build/target/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/build/target/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/build/target/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/build/target/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  u18_bsafe_js0_FM-1f:

    runs-on: ubuntu-18.04

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: setup gtest
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --tests --gtest=$GITHUB_WORKSPACE/OpenDDS/tests/googletest/build/install --safety-profile=base --no-rapidjson --no-built-in-topics --mpc=$GITHUB_WORKSPACE/MPC
    - name: build everything
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        make -j4
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS/build/target
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: run OpenDDS tests
      shell: bash
      run: |
        cd OpenDDS/build/target
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config SAFETY_BASE -Config RTPS -Config LINUX -Config CXX11 -Config OPENDDS_SAFETY_PROFILE -Config NO_BUILT_IN_TOPICS -Config DDS_NO_CONTENT_SUBSCRIPTION -Config DDS_NO_CONTENT_FILTERED_TOPIC -Config DDS_NO_MULTI_TOPIC -Config DDS_NO_QUERY_CONDITION -Config DDS_NO_OWNERSHIP_KIND_EXCLUSIVE -Config DDS_NO_OBJECT_MODEL_PROFILE -Config DDS_NO_PERSISTENCE_PROFILE  -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/build/target/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/build/target/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/build/target/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/build/target/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  ACE_TAO_u18_d0i0v1_sec_js0_FM-06:

    runs-on: ubuntu-18.04

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --no-debug --no-inline --features=versioned_namespace=1 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u18_d0i0v1_sec_js0_FM-06:

    runs-on: ubuntu-18.04

    needs: ACE_TAO_u18_d0i0v1_sec_js0_FM-06

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_d0i0v1_sec_js0_FM-06_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_d0i0v1_sec_js0_FM-06.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --no-debug --no-inline --features=versioned_namespace=1 --tests --security --no-rapidjson --no-built-in-topics --no-content-subscription --no-ownership-profile --no-object-model-profile --no-persistence-profile --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  test_u18_d0i0v1_sec_js0_FM-06:

    runs-on: ubuntu-18.04

    needs: build_u18_d0i0v1_sec_js0_FM-06
    timeout-minutes: 150

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_d0i0v1_sec_js0_FM-06_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_d0i0v1_sec_js0_FM-06.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u18_d0i0v1_sec_js0_FM-06_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_d0i0v1_sec_js0_FM-06.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: run OpenDDS tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config LINUX -Config XERCES3 -Config WCHAR -Config CXX11 -Config OPENDDS_SECURITY -Config NO_BUILT_IN_TOPICS -Config DDS_NO_CONTENT_SUBSCRIPTION -Config DDS_NO_OWNERSHIP_PROFILE -Config DDS_NO_OBJECT_MODEL_PROFILE -Config DDS_NO_PERSISTENCE_PROFILE -Config GH_ACTIONS  -a -l tests/security/security_tests.lst"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  ACE_TAO_u18_clang5_i0w1_sec:

    runs-on: ubuntu-18.04

    needs: wait_cancel_previous

    steps:
    - name: install clang++
      run: |
        sudo apt-get install -y clang-5.0
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --compiler=clang++-5.0 --no-inline --features=uses_wchar=1 --std=c++11 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u18_clang5_i0w1_sec:

    runs-on: ubuntu-18.04

    needs: ACE_TAO_u18_clang5_i0w1_sec

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: install clang++
      run: |
        sudo apt-get install -y clang-5.0
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_clang5_i0w1_sec_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_clang5_i0w1_sec.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --compiler=clang++-5.0 --no-inline --features=uses_wchar=1 --std=c++11 --tests --security --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --rapidjson --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  cmake_u18_clang5_i0w1_sec:

    runs-on: ubuntu-18.04

    needs: build_u18_clang5_i0w1_sec
    timeout-minutes: 15

    steps:
    - name: install clang++
      run: |
        sudo apt-get install -y clang-5.0
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_clang5_i0w1_sec_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_clang5_i0w1_sec.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u18_clang5_i0w1_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_clang5_i0w1_sec.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: build and run CMake tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/cmake
        perl run_ci_tests.pl --compiler=clang++-5.0 --cxx-standard 11

  ACE_TAO_u18_clang10_sec_js0:

    runs-on: ubuntu-18.04

    needs: wait_cancel_previous

    steps:
    - name: install clang++
      run: |
        sudo apt-get install -y clang-10
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --compiler=clang++-10 --std=c++11 --tests --security --no-rapidjson --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u18_clang10_sec_js0:

    runs-on: ubuntu-18.04

    needs: ACE_TAO_u18_clang10_sec_js0

    steps:
    - name: install clang++
      run: |
        sudo apt-get install -y clang-10
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_clang10_sec_js0_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_clang10_sec_js0.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --compiler=clang++-10 --std=c++11 --tests --security --no-rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  cmake_u18_clang10_sec_js0:

    runs-on: ubuntu-18.04

    needs: build_u18_clang10_sec_js0
    timeout-minutes: 15

    steps:
    - name: install clang++
      run: |
        sudo apt-get install -y clang-10
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_clang10_sec_js0_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_clang10_sec_js0.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u18_clang10_sec_js0_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_clang10_sec_js0.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: build and run CMake tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/cmake
        perl run_ci_tests.pl --compiler=clang++-10

  ACE_TAO_u18_gcc6_d0w1_cpp03:

    runs-on: ubuntu-18.04

    needs: wait_cancel_previous

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install g++-6
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --compiler=g++-6 --no-debug --features=uses_wchar=1 --std=c++03 --tests --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u18_gcc6_d0w1_cpp03:

    runs-on: ubuntu-18.04

    needs: ACE_TAO_u18_gcc6_d0w1_cpp03

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install g++-6
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_gcc6_d0w1_cpp03_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_gcc6_d0w1_cpp03.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --compiler=g++-6 --no-debug --features=uses_wchar=1 --std=c++03 --tests --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  cmake_u18_gcc6_d0w1_cpp03:

    runs-on: ubuntu-18.04

    needs: build_u18_gcc6_d0w1_cpp03
    timeout-minutes: 15

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install g++-6
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_gcc6_d0w1_cpp03_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_gcc6_d0w1_cpp03.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u18_gcc6_d0w1_cpp03_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_gcc6_d0w1_cpp03.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: build and run CMake tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/cmake
        perl run_ci_tests.pl --compiler=g++-6 --cxx-standard 98

  ACE_TAO_u18_gcc8_i0_js0_j:

    runs-on: ubuntu-18.04

    needs: wait_cancel_previous

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install g++-8
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --compiler=g++-8 --no-inline --no-rapidjson --tests --java --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u18_gcc8_i0_js0_j:

    runs-on: ubuntu-18.04

    needs: ACE_TAO_u18_gcc8_i0_js0_j

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install g++-8
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_gcc8_i0_js0_j_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_gcc8_i0_js0_j.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --compiler=g++-8 --no-inline --no-rapidjson --tests --java --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  cmake_u18_gcc8_i0_js0_j:

    runs-on: ubuntu-18.04

    needs: build_u18_gcc8_i0_js0_j
    timeout-minutes: 15

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install g++-8
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_gcc8_i0_js0_j_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_gcc8_i0_js0_j.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u18_gcc8_i0_js0_j_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_gcc8_i0_js0_j.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: build and run CMake tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/cmake
        perl run_ci_tests.pl --compiler=g++-8

  ACE_TAO_u18_gcc10_i0w1_xer0:

    runs-on: ubuntu-18.04

    needs: wait_cancel_previous

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install g++-10
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --compiler=g++-10 --no-inline --features=uses_wchar=1 --tests --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u18_gcc10_i0w1_xer0:

    runs-on: ubuntu-18.04

    needs: ACE_TAO_u18_gcc10_i0w1_xer0

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install g++-10
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_gcc10_i0w1_xer0_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_gcc10_i0w1_xer0.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --compiler=g++-10 --no-inline --features=uses_wchar=1 --tests --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  cmake_u18_gcc10_i0w1_xer0:

    runs-on: ubuntu-18.04

    needs: build_u18_gcc10_i0w1_xer0
    timeout-minutes: 15

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install g++-10
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_gcc10_i0w1_xer0_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_gcc10_i0w1_xer0.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u18_gcc10_i0w1_xer0_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_gcc10_i0w1_xer0.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: build and run CMake tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/cmake
        perl run_ci_tests.pl --compiler=g++-10

  u20_gcc10_bsafe_js0_FM-2c:

    runs-on: ubuntu-20.04

    needs: wait_cancel_previous

    steps:
    - name: install gcc and g++
      run: |
        sudo apt-get install g++-10
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --compiler=g++-10 --safety-profile=base --tests --no-rapidjson --no-content-subscription --no-object-model-profile --no-persistence-profile --mpc=$GITHUB_WORKSPACE/MPC
    - name: build everything
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        make -j4
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS/build/target
        . setenv.sh
        tools/scripts/show_build_config.pl

  ACE_TAO_u20_ace7_j_qt_ws_sec:

    runs-on: ubuntu-20.04

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_master_${{ env.ACE_COMMIT }}
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u20_ace7_j_qt_ws_sec:

    runs-on: ubuntu-20.04

    needs: ACE_TAO_u20_ace7_j_qt_ws_sec

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: install wireshark
      run: |
        sudo apt-get update
        sudo apt-get -y install wireshark-dev
    - name: install qt
      run: sudo apt-get -y install qtbase5-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u20_ace7_j_qt_ws_sec_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u20_ace7_j_qt_ws_sec.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --qt --wireshark --tests --security --java --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: set up TAO Hello test
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mwc.pl -type gnuace -workers 4 $TAO_ROOT/tests/Hello
    - name: build TAO Hello test
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4 dir=$TAO_ROOT/tests/Hello
    - name: set up Modeling tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tools/modeling/tests
        ./setup.pl
        cd -
        mwc.pl -type gnuace -workers 4 -features no_opendds_security=0 tools/modeling/tests/modeling_tests.mwc
    - name: build Modeling tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4 -C tools/modeling/tests
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  test_u20_ace7_j_qt_ws_sec:

    runs-on: ubuntu-20.04

    needs: build_u20_ace7_j_qt_ws_sec
    timeout-minutes: 150

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u20_ace7_j_qt_ws_sec_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u20_ace7_j_qt_ws_sec.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u20_ace7_j_qt_ws_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u20_ace7_j_qt_ws_sec.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: run OpenDDS tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config XERCES3 -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS -a -l java/tests/dcps_java_tests.lst -l tools/modeling/tests/modeling_tests.lst"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  ACE_TAO_u20_p1_asan:

    runs-on: ubuntu-20.04

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --std=c++11 --ipv6 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
        echo "CPPFLAGS += -ggdb -O1 -fsanitize=address -fno-omit-frame-pointer" >> ACE_TAO/ACE/include/makeinclude/platform_macros.GNU
        echo "LDFLAGS += -ggdb -fsanitize=address" >> ACE_TAO/ACE/include/makeinclude/platform_macros.GNU
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        export ASAN_OPTIONS=detect_leaks=0
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u20_p1_asan_sec:

    runs-on: ubuntu-20.04

    needs: ACE_TAO_u20_p1_asan

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u20_p1_asan_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u20_p1_asan.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --std=c++11 --tests --security --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        export ASAN_OPTIONS=detect_leaks=0
        make -j4
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  test_u20_p1_asan_sec:

    runs-on: ubuntu-20.04

    needs: build_u20_p1_asan_sec
    timeout-minutes: 150

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u20_p1_asan_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u20_p1_asan.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u20_p1_asan_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u20_p1_asan_sec.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: run OpenDDS tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config IPV6 -Config RTPS -Config LINUX -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS -a -l tests/security/security_tests.lst"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        echo "leak:getaddrinfo" >> $GITHUB_WORKSPACE/OpenDDS/suppr.txt
        echo "leak:send_graceful_disconnect_message" >> $GITHUB_WORKSPACE/OpenDDS/suppr.txt
        export LSAN_OPTIONS=suppressions=$GITHUB_WORKSPACE/OpenDDS/suppr.txt
        export ASAN_OPTIONS=detect_leaks=1:fast_unwind_on_malloc=0
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  ACE_TAO_u20_p1:

    runs-on: ubuntu-20.04

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --ipv6 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u20_p1_sec:

    runs-on: ubuntu-20.04

    needs: ACE_TAO_u20_p1

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u20_p1_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u20_p1.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --tests --security --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  test_u20_p1_sec:

    runs-on: ubuntu-20.04

    needs: build_u20_p1_sec
    timeout-minutes: 150

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u20_p1_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u20_p1.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u20_p1_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u20_p1_sec.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: run OpenDDS tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config IPV6 -Config RTPS -Config LINUX -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS -a -l tests/security/security_tests.lst"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  build_u20_p1_j8_FM-1f:

    runs-on: ubuntu-20.04

    needs: ACE_TAO_u20_p1

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u20_p1_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u20_p1.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --tests --java=/usr/lib/jvm/adoptopenjdk-8-hotspot-amd64 --no-built-in-topics --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: set up TAO Hello test
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mwc.pl -type gnuace -workers 4 $TAO_ROOT/tests/Hello
    - name: build TAO Hello test
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4 dir=$TAO_ROOT/tests/Hello
    - name: set up Modeling tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tools/modeling/tests
        ./setup.pl
        cd -
        mwc.pl -type gnuace -workers 4 -features built_in_topics=0 -features ipv6=1 tools/modeling/tests/modeling_tests.mwc
    - name: build Modeling tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4 -C tools/modeling/tests
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  test_u20_p1_j8_FM-1f:

    runs-on: ubuntu-20.04

    needs: build_u20_p1_j8_FM-1f
    timeout-minutes: 150

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u20_p1_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u20_p1.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u20_p1_j8_FM-1f_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u20_p1_j8_FM-1f.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: run OpenDDS tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config IPV6 -Config RTPS -Config CXX11 -Config RAPIDJSON -Config NO_BUILT_IN_TOPICS -Config GH_ACTIONS -l tools/modeling/tests/modeling_tests.lst"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  # Ubuntu 18.04 - WChar

  ACE_TAO_u18_w1:

    runs-on: ubuntu-18.04

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --features=uses_wchar=1 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u18_w1_sec:

    runs-on: ubuntu-18.04

    needs: ACE_TAO_u18_w1

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_w1_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_w1.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --features=uses_wchar=1 --tests --security --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  test_u18_w1_sec:

    runs-on: ubuntu-18.04

    needs: build_u18_w1_sec
    timeout-minutes: 150

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_w1_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_w1.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u18_w1_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_w1_sec.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: run OpenDDS tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config WCHAR -Config RTPS -Config LINUX -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS -a -l tests/security/security_tests.lst"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  build_u18_w1_j_FM-2f:

    runs-on: ubuntu-18.04

    needs: ACE_TAO_u18_w1

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_w1_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_w1.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --features=uses_wchar=1 --tests --java --no-content-subscription --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: set up TAO Hello test
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mwc.pl -type gnuace -workers 4 $TAO_ROOT/tests/Hello
    - name: build TAO Hello test
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4 dir=$TAO_ROOT/tests/Hello
    - name: set up Modeling tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tools/modeling/tests
        ./setup.pl
        cd -
        mwc.pl -type gnuace -workers 4 -features content_subscription=0 tools/modeling/tests/modeling_tests.mwc
    - name: build Modeling tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4 -C tools/modeling/tests
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  test_u18_w1_j_FM-2f:

    runs-on: ubuntu-18.04

    needs: build_u18_w1_j_FM-2f
    timeout-minutes: 150

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_w1_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_w1.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u18_w1_j_FM-2f_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_w1_j_FM-2f.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: run OpenDDS tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config WCHAR -Config RTPS -Config CXX11 -Config RAPIDJSON -Config DDS_NO_CONTENT_SUBSCRIPTION -Config GH_ACTIONS -a -l java/tests/dcps_java_tests.lst -l tools/modeling/tests/modeling_tests.lst"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  ACE_TAO_u18_stat_qt_ws_sec:

    runs-on: ubuntu-18.04

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --static --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u18_stat_qt_ws_sec:

    runs-on: ubuntu-18.04

    needs: ACE_TAO_u18_stat_qt_ws_sec

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: install wireshark
      run: |
        sudo apt-get update
        sudo apt-get -y install wireshark-dev
    - name: install qt
      run: sudo apt-get -y install qtbase5-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_stat_qt_ws_sec_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_stat_qt_ws_sec.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: setup gtest
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --static --qt --wireshark --security --rapidjson --gtest=$GITHUB_WORKSPACE/OpenDDS/tests/googletest/build/install --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz


  cmake_u18_stat_qt_ws_sec:

    runs-on: ubuntu-18.04

    needs: build_u18_stat_qt_ws_sec
    timeout-minutes: 15

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: install qt
      run: sudo apt-get -y install qtbase5-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_stat_qt_ws_sec_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_stat_qt_ws_sec.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u18_stat_qt_ws_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_stat_qt_ws_sec.tar.xz
    - name: setup gtest
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: build and run CMake tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/cmake
        perl run_ci_tests.pl --no-shared

  messenger_u18_stat_qt_ws_sec:

    runs-on: ubuntu-18.04

    needs: build_u18_stat_qt_ws_sec
    timeout-minutes: 40

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: install qt
      run: sudo apt-get -y install qtbase5-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_stat_qt_ws_sec_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_stat_qt_ws_sec.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u18_stat_qt_ws_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_stat_qt_ws_sec.tar.xz
    - name: setup gtest
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: build messenger tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/DCPS/Messenger
        perl $ACE_ROOT/bin/mwc.pl -type gnuace -static -features no_cxx11=0 -features no_rapidjson=0 -features qt5=1 -features ssl=1 -features java=1 -features openssl11=1 -features xerces3=1 -features ipv6=1 -features no_opendds_security=0 -features no_cxx11=0
    - name: make messenger tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/DCPS/Messenger
        make
    - name: build C++11 messenger test
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/DCPS/C++11
        perl $ACE_ROOT/bin/mwc.pl -type gnuace -static -features no_cxx11=0 -features no_rapidjson=0 -features qt5=1 -features ssl=1 -features java=1 -features openssl11=1 -features xerces3=1 -features ipv6=1 -features no_opendds_security=0 -features no_cxx11=0
    - name: make C++11 messenger test
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/DCPS/C++11
        make
    - name: run OpenDDS tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -l tests/static_ci_tests.lst -Config STATIC_MESSENGER -Config RTPS -Config STATIC -Config LINUX -Config XERCES3 -Config OPENDDS_SECURITY -Config RAPIDJSON -Config CXX11 -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  compiler_u18_stat_qt_ws_sec:

    runs-on: ubuntu-18.04

    needs: build_u18_stat_qt_ws_sec
    timeout-minutes: 30

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_stat_qt_ws_sec_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_stat_qt_ws_sec.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u18_stat_qt_ws_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_stat_qt_ws_sec.tar.xz
    - name: setup gtest
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: build compiler tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/DCPS/Compiler
        perl $ACE_ROOT/bin/mwc.pl -type gnuace -static -features no_cxx11=0 -features no_rapidjson=0 -features qt5=1 -features ssl=1 -features java=1 -features openssl11=1 -features xerces3=1 -features ipv6=1 -features no_opendds_security=0
    - name: make compiler tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/DCPS/Compiler
        make
    - name: run OpenDDS tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -l tests/static_ci_tests.lst -Config STATIC_COMPILER -Config RTPS -Config STATIC -Config LINUX -Config XERCES3 -Config OPENDDS_SECURITY -Config RAPIDJSON -Config CXX11 -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  unit_u18_stat_qt_ws_sec:

    runs-on: ubuntu-18.04

    needs: build_u18_stat_qt_ws_sec
    timeout-minutes: 15

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_stat_qt_ws_sec_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_stat_qt_ws_sec.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u18_stat_qt_ws_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_stat_qt_ws_sec.tar.xz
    - name: setup gtest
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: build unit tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/DCPS/UnitTests
        perl $ACE_ROOT/bin/mwc.pl -type gnuace -static -features no_cxx11=0 -features no_rapidjson=0 -features qt5=1 -features ssl=1 -features java=1 -features openssl11=1 -features xerces3=1 -features ipv6=1 -features no_opendds_security=0
    - name: make unit tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tests/DCPS/UnitTests
        make
    - name: run OpenDDS tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -l tests/static_ci_tests.lst -Config STATIC_UNIT -Config RTPS -Config STATIC -Config LINUX -Config XERCES3 -Config OPENDDS_SECURITY -Config RAPIDJSON -Config CXX11 -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  ACE_TAO_u18_j_cft0_FM-37:

    runs-on: ubuntu-18.04

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install xerces
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_u18_j_cft0_FM-37:

    runs-on: ubuntu-18.04

    needs: ACE_TAO_u18_j_cft0_FM-37

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_j_cft0_FM-37_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_j_cft0_FM-37.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --tests --java --no-content-filtered-topic --rapidjson --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: set up TAO Hello test
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mwc.pl -type gnuace -workers 4 $TAO_ROOT/tests/Hello
    - name: build TAO Hello test
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4 dir=$TAO_ROOT/tests/Hello
    - name: set up Modeling tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tools/modeling/tests
        ./setup.pl
        cd -
        mwc.pl -type gnuace -workers 4 -features content_filtered_topic=0 tools/modeling/tests/modeling_tests.mwc
    - name: build Modeling tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4 -C tools/modeling/tests
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  test_u18_j_cft0_FM-37:

    runs-on: ubuntu-18.04

    needs: build_u18_j_cft0_FM-37
    timeout-minutes: 150

    steps:
    - name: install xerces
      run: sudo apt-get -y install libxerces-c-dev
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_u18_j_cft0_FM-37_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_u18_j_cft0_FM-37.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_u18_j_cft0_FM-37_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_u18_j_cft0_FM-37.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: run OpenDDS tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config RAPIDJSON -Config DDS_NO_CONTENT_FILTERED_TOPIC -Config GH_ACTIONS -l tools/modeling/tests/modeling_tests.lst"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  ACE_TAO_w19_p1_stat_js0:

    runs-on: windows-2019

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install openssl & xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        configure --ipv6 --static --no-rapidjson --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows --mpcopts=-hierarchy
    - name: build ACE & TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ACE_TAO\ACE
        msbuild -p:Configuration=Debug,Platform=x64 -m ace.sln
        cd ..\TAO
        msbuild -p:Configuration=Debug,Platform=x64 -m tao.sln
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.obj" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_w19_p1_stat_js0:

    runs-on: windows-2019

    needs: ACE_TAO_w19_p1_stat_js0

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_p1_stat_js0_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_p1_stat_js0.tar.xz
        rm -f ACE_TAO_w19_p1_stat_js0.tar.xz
    - uses: ammaraskar/msvc-problem-matcher@0.1
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: configure OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        configure --ipv6 --static --no-rapidjson --gtest=%GITHUB_WORKSPACE%/OpenDDS/tests/googletest/build/install --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        msbuild -p:Configuration=Debug,Platform=x64 -m DDS_no_tests.sln
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.cmd
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  cmake_w19_p1_stat_js0:

    runs-on: windows-2019

    needs: build_w19_p1_stat_js0
    timeout-minutes: 15

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_p1_stat_js0_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_p1_stat_js0.tar.xz
        rm -f ACE_TAO_w19_p1_stat_js0.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_p1_stat_js0_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_p1_stat_js0.tar.xz
        rm -f build_w19_p1_stat_js0.tar.xz
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build and run CMake tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests/cmake/
        perl run_ci_tests.pl --no-shared --build-config=Debug

  messenger_w19_p1_stat_js0:

    runs-on: windows-2019

    needs: build_w19_p1_stat_js0
    timeout-minutes: 40

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_p1_stat_js0_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_p1_stat_js0.tar.xz
        rm -f ACE_TAO_w19_p1_stat_js0.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_p1_stat_js0_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_p1_stat_js0.tar.xz
        rm -f build_w19_p1_stat_js0.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features no_rapidjson=1 -features ipv6=1 -features ssl=1 -features no_cxx11=0
    - name: make messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        msbuild -p:Configuration=Debug,Platform=x64 -m Messenger.sln
    - name: build C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features no_rapidjson=1 -features ipv6=1 -features ssl=1 -features no_cxx11=0
    - name: make C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        msbuild -p:Configuration=Debug,Platform=x64 -m C++11.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS -l tests\static_ci_tests.lst -ExeSubDir Static_Debug -Config STATIC_MESSENGER -Config RTPS -Config WIN64 -Config IPV6 -Config XERCES3 -Config CXX11 -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  compiler_w19_p1_stat_js0:

    runs-on: windows-2019

    needs: build_w19_p1_stat_js0
    timeout-minutes: 30

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_p1_stat_js0_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_p1_stat_js0.tar.xz
        rm -f ACE_TAO_w19_p1_stat_js0.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_p1_stat_js0_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_p1_stat_js0.tar.xz
        rm -f build_w19_p1_stat_js0.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features no_rapidjson=1 -features ipv6=1 -features ssl=1 -features no_cxx11=0
    - name: make compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        dir
        msbuild -p:Configuration=Debug,Platform=x64 -m Compiler.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS -l tests\static_ci_tests.lst -ExeSubDir Static_Debug -Config STATIC_COMPILER -Config RTPS -Config WIN64 -Config IPV6 -Config XERCES3 -Config CXX11 -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  unit_w19_p1_stat_js0:

    runs-on: windows-2019

    needs: build_w19_p1_stat_js0
    timeout-minutes: 15

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_p1_stat_js0_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_p1_stat_js0.tar.xz
        rm -f ACE_TAO_w19_p1_stat_js0.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_p1_stat_js0_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_p1_stat_js0.tar.xz
        rm -f build_w19_p1_stat_js0.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\UnitTests
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features no_rapidjson=1 -features ipv6=1 -features ssl=1 -features no_cxx11=0
    - name: make unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\UnitTests
        msbuild -p:Configuration=Debug,Platform=x64 -m UnitTests.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS -l tests\static_ci_tests.lst -ExeSubDir Static_Debug -Config STATIC_UNIT -Config RTPS -Config WIN64 -Config IPV6 -Config XERCES3 -Config CXX11 -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  ACE_TAO_w19_re_p1_stat_FM-08:

    runs-on: windows-2019

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install openssl & xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        configure --ipv6 --static --rapidjson --no-built-in-topics --no-content-subscription --no-ownership-profile --no-object-model-profile --no-persistence-profile --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows --mpcopts=-hierarchy
    - name: build ACE & TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ACE_TAO\ACE
        msbuild -p:Configuration=Release,Platform=x64 -m ace.sln
        cd ..\TAO
        msbuild -p:Configuration=Release,Platform=x64 -m tao.sln
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.obj" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_w19_re_p1_stat_FM-08:

    runs-on: windows-2019

    needs: ACE_TAO_w19_re_p1_stat_FM-08

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_p1_stat_FM-08_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
        rm -f ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
    - uses: ammaraskar/msvc-problem-matcher@0.1
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install --config Release
    - name: configure OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        configure --ipv6 --static --rapidjson --gtest=%GITHUB_WORKSPACE%/OpenDDS/tests/googletest/build/install --no-built-in-topics --no-content-subscription --no-ownership-profile --no-object-model-profile --no-persistence-profile --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        msbuild -p:Configuration=Release,Platform=x64 -m DDS_no_tests.sln
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.cmd
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  messenger_w19_re_p1_stat_FM-08:

    runs-on: windows-2019

    needs: build_w19_re_p1_stat_FM-08
    timeout-minutes: 40

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_p1_stat_FM-08_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
        rm -f ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_re_p1_stat_FM-08_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_p1_stat_FM-08.tar.xz
        rm -f build_w19_re_p1_stat_FM-08.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install --config Release
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0 -features ownership_profile=0 -features content_subscription=0 -features object_model_profile=0 -features persistence_profile=0
    - name: make messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        msbuild -p:Configuration=Release,Platform=x64 -m Messenger.sln
    - name: build C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0 -features ownership_profile=0 -features content_subscription=0 -features object_model_profile=0 -features persistence_profile=0
    - name: make C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        msbuild -p:Configuration=Release,Platform=x64 -m C++11.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS -l tests\static_ci_tests.lst -ExeSubDir Static_Release -Config STATIC -Config STATIC_MESSENGER -Config NO_BUILT_IN_TOPICS -Config DDS_NO_OBJECT_MODEL_PROFILE -Config DDS_NO_OWNERSHIP_PROFILE -Config DDS_NO_PERSISTENCE_PROFILE -Config DDS_NO_CONTENT_SUBSCRIPTION -Config IPV6 -Config RTPS -Config CXX11 -Config OPENDDS_SECURITY -Config RAPIDJSON -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  compiler_w19_re_p1_stat_FM-08:

    runs-on: windows-2019

    needs: build_w19_re_p1_stat_FM-08
    timeout-minutes: 30

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_p1_stat_FM-08_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
        rm -f ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_re_p1_stat_FM-08_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_p1_stat_FM-08.tar.xz
        rm -f build_w19_re_p1_stat_FM-08.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install --config Release
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0 -features ownership_profile=0 -features content_subscription=0 -features object_model_profile=0 -features persistence_profile=0
    - name: make compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        msbuild -p:Configuration=Release,Platform=x64 -m Compiler.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS -l tests\static_ci_tests.lst -ExeSubDir Static_Release -Config STATIC_COMPILER -Config STATIC -Config NO_BUILT_IN_TOPICS -Config DDS_NO_OBJECT_MODEL_PROFILE -Config DDS_NO_OWNERSHIP_PROFILE -Config DDS_NO_PERSISTENCE_PROFILE -Config DDS_NO_CONTENT_SUBSCRIPTION -Config IPV6 -Config RTPS -Config OPENDDS_SECURITY -Config RAPIDJSON -Config CXX11 -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  unit_w19_re_p1_stat_FM-08:

    runs-on: windows-2019

    needs: build_w19_re_p1_stat_FM-08
    timeout-minutes: 15

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_p1_stat_FM-08_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
        rm -f ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_re_p1_stat_FM-08_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_p1_stat_FM-08.tar.xz
        rm -f build_w19_re_p1_stat_FM-08.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install --config Release
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\UnitTests
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0 -features ownership_profile=0 -features content_subscription=0 -features object_model_profile=0 -features persistence_profile=0
    - name: make unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\UnitTests
        msbuild -p:Configuration=Release,Platform=x64 -m UnitTests.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS -l tests\static_ci_tests.lst -ExeSubDir Static_Release -Config STATIC_UNIT -Config STATIC -Config NO_BUILT_IN_TOPICS -Config DDS_NO_OBJECT_MODEL_PROFILE -Config DDS_NO_OWNERSHIP_PROFILE -Config DDS_NO_PERSISTENCE_PROFILE -Config DDS_NO_CONTENT_SUBSCRIPTION -Config IPV6 -Config RTPS -Config OPENDDS_SECURITY -Config RAPIDJSON -Config CXX11 -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  ACE_TAO_w19_re_o1p1_sec:

    runs-on: windows-2019

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.4
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install openssl & xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        configure --optimize --ipv6 --security --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows --mpcopts=-hierarchy
    - name: build ACE & TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ACE_TAO\ACE
        msbuild -p:Configuration=Release,Platform=x64 -m ace.sln
        cd ..\TAO
        msbuild -p:Configuration=Release,Platform=x64 -m tao.sln
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.obj" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_w19_re_o1p1_sec:

    runs-on: windows-2019

    needs: ACE_TAO_w19_re_o1p1_sec

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_o1p1_sec_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_o1p1_sec.tar.xz
        rm -f ACE_TAO_w19_re_o1p1_sec.tar.xz
    - uses: ammaraskar/msvc-problem-matcher@0.1
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: configure OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        configure --optimize --ipv6 --rapidjson --security --gtest=%GITHUB_WORKSPACE%/OpenDDS/tests/googletest/build/install --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        msbuild -p:Configuration=Release,Platform=x64 -m DDS_no_tests.sln
    - name: gitclean
      shell: bash
      run: |
        touch output.txt
        cd OpenDDS
        git clean -nd -e ext | tee ../output.txt
        if [ -s ../output.txt ]; then exit 1; fi
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.cmd
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  messenger_w19_re_o1p1_sec:

    runs-on: windows-2019

    needs: build_w19_re_o1p1_sec
    timeout-minutes: 40

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_o1p1_sec_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_o1p1_sec.tar.xz
        rm -f ACE_TAO_w19_re_o1p1_sec.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_re_o1p1_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_o1p1_sec.tar.xz
        rm -f build_w19_re_o1p1_sec.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features no_opendds_security=0
    - name: make messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        msbuild -p:Configuration=Release,Platform=x64 -m Messenger.sln
    - name: build C++11 messenge test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features no_opendds_security=0
    - name: make C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        msbuild -p:Configuration=Release,Platform=x64 -m C++11.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS -l tests\static_ci_tests.lst -ExeSubDir Release -Config STATIC_MESSENGER -Config RTPS -Config WIN64 -Config IPV6 -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  compiler_w19_re_o1p1_sec:

    runs-on: windows-2019

    needs: build_w19_re_o1p1_sec
    timeout-minutes: 30

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_o1p1_sec_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_o1p1_sec.tar.xz
        rm -f ACE_TAO_w19_re_o1p1_sec.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_re_o1p1_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_o1p1_sec.tar.xz
        rm -f build_w19_re_o1p1_sec.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: build compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features no_opendds_security=0
    - name: make compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        msbuild -p:Configuration=Release,Platform=x64 -m Compiler.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS -l tests\static_ci_tests.lst -ExeSubDir Release -Config STATIC_COMPILER -Config RTPS -Config WIN64 -Config IPV6 -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  unit_w19_re_o1p1_sec:

    runs-on: windows-2019

    needs: build_w19_re_o1p1_sec
    timeout-minutes: 15

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_o1p1_sec_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_o1p1_sec.tar.xz
        rm -f ACE_TAO_w19_re_o1p1_sec.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_re_o1p1_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_o1p1_sec.tar.xz
        rm -f build_w19_re_o1p1_sec.tar.xz
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: build unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\UnitTests
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features no_opendds_security=0
    - name: make unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\UnitTests
        msbuild -p:Configuration=Release,Platform=x64 -m UnitTests.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS -l tests\static_ci_tests.lst -ExeSubDir Release -Config STATIC_UNIT -Config RTPS -Config WIN64 -Config IPV6 -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi


  wireshark_w19-release:

    runs-on: windows-2019
    needs: wait_cancel_previous

    steps:
    - name: checkout Wireshark
      shell: cmd
      run: |
        git clone -q -b release-3.4 --depth=1 https://gitlab.com/wireshark/wireshark.git
        cd wireshark
        for /f %%x in ('git rev-parse HEAD') do @echo WIRESHARK_COMMIT=%%x>> %GITHUB_ENV%
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_${{ env.WIRESHARK_COMMIT }}
    - name: install vcpkg packages
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      id: runvcpkg
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgDirectory: '${{ github.workspace }}/vcpkg-qt'
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse qt5-winextras qt5-tools qt5-svg qt5-multimedia qt5-declarative
        vcpkgTriplet: x64-windows
    - name: checkout WinFlexBison
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: lexxmark/winflexbison
        path: winflexbison
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: build WinFlexBison
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-cmake@v3
      with:
        cmakeListsTxtPath: winflexbison/CMakeLists.txt
    - name: set Wireshark environment
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        echo WIRESHARK_LIB_DIR=%CD%\wireshark-win64-libs-3.4>> %GITHUB_ENV%
        echo QT5_BASE_DIR=${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}\installed\x64-windows>> %GITHUB_ENV%
        type %GITHUB_ENV%
    - name: build Wireshark
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-cmake@v3
      with:
        cmakeListsTxtPath: wireshark/CMakeLists.txt
        cmakeListsOrSettingsJson: CMakeListsTxtAdvanced
        buildDirectory: ${{ github.workspace }}/wsbuild
        cmakeAppendedArgs: '-GNinja -DLEX_EXECUTABLE=${{ github.workspace }}\winflexbison\bin\Debug\win_flex.exe -DYACC_EXECUTABLE=${{ github.workspace }}\winflexbison\bin\Debug\win_bison.exe'
        buildWithCMakeArgs: '-t epan'
    - name: create Wireshark artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        find -iname "*\.obj" -delete
        tar cvhf ${{ github.job }}.tar wireshark wsbuild wireshark-win64-libs-3.4
        xz -3 ${{ github.job }}.tar
    - name: upload Wireshark artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  ACE_TAO_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install openssl & xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        configure --optimize --java --no-built-in-topics --rapidjson --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows --mpcopts=-hierarchy
    - name: build ACE & TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ACE_TAO\ACE
        msbuild -p:Configuration=Release,Platform=x64 -m ace.sln
        cd ..\TAO
        msbuild -p:Configuration=Release,Platform=x64 -m tao.sln
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.obj" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    needs: [ACE_TAO_w19_re_j_ws_FM-1f, wireshark_w19-release]

    steps:
    - name: download Wireshark artifact
      uses: actions/download-artifact@v2
      with:
        name: wireshark_w19-release_artifact
    - name: extract Wireshark artifact
      shell: bash
      run: |
        tar xvJf wireshark_w19-release.tar.xz
        rm -f wireshark_w19-release.tar.xz
    - name: install openssl & xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_j_ws_FM-1f_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
        rm -f ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
    - name: set up MSVC problem matcher
      uses: ammaraskar/msvc-problem-matcher@0.1
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: configure OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        configure --optimize --java --no-built-in-topics --rapidjson --gtest=%GITHUB_WORKSPACE%/OpenDDS/tests/googletest/build/install --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x64-windows --wireshark-cmake=%GITHUB_WORKSPACE%\wireshark --wireshark-build=%GITHUB_WORKSPACE%\wsbuild --wireshark-lib=run --glib=%GITHUB_WORKSPACE%\wireshark-win64-libs-3.4\vcpkg-export-20190318-win64ws\installed\x64-windows --openssl=%VCPKG_ROOT%/installed/x64-windows --mpcopts=-hierarchy
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: build OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        msbuild -p:Configuration=Release,Platform=x64 -m DDS_no_tests.sln
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.cmd
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  messenger_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    needs: build_w19_re_j_ws_FM-1f
    timeout-minutes: 40

    steps:
    - name: install xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_j_ws_FM-1f_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
        rm -f ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_re_j_ws_FM-1f_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_j_ws_FM-1f.tar.xz
        rm -f build_w19_re_j_ws_FM-1f.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: build messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features no_cxx11=0 -features java=1 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0
    - name: make messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        msbuild -p:Configuration=Release,Platform=x64 -m Messenger.sln
    - name: build C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features no_cxx11=0 -features java=1 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0
    - name: make C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        msbuild -p:Configuration=Release,Platform=x64 -m C++11.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS -l tests\static_ci_tests.lst -ExeSubDir Release -Config STATIC_MESSENGER -Config RTPS -Config WIN64 -Config XERCES3 -Config CXX11 -Config RAPIDJSON -Config NO_BUILT_IN_TOPICS -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  compiler_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    needs: build_w19_re_j_ws_FM-1f
    timeout-minutes: 30

    steps:
    - name: install xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_j_ws_FM-1f_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
        rm -f ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_re_j_ws_FM-1f_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_j_ws_FM-1f.tar.xz
        rm -f build_w19_re_j_ws_FM-1f.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: build compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features no_cxx11=0 -features java=1 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0
    - name: make compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        msbuild -p:Configuration=Release,Platform=x64 -m Compiler.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS -l tests\static_ci_tests.lst -ExeSubDir Release -Config STATIC_COMPILER -Config RTPS -Config WIN64 -Config XERCES3 -Config CXX11 -Config RAPIDJSON -Config NO_BUILT_IN_TOPICS -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  unit_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    needs: build_w19_re_j_ws_FM-1f
    timeout-minutes: 15

    steps:
    - name: install xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse xerces-c
        vcpkgTriplet: x64-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w19_re_j_ws_FM-1f_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
        rm -f ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w19_re_j_ws_FM-1f_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_j_ws_FM-1f.tar.xz
        rm -f build_w19_re_j_ws_FM-1f.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: check GTest Path
      shell: cmd
      run: |
        cd D:\a\OpenDDS\OpenDDS\OpenDDS\tests\googletest\build\install\
        dir
        cd lib
        dir
    - name: build unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\UnitTests
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features no_cxx11=0 -features java=1 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0
    - name: make unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\UnitTests
        msbuild -p:Configuration=Release,Platform=x64 -m UnitTests.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS -l tests\static_ci_tests.lst -Config STATIC_UNIT -Config RTPS -Config WIN64 -Config XERCES3 -Config CXX11 -Config RAPIDJSON -Config NO_BUILT_IN_TOPICS -Config GH_ACTIONS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  ACE_TAO_w16_x86_d0i0:

    runs-on: windows-2016

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install openssl & xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x86-windows
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1.8.0
      with:
        arch: x86
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        configure --no-debug --no-inline --tests --security --ace=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/ACE --tao=%GITHUB_WORKSPACE%/OpenDDS/ACE_TAO/TAO --mpc=%GITHUB_WORKSPACE%/MPC --xerces3=%VCPKG_ROOT%/installed/x86-windows --openssl=%VCPKG_ROOT%/installed/x86-windows --mpcopts=-hierarchy
    - name: build ACE & TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ACE_TAO\ACE
        msbuild -p:Configuration=Debug,Platform=Win32 -m ace.sln
        cd ..\TAO
        msbuild -p:Configuration=Debug,Platform=Win32 -m tao.sln
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.obj" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_w16_x86_d0i0_sec:

    runs-on: windows-2016

    needs: ACE_TAO_w16_x86_d0i0

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x86-windows
    - name: ls
      shell: bash
      run: |
        cd vcpkg
        rm -rf buildtrees downloads
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w16_x86_d0i0_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w16_x86_d0i0.tar.xz
        rm -f ACE_TAO_w16_x86_d0i0.tar.xz
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
    - name: Move ACE and MPC to C Drive
      shell: bash
      run: |
        mv OpenDDS/ACE_TAO /c/
        mv MPC /c/
    - uses: ammaraskar/msvc-problem-matcher@0.1
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
      with:
        arch: x86
    - name: configure OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        configure --tests --rapidjson --security --ace="C:\ACE_TAO\ACE" --tao="C:\ACE_TAO\TAO" --mpc="C:\MPC" --xerces3="%VCPKG_ROOT%\installed\x86-windows" --openssl="%VCPKG_ROOT%\installed\x86-windows"
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        msbuild -p:Configuration=Debug,Platform=Win32 -m DDS.sln
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.cmd
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  test_w16_x86_d0i0_sec:

    runs-on: windows-2016

    needs: build_w16_x86_d0i0_sec
    timeout-minutes: 150

    steps:
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse openssl xerces-c
        vcpkgTriplet: x86-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w16_x86_d0i0_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w16_x86_d0i0.tar.xz
        rm -f ACE_TAO_w16_x86_d0i0.tar.xz
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
    - name: Move ACE and MPC to C Drive
      shell: bash
      run: |
        mv OpenDDS/ACE_TAO /c/
        mv MPC /c/
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_w16_x86_d0i0_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w16_x86_d0i0_sec.tar.xz
        rm -f build_w16_x86_d0i0_sec.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS -Config RTPS -Config WIN32 -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config GH_ACTIONS -a -l tests/security/security_tests.lst"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "%GITHUB_WORKSPACE%\autobuild\autobuild.pl" "%GITHUB_WORKSPACE%\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  build_w16_x86_d0i0_j_FM-1f:

    runs-on: windows-2016

    needs: ACE_TAO_w16_x86_d0i0

    steps:
    - name: install xerces-c
      uses: lukka/run-vcpkg@v6
      with:
        vcpkgGitCommitId: 44d94c2edbd44f0c01d66c2ad95eb6982a9a61bc
        vcpkgArguments: --recurse xerces-c
        vcpkgTriplet: x86-windows
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_w16_x86_d0i0_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w16_x86_d0i0.tar.xz
        rm -f ACE_TAO_w16_x86_d0i0.tar.xz
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
    - name: Move ACE and MPC to C Drive
      shell: bash
      run: |
        mv OpenDDS/ACE_TAO /c/
        mv MPC /c/
    - uses: ammaraskar/msvc-problem-matcher@0.1
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1.8.0
      with:
        arch: x86
    - name: configure OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        configure --tests --java --no-built-in-topics --rapidjson --ace="C:\ACE_TAO\ACE" --tao="C:\ACE_TAO\TAO" --mpc="C:\MPC" --xerces3="%VCPKG_ROOT%\installed\x86-windows"
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        msbuild -p:Configuration=Debug,Platform=Win32 -m DDS.sln
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.cmd
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  # macOS 11.0

#  macos-11_0_defaults_ACE_TAO:

#    runs-on: macos-11.0

#    steps:
#    - name: checkout OpenDDS
#      uses: actions/checkout@v2.3.4
#      with:
#        path: OpenDDS
#        submodules: true
#    - name: checkout ACE_TAO
#      uses: actions/checkout@v2.3.4
#      with:
#        repository: DOCGroup/ACE_TAO
#        ref: 9eae9c11f1bcd07b48c74820d8cb4c67aca9ef23 # Update to 6_5_13 when available
#        path: OpenDDS/ACE_TAO
#    - name: get ACE_TAO commit
#      shell: bash
#      run: |
#        cd OpenDDS/ACE_TAO
#        export ACE_COMMIT=$(git rev-parse HEAD)
#        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
#    - name: Cache Artifact
#      id: cache-artifact
#      uses: actions/cache@v2.1.5
#      with:
#        path: ${{ github.job }}.tar.xz
#        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
#    - name: install xerces-c
#      if: steps.cache-artifact.outputs.cache-hit != 'true'
#      run: |
#        brew install xerces-c
#    - name: checkout MPC
#      if: steps.cache-artifact.outputs.cache-hit != 'true'
#      uses: actions/checkout@v2.3.4
#      with:
#        repository: DOCGroup/MPC
#        path: MPC
#    - name: configure OpenDDS
#      if: steps.cache-artifact.outputs.cache-hit != 'true'
#      run: |
#        cd OpenDDS
#        ./configure --std=c++11 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC --xerces3=/usr/local/Cellar/xerces-c/3.2.3 --openssl=/usr/local/opt/openssl/
#    - name: build ACE and TAO
#      if: steps.cache-artifact.outputs.cache-hit != 'true'
#      run: |
#        cd OpenDDS
#        . setenv.sh
#        cd ACE_TAO/ACE
#        make -j4
#        cd ../TAO
#        make -j4
#    - name: create ACE_TAO tar.xz artifact
#      if: steps.cache-artifact.outputs.cache-hit != 'true'
#      shell: bash
#      run: |
#        cd OpenDDS/ACE_TAO
#        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
#        find . -iname "*\.o" | xargs rm
#        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
#        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
#        xz -3 ../../${{ github.job }}.tar
#    - name: upload ACE_TAO artifact
#      uses: actions/upload-artifact@v2
#      with:
#        name: ${{ github.job }}_artifact
#        path: ${{ github.job }}.tar.xz

#  macos-11_0_defaults_security_build:

#    runs-on: macos-11.0

#    needs: macos-11_0_defaults_ACE_TAO

#    steps:
#    - name: install xerces-c
#      run: |
#        brew install xerces-c
#    - name: checkout MPC
#      uses: actions/checkout@v2.3.4
#      with:
#        repository: DOCGroup/MPC
#        path: MPC
#    - name: checkout ACE_TAO
#      uses: actions/checkout@v2.3.4
#      with:
#        repository: DOCGroup/ACE_TAO
#        ref: 9eae9c11f1bcd07b48c74820d8cb4c67aca9ef23 # Update to 6_5_13 when available
#        path: ACE_TAO
#    - name: download ACE_TAO artifact
#      uses: actions/download-artifact@v2
#      with:
#        name: macos-11_0_defaults_ACE_TAO_artifact
#        path: ACE_TAO
#    - name: extract ACE_TAO artifact
#      shell: bash
#      run: |
#        cd ACE_TAO
#        tar xvfJ macos-11_0_defaults_ACE_TAO.tar.xz
#    - name: checkout OpenDDS
#      uses: actions/checkout@v2.3.4
#      with:
#        path: OpenDDS
#        submodules: true
#    - name: configure OpenDDS
#      run: |
#        cd OpenDDS
#        ./configure --std=c++11 --tests --rapidjson --security --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC --xerces3=/usr/local/Cellar/xerces-c/3.2.3 --openssl=/usr/local/opt/openssl/
#    - name: check build configuration
#      shell: bash
#      run: |
#        cd OpenDDS
#        . setenv.sh
#        tools/scripts/show_build_config.pl
#    - uses: ammaraskar/gcc-problem-matcher@0.1
#    - name: build OpenDDS
#      shell: bash
#      run: |
#        cd OpenDDS
#        . setenv.sh
#        make -j4
#    - name: create OpenDDS tar.xz artifact
#      shell: bash
#      run: |
#        cd OpenDDS
#        rm -rf ACE_TAO
#        find . -iname "*\.o" | xargs rm
#        tar cvf ../${{ github.job }}.tar setenv.sh
#        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#        xz -3 ../${{ github.job }}.tar
#    - name: upload OpenDDS artifact
#      uses: actions/upload-artifact@v2
#      with:
#        name: ${{ github.job }}_artifact
#        path: ${{ github.job }}.tar.xz

#  macos-11_0_defaults_security_test:

#    runs-on: macos-11.0

#    needs: macos-11_0_defaults_security_build

#    steps:
#    - name: install xerces-c
#      run: |
#        brew install xerces-c
#    - name: checkout MPC
#      uses: actions/checkout@v2.3.4
#      with:
#        repository: DOCGroup/MPC
#        path: MPC
#    - name: checkout autobuild
#      uses: actions/checkout@v2.3.4
#      with:
#        repository: DOCGroup/autobuild
#        path: autobuild
#    - name: checkout ACE_TAO
#      uses: actions/checkout@v2.3.4
#      with:
#        repository: DOCGroup/ACE_TAO
#        ref: 9eae9c11f1bcd07b48c74820d8cb4c67aca9ef23 # Update to 6_5_13 when available
#        path: ACE_TAO
#    - name: download ACE_TAO artifact
#      uses: actions/download-artifact@v2
#      with:
#        name: macos-11_0_defaults_ACE_TAO_artifact
#        path: ACE_TAO
#    - name: extract ACE_TAO artifact
#      shell: bash
#      run: |
#        cd ACE_TAO
#        tar xvfJ macos-11_0_defaults_ACE_TAO.tar.xz
#    - name: checkout OpenDDS
#      uses: actions/checkout@v2.3.4
#      with:
#        path: OpenDDS
#        submodules: true
#    - name: download OpenDDS artifact
#      uses: actions/download-artifact@v2
#      with:
#        name: macos-11_0_defaults_security_build_artifact
#        path: OpenDDS
#    - name: extract OpenDDS artifact
#      shell: bash
#      run: |
#        cd OpenDDS
#        tar xvfJ macos-11_0_defaults_security_build.tar.xz
#    - name: check build configuration
#      shell: bash
#      run: |
#        cd OpenDDS
#        . setenv.sh
#        tools/scripts/show_build_config.pl
#    - name: run OpenDDS tests
#      shell: bash
#      run: |
#        cd OpenDDS
#        . setenv.sh
#        mkdir ${{ github.job }}_autobuild_workspace
#        cd ${{ github.job }}_autobuild_workspace
#        echo using commit $TRIGGERING_COMMIT for SHA
#        echo $TRIGGERING_COMMIT >> ./SHA
#        cat > config.xml <<EOF
#        <autobuild>
#        <configuration>
#        <variable name="log_file" value="output.log"/>
#        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#        <variable name="project_root" value="$DDS_ROOT"/>
#        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#        <variable name="junit_xml_output" value="Tests"/>
#        </configuration>
#        <command name="log" options="on"/>
#        <command name="print_os_version"/>
#        <command name="print_env_vars"/>
#        <command name="print_ace_config"/>
#        <command name="print_make_version"/>
#        <command name="check_compiler" options="gcc"/>
#        <command name="print_perl_version"/>
#        <command name="print_autobuild_config"/>
#        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config OSX -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config NO_SHMEM -Config DDS_NO_ORBSVCS -Config GH_ACTIONS -a -l tests/security/security_tests.lst"/>
#        <command name="log" options="off"/>
#        <command name="process_logs" options="prettify"/>
#        </autobuild>
#        EOF
#        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
#    - name: upload autobuild output
#      uses: actions/upload-artifact@v2
#      with:
#        name: ${{ github.job }}_autobuild_output
#        path: OpenDDS/${{ github.job }}_autobuild_workspace
#    - name: check results
#      shell: bash
#      run: |
#        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
#        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

#  macos-11_0_defaults_java_no-bit_build:

#    runs-on: macos-11.0

#    needs: macos-11_0_defaults_ACE_TAO

#    steps:
#    - name: install xerces-c
#      run: |
#        brew install xerces-c
#    - name: checkout MPC
#      uses: actions/checkout@v2.3.4
#      with:
#        repository: DOCGroup/MPC
#        path: MPC
#    - name: checkout ACE_TAO
#      uses: actions/checkout@v2.3.4
#      with:
#        repository: DOCGroup/ACE_TAO
#        ref: 9eae9c11f1bcd07b48c74820d8cb4c67aca9ef23 # Update to 6_5_13 when available
#        path: ACE_TAO
#    - name: download ACE_TAO artifact
#      uses: actions/download-artifact@v2
#      with:
#        name: macos-11_0_defaults_ACE_TAO_artifact
#        path: ACE_TAO
#    - name: extract ACE_TAO artifact
#      shell: bash
#      run: |
#        cd ACE_TAO
#        tar xvfJ macos-11_0_defaults_ACE_TAO.tar.xz
#    - name: checkout OpenDDS
#      uses: actions/checkout@v2.3.4
#      with:
#        path: OpenDDS
#        submodules: true
#    - name: configure OpenDDS
#      run: |
#        cd OpenDDS
#        ./configure --std=c++11 --tests --rapidjson --java --no-built-in-topics --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
#    - name: check build configuration
#      shell: bash
#      run: |
#        cd OpenDDS
#        . setenv.sh
#        tools/scripts/show_build_config.pl
#    - uses: ammaraskar/gcc-problem-matcher@0.1
#    - name: build OpenDDS
#      shell: bash
#      run: |
#        cd OpenDDS
#        . setenv.sh
#        make -j4
#    - name: set up TAO Hello test
#      shell: bash
#      run: |
#        cd OpenDDS
#        . setenv.sh
#        mwc.pl -type gnuace -workers 4 $TAO_ROOT/tests/Hello
#    - name: build TAO Hello test
#      shell: bash
#      run: |
#        cd OpenDDS
#        . setenv.sh
#        make -j4 dir=$TAO_ROOT/tests/Hello
#    - name: set up Modeling tests
#      shell: bash
#      run: |
#        cd OpenDDS
#        . setenv.sh
#        cd tools/modeling/tests
#        ./setup.pl
#        cd -
#        mwc.pl -type gnuace -workers 4 -features built_in_topics=0 tools/modeling/tests/modeling_tests.mwc
#    - name: build Modeling tests
#      shell: bash
#      run: |
#        cd OpenDDS
#        . setenv.sh
#        make -j4 -C tools/modeling/tests
#    - name: create OpenDDS tar.xz artifact
#      shell: bash
#      run: |
#        cd OpenDDS
#        rm -rf ACE_TAO
#        find . -iname "*\.o" | xargs rm
#        tar cvf ../${{ github.job }}.tar setenv.sh
#        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
#        xz -3 ../${{ github.job }}.tar
#    - name: upload OpenDDS artifact
#      uses: actions/upload-artifact@v2
#      with:
#        name: ${{ github.job }}_artifact
#        path: ${{ github.job }}.tar.xz

#  macos-11_0_defaults_java_no-bit_test:
#
#    runs-on: macos-11.0
#
#    needs: macos-11_0_defaults_java_no-bit_build
#
#    steps:
#    - name: install xerces-c
#      run: |
#        brew install xerces-c
#    - name: checkout MPC
#      uses: actions/checkout@v2.3.4
#      with:
#        repository: DOCGroup/MPC
#        path: MPC
#    - name: checkout autobuild
#      uses: actions/checkout@v2.3.4
#      with:
#        repository: DOCGroup/autobuild
#        path: autobuild
#    - name: checkout ACE_TAO
#      uses: actions/checkout@v2.3.4
#      with:
#        repository: DOCGroup/ACE_TAO
#        ref: 9eae9c11f1bcd07b48c74820d8cb4c67aca9ef23 # Update to 6_5_13 when available
#        path: ACE_TAO
#    - name: download ACE_TAO artifact
#      uses: actions/download-artifact@v2
#      with:
#        name: macos-11_0_defaults_ACE_TAO_artifact
#        path: ACE_TAO
#    - name: extract ACE_TAO artifact
#      shell: bash
#      run: |
#        cd ACE_TAO
#        tar xvfJ macos-11_0_defaults_ACE_TAO.tar.xz
#    - name: checkout OpenDDS
#      uses: actions/checkout@v2.3.4
#      with:
#        path: OpenDDS
#        submodules: true
#    - name: download OpenDDS artifact
#      uses: actions/download-artifact@v2
#      with:
#        name: macos-11_0_defaults_java_no-bit_build_artifact
#        path: OpenDDS
#    - name: extract OpenDDS artifact
#      shell: bash
#      run: |
#        cd OpenDDS
#        tar xvfJ macos-11_0_defaults_java_no-bit_build.tar.xz
#    - name: check build configuration
#      shell: bash
#      run: |
#        cd OpenDDS
#        . setenv.sh
#        tools/scripts/show_build_config.pl
#    - name: run OpenDDS tests
#      shell: bash
#      run: |
#        cd OpenDDS
#        . setenv.sh
#        mkdir ${{ github.job }}_autobuild_workspace
#        cd ${{ github.job }}_autobuild_workspace
#        echo using commit $TRIGGERING_COMMIT for SHA
#        echo $TRIGGERING_COMMIT >> ./SHA
#        cat > config.xml <<EOF
#        <autobuild>
#        <configuration>
#        <variable name="log_file" value="output.log"/>
#        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#        <variable name="project_root" value="$DDS_ROOT"/>
#        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
#        <variable name="junit_xml_output" value="Tests"/>
#        </configuration>
#        <command name="log" options="on"/>
#        <command name="print_os_version"/>
#        <command name="print_env_vars"/>
#        <command name="print_ace_config"/>
#        <command name="print_make_version"/>
#        <command name="check_compiler" options="gcc"/>
#        <command name="print_perl_version"/>
#        <command name="print_autobuild_config"/>
#        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config CXX11 -Config RAPIDJSON -Config NO_SHMEM -Config DDS_NO_ORBSVCS -Config NO_BUILT_IN_TOPICS -Config GH_ACTIONS -a -l java/tests/dcps_java_tests.lst -l tools/modeling/tests/modeling_tests.lst"/>
#        <command name="log" options="off"/>
#        <command name="process_logs" options="prettify"/>
#        </autobuild>
#        EOF
#        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
#    - name: upload autobuild output
#      uses: actions/upload-artifact@v2
#      with:
#        name: ${{ github.job }}_autobuild_output
#        path: OpenDDS/${{ github.job }}_autobuild_workspace
#    - name: check results
#      shell: bash
#      run: |
#        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
#        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  # macOS 10.15

  ACE_TAO_m10_o1d0_sec:

    runs-on: macos-10.15

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        brew install xerces-c
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure --optimize --no-debug --std=c++11 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC --xerces3=/usr/local/Cellar/xerces-c/3.2.3 --openssl=/usr/local/opt/openssl/
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  build_m10_o1d0_sec:

    runs-on: macos-10.15

    needs: ACE_TAO_m10_o1d0_sec

    steps:
    - name: install xerces-c
      run: |
        brew install xerces-c
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_m10_o1d0_sec_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_m10_o1d0_sec.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --optimize --no-debug --std=c++11 --tests --rapidjson --security --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC --xerces3=/usr/local/Cellar/xerces-c/3.2.3 --openssl=/usr/local/opt/openssl/
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  test_m10_o1d0_sec:

    runs-on: macos-10.15

    needs: build_m10_o1d0_sec
    timeout-minutes: 150

    steps:
    - name: install xerces-c
      run: |
        brew install xerces-c
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_m10_o1d0_sec_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_m10_o1d0_sec.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_m10_o1d0_sec_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_m10_o1d0_sec.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: run OpenDDS tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config OSX -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config NO_SHMEM -Config DDS_NO_ORBSVCS -Config GH_ACTIONS -a -l tests/security/security_tests.lst"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi

  ACE_TAO_m10_i0_j_FM-1f:

    runs-on: macos-10.15

    needs: wait_cancel_previous

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v2.1.5
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}
    - name: install xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        brew install xerces-c
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        ./configure  --no-inline --std=c++11 --tests --security --ace=$GITHUB_WORKSPACE/OpenDDS/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC --xerces3=/usr/local/Cellar/xerces-c/3.2.3 --openssl=/usr/local/opt/openssl/
    - name: build ACE and TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      run: |
        cd OpenDDS
        . setenv.sh
        cd ACE_TAO/ACE
        make -j4
        cd ../TAO
        make -j4
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.o" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz


  build_m10_i0_j_FM-1f:

    runs-on: macos-10.15

    needs: ACE_TAO_m10_i0_j_FM-1f

    steps:
    - name: install xerces-c
      run: |
        brew install xerces-c
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_m10_i0_j_FM-1f_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_m10_i0_j_FM-1f.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: configure OpenDDS
      run: |
        cd OpenDDS
        ./configure --no-inline --std=c++11 --tests --rapidjson --java --no-built-in-topics --ace=$GITHUB_WORKSPACE/ACE_TAO/ACE --mpc=$GITHUB_WORKSPACE/MPC
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - uses: ammaraskar/gcc-problem-matcher@0.1
    - name: build OpenDDS
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4
    - name: set up TAO Hello test
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mwc.pl -type gnuace -workers 4 $TAO_ROOT/tests/Hello
    - name: build TAO Hello test
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4 dir=$TAO_ROOT/tests/Hello
    - name: set up Modeling tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        cd tools/modeling/tests
        ./setup.pl
        cd -
        mwc.pl -type gnuace -workers 4 -features built_in_topics=0 tools/modeling/tests/modeling_tests.mwc
    - name: build Modeling tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        make -j4 -C tools/modeling/tests
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.o" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.sh
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_artifact
        path: ${{ github.job }}.tar.xz

  test_m10_i0_j_FM-1f:

    runs-on: macos-10.15

    needs: build_m10_i0_j_FM-1f
    timeout-minutes: 150

    steps:
    - name: install xerces-c
      run: |
        brew install xerces-c
    - name: checkout MPC
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout ACE_TAO
      uses: actions/checkout@v2.3.4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v2
      with:
        name: ACE_TAO_m10_i0_j_FM-1f_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_m10_i0_j_FM-1f.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v2.3.4
      with:
        path: OpenDDS
        submodules: true
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v2
      with:
        name: build_m10_i0_j_FM-1f_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_m10_i0_j_FM-1f.tar.xz
    - name: check build configuration
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        tools/scripts/show_build_config.pl
    - name: run OpenDDS tests
      shell: bash
      run: |
        cd OpenDDS
        . setenv.sh
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output.log"/>
        <variable name="log_root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="project_root" value="$DDS_ROOT"/>
        <variable name="root" value="$DDS_ROOT/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_env_vars"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="gcc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$GITHUB_WORKSPACE/OpenDDS -Config RTPS -Config CXX11 -Config RAPIDJSON -Config NO_SHMEM -Config DDS_NO_ORBSVCS -Config NO_BUILT_IN_TOPICS -Config GH_ACTIONS -a -l java/tests/dcps_java_tests.lst -l tools/modeling/tests/modeling_tests.lst"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="prettify"/>
        </autobuild>
        EOF
        $GITHUB_WORKSPACE/autobuild/autobuild.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v2
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS/${{ github.job }}_autobuild_workspace
    - name: check results
      shell: bash
      run: |
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"
        if ! grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/latest.txt"; then echo "::error file=latest.txt,line=0,col=0::Test Failures: see 'Test Results: ${{ github.job }}'"; fi
