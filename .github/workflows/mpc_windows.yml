name: "MPC Windows Builds"

on:
  push:
    paths:
      - '**'
      # Don't run this workflow if the only files that changed are the
      # following. Make sure this is the same as the "pull_request.paths" list.
      - '!AUTHORS'
      - '!PROBLEM-REPORT-FORM'
      - '!LICENSE'
      - '!Dockerfile**'
      - '!.dockerignore'
      - '!.mailmap'
      - '!.github/workflows/lint.yml'
      - '!.github/workflows/sphinx_strict.yml'
      - '!etc/**'
      - '!docs/**'
      - '!hooks/**'
      - '!tools/scripts/gitrelease.pl'
      - '!tools/scripts/lint.pl'
      - '!**.md'
      - '!**.rst'
      - '!**/.gitignore'
      - '!**/.lint_config'
      - '!**/README*'
  pull_request:
    paths:
      - '**'
      # Don't run this workflow if the only files that changed are the
      # following. Make sure this is the same as the "push.paths" list.
      - '!AUTHORS'
      - '!PROBLEM-REPORT-FORM'
      - '!LICENSE'
      - '!Dockerfile**'
      - '!.dockerignore'
      - '!.mailmap'
      - '!.github/workflows/lint.yml'
      - '!.github/workflows/sphinx_strict.yml'
      - '!etc/**'
      - '!docs/**'
      - '!hooks/**'
      - '!tools/scripts/gitrelease.pl'
      - '!tools/scripts/lint.pl'
      - '!**.md'
      - '!**.rst'
      - '!**/.gitignore'
      - '!**/.lint_config'
      - '!**/README*'
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  TRIGGERING_COMMIT: ${{ github.event.pull_request.head.sha || github.sha }}
  VCPKG_INSTALLED_DIR: ${{ github.workspace }}\vcpkg\installed
  CTEST_OUTPUT_ON_FAILURE: ON
  VCPKG_GIT_COMMIT: f7423ee180c4b7f40d43402c2feb3859161ef625
  SCOREBOARD_UPLOAD_BRANCH: refs/heads/master

jobs:

  ACE_TAO_w19_p1_stat_js0:

    runs-on: windows-2019

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v4
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}_${{ env.IMAGE_VERSION }}
    - name: setup for run-vcpkg
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        configure --ipv6 --static --no-rapidjson --ace=${{ github.workspace }}/OpenDDS/ACE_TAO/ACE --tao=${{ github.workspace }}/OpenDDS/ACE_TAO/TAO --mpc=${{ github.workspace }}/MPC --xerces3=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --openssl=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --mpcopts=-hierarchy --compile-warnings=WARNING
    - name: build ACE & TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ACE_TAO\ACE
        msbuild -p:Configuration=Debug,Platform=x64 -m ace.sln
        cd ..\TAO
        msbuild -p:Configuration=Debug,Platform=x64 -m tao.sln
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.obj" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_${{ env.IMAGE_VERSION}}_artifact
        path: ${{ github.job }}.tar.xz

  build_w19_p1_stat_js0:

    runs-on: windows-2019

    needs: ACE_TAO_w19_p1_stat_js0

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_p1_stat_js0_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_p1_stat_js0.tar.xz
        rm -f ACE_TAO_w19_p1_stat_js0.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: configure OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        configure --ipv6 --static --no-rapidjson --gtest=${{ github.workspace }}/OpenDDS/tests/googletest/build/install --ace=${{ github.workspace }}/OpenDDS/ACE_TAO/ACE --tao=${{ github.workspace }}/OpenDDS/ACE_TAO/TAO --mpc=${{ github.workspace }}/MPC --xerces3=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --openssl=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --compile-warnings=WARNING
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: build OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        msbuild -p:Configuration=Debug,Platform=x64 -m DDS_no_tests.sln
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.cmd
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_${{ env.IMAGE_VERSION}}_artifact
        path: ${{ github.job }}.tar.xz

  cmake_w19_p1_stat_js0:

    runs-on: windows-2019

    needs: build_w19_p1_stat_js0

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_p1_stat_js0_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_p1_stat_js0.tar.xz
        rm -f ACE_TAO_w19_p1_stat_js0.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_p1_stat_js0_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_p1_stat_js0.tar.xz
        rm -f build_w19_p1_stat_js0.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: Build CMake Tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        mkdir tests\cmake\build
        cd tests\cmake\build
        cmake ..
        cmake --build .
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_cmake_version"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS --no-dcps --cmake"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  messenger_w19_p1_stat_js0:

    runs-on: windows-2019

    needs: build_w19_p1_stat_js0

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_p1_stat_js0_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_p1_stat_js0.tar.xz
        rm -f ACE_TAO_w19_p1_stat_js0.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_p1_stat_js0_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_p1_stat_js0.tar.xz
        rm -f build_w19_p1_stat_js0.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: configure messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features no_rapidjson=1 -features ipv6=1 -features ssl=1 -features no_cxx11=0
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        msbuild -p:Configuration=Debug,Platform=x64 -m Messenger.sln
    - name: configure C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features no_rapidjson=1 -features ipv6=1 -features ssl=1 -features no_cxx11=0
    - name: make C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        msbuild -p:Configuration=Debug,Platform=x64 -m C++11.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Static_Debug -Config STATIC_MESSENGER -Config IPV6 -Config XERCES3 -Config CXX11 -Config NO_UNIT_TESTS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  compiler_w19_p1_stat_js0:

    runs-on: windows-2019

    needs: build_w19_p1_stat_js0

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_p1_stat_js0_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_p1_stat_js0.tar.xz
        rm -f ACE_TAO_w19_p1_stat_js0.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_p1_stat_js0_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_p1_stat_js0.tar.xz
        rm -f build_w19_p1_stat_js0.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: configure compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        rm -rf key_annotation
        rm -rf keywords
        rm -rf namespace_conflict
        rm -rf vread_vwrite
        rm -rf sequence_conflict
        rm -rf TryConstruct
        rm -rf typecode
        rm -rf typeobject_hash_consistency
        rm -rf underscore_fields
        rm -rf xcdr
        rm -rf XTypesExtensibility
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features no_rapidjson=1 -features ipv6=1 -features no_cxx11=0
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        dir
        msbuild -p:Configuration=Debug,Platform=x64 -m Compiler.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Static_Debug -Config STATIC_COMPILER -Config IPV6 -Config XERCES3 -Config CXX11 -Config NO_UNIT_TESTS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  compiler2_w19_p1_stat_js0:

    runs-on: windows-2019

    needs: build_w19_p1_stat_js0

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_p1_stat_js0_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_p1_stat_js0.tar.xz
        rm -f ACE_TAO_w19_p1_stat_js0.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_p1_stat_js0_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_p1_stat_js0.tar.xz
        rm -f build_w19_p1_stat_js0.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: configure compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        rm -rf anonymous_types
        rm -rf C++11
        rm -rf char_literals
        rm -rf explicit_ints
        rm -rf idl_test1_lib
        rm -rf idl_test1_main
        rm -rf idl_test2_lib
        rm -rf idl_test2_main
        rm -rf idl_test3_lib
        rm -rf idl_test3_main
        rm -rf idl_test_nested_types_lib
        rm -rf isolated_types
        rm -rf is_topic_type
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features no_rapidjson=1 -features ipv6=1 -features no_cxx11=0
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        dir
        msbuild -p:Configuration=Debug,Platform=x64 -m Compiler.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Static_Debug -Config STATIC_COMPILER2 -Config IPV6 -Config XERCES3 -Config CXX11 -Config NO_UNIT_TESTS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  unit_w19_p1_stat_js0:

    runs-on: windows-2019

    needs: build_w19_p1_stat_js0

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_p1_stat_js0_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_p1_stat_js0.tar.xz
        rm -f ACE_TAO_w19_p1_stat_js0.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_p1_stat_js0_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_p1_stat_js0.tar.xz
        rm -f build_w19_p1_stat_js0.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: configure unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\unit-tests
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features no_rapidjson=1 -features ipv6=1 -features ssl=1 -features no_cxx11=0
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\unit-tests
        msbuild -p:Configuration=Debug,Platform=x64 -m unit_tests.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Static_Debug -Config STATIC_UNIT_TESTS -Config IPV6 -Config XERCES3 -Config CXX11"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  ACE_TAO_w19_re_p1_stat_FM-08:

    runs-on: windows-2019

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v4
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}_${{ env.IMAGE_VERSION }}
    - name: setup for run-vcpkg
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        configure --ipv6 --static --rapidjson --no-built-in-topics --no-content-subscription --no-ownership-profile --no-object-model-profile --no-persistence-profile --ace=${{ github.workspace }}/OpenDDS/ACE_TAO/ACE --tao=${{ github.workspace }}/OpenDDS/ACE_TAO/TAO --mpc=${{ github.workspace }}/MPC --xerces3=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --openssl=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --mpcopts=-hierarchy --compile-warnings=WARNING
    - name: build ACE & TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ACE_TAO\ACE
        msbuild -p:Configuration=Release,Platform=x64 -m ace.sln
        cd ..\TAO
        msbuild -p:Configuration=Release,Platform=x64 -m tao.sln
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.obj" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_${{ env.IMAGE_VERSION}}_artifact
        path: ${{ github.job }}.tar.xz

  build_w19_re_p1_stat_FM-08:

    runs-on: windows-2019

    needs: ACE_TAO_w19_re_p1_stat_FM-08

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_p1_stat_FM-08_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
        rm -f ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install --config Release
    - name: configure OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        configure --ipv6 --static --rapidjson --gtest=${{ github.workspace }}/OpenDDS/tests/googletest/build/install --no-built-in-topics --no-content-subscription --no-ownership-profile --no-object-model-profile --no-persistence-profile --ace=${{ github.workspace }}/OpenDDS/ACE_TAO/ACE --tao=${{ github.workspace }}/OpenDDS/ACE_TAO/TAO --mpc=${{ github.workspace }}/MPC --xerces3=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --openssl=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --compile-warnings=WARNING
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: build OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        msbuild -p:Configuration=Release,Platform=x64 -m DDS_no_tests.sln
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.cmd
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_${{ env.IMAGE_VERSION}}_artifact
        path: ${{ github.job }}.tar.xz

  cmake_w19_re_p1_stat_FM-08:

    runs-on: windows-2019

    needs: build_w19_re_p1_stat_FM-08

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_p1_stat_FM-08_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
        rm -f ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_re_p1_stat_FM-08_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_p1_stat_FM-08.tar.xz
        rm -f build_w19_re_p1_stat_FM-08.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: Build CMake Tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        mkdir tests\cmake\build
        cd tests\cmake\build
        cmake ..
        cmake --build . --config Release
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_cmake_version"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS --no-dcps --cmake --cmake-build-cfg Release"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  messenger_w19_re_p1_stat_FM-08:

    runs-on: windows-2019

    needs: build_w19_re_p1_stat_FM-08

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_p1_stat_FM-08_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
        rm -f ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_re_p1_stat_FM-08_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_p1_stat_FM-08.tar.xz
        rm -f build_w19_re_p1_stat_FM-08.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install --config Release
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: configure messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0 -features ownership_profile=0 -features content_subscription=0 -features object_model_profile=0 -features persistence_profile=0
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        msbuild -p:Configuration=Release,Platform=x64 -m Messenger.sln
    - name: configure C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0 -features ownership_profile=0 -features content_subscription=0 -features object_model_profile=0 -features persistence_profile=0
    - name: make C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        msbuild -p:Configuration=Release,Platform=x64 -m C++11.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Static_Release -Config STATIC -Config STATIC_MESSENGER -Config NO_BUILT_IN_TOPICS -Config DDS_NO_OBJECT_MODEL_PROFILE -Config DDS_NO_OWNERSHIP_PROFILE -Config DDS_NO_PERSISTENCE_PROFILE -Config DDS_NO_CONTENT_SUBSCRIPTION -Config IPV6 -Config CXX11 -Config OPENDDS_SECURITY -Config RAPIDJSON -Config NO_UNIT_TESTS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  compiler_w19_re_p1_stat_FM-08:

    runs-on: windows-2019

    needs: build_w19_re_p1_stat_FM-08

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_p1_stat_FM-08_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
        rm -f ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_re_p1_stat_FM-08_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_p1_stat_FM-08.tar.xz
        rm -f build_w19_re_p1_stat_FM-08.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install --config Release
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: configure compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        rm -rf key_annotation
        rm -rf keywords
        rm -rf namespace_conflict
        rm -rf vread_vwrite
        rm -rf sequence_conflict
        rm -rf TryConstruct
        rm -rf typecode
        rm -rf typeobject_hash_consistency
        rm -rf underscore_fields
        rm -rf xcdr
        rm -rf XTypesExtensibility
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features ipv6=1 -features no_cxx11=0 -features no_rapidjson=0 -features openssl11=1 -features built_in_topics=0 -features ownership_profile=0 -features content_subscription=0 -features object_model_profile=0 -features persistence_profile=0
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        msbuild -p:Configuration=Release,Platform=x64 -m Compiler.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Static_Release -Config STATIC_COMPILER -Config STATIC -Config NO_BUILT_IN_TOPICS -Config DDS_NO_OBJECT_MODEL_PROFILE -Config DDS_NO_OWNERSHIP_PROFILE -Config DDS_NO_PERSISTENCE_PROFILE -Config DDS_NO_CONTENT_SUBSCRIPTION -Config IPV6 -Config OPENDDS_SECURITY -Config RAPIDJSON -Config CXX11 -Config NO_UNIT_TESTS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  compiler2_w19_re_p1_stat_FM-08:

    runs-on: windows-2019

    needs: build_w19_re_p1_stat_FM-08

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_p1_stat_FM-08_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
        rm -f ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_re_p1_stat_FM-08_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_p1_stat_FM-08.tar.xz
        rm -f build_w19_re_p1_stat_FM-08.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install --config Release
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: configure compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        rm -rf anonymous_types
        rm -rf C++11
        rm -rf char_literals
        rm -rf explicit_ints
        rm -rf idl_test1_lib
        rm -rf idl_test1_main
        rm -rf idl_test2_lib
        rm -rf idl_test2_main
        rm -rf idl_test3_lib
        rm -rf idl_test3_main
        rm -rf idl_test_nested_types_lib
        rm -rf isolated_types
        rm -rf is_topic_type
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features ipv6=1 -features no_cxx11=0 -features no_rapidjson=0 -features openssl11=1 -features built_in_topics=0 -features ownership_profile=0 -features content_subscription=0 -features object_model_profile=0 -features persistence_profile=0
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        msbuild -p:Configuration=Release,Platform=x64 -m Compiler.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Static_Release -Config STATIC_COMPILER2 -Config STATIC -Config NO_BUILT_IN_TOPICS -Config DDS_NO_OBJECT_MODEL_PROFILE -Config DDS_NO_OWNERSHIP_PROFILE -Config DDS_NO_PERSISTENCE_PROFILE -Config DDS_NO_CONTENT_SUBSCRIPTION -Config IPV6 -Config OPENDDS_SECURITY -Config RAPIDJSON -Config CXX11 -Config NO_UNIT_TESTS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  unit_w19_re_p1_stat_FM-08:

    runs-on: windows-2019

    needs: build_w19_re_p1_stat_FM-08

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_p1_stat_FM-08_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
        rm -f ACE_TAO_w19_re_p1_stat_FM-08.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_re_p1_stat_FM-08_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_p1_stat_FM-08.tar.xz
        rm -f build_w19_re_p1_stat_FM-08.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install ..
        cmake --build . --target install --config Release
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: configure unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\unit-tests
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -static -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0 -features ownership_profile=0 -features content_subscription=0 -features object_model_profile=0 -features persistence_profile=0
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\unit-tests
        msbuild -p:Configuration=Release,Platform=x64 -m unit_tests.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Static_Release -Config STATIC_UNIT_TESTS -Config STATIC -Config NO_BUILT_IN_TOPICS -Config DDS_NO_OBJECT_MODEL_PROFILE -Config DDS_NO_OWNERSHIP_PROFILE -Config DDS_NO_PERSISTENCE_PROFILE -Config DDS_NO_CONTENT_SUBSCRIPTION -Config IPV6 -Config OPENDDS_SECURITY -Config RAPIDJSON -Config CXX11"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  ACE_TAO_w19_re_o1p1_sec:

    runs-on: windows-2019

    needs: openssl3_w19

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: download openssl artifact
      uses: actions/download-artifact@v4
      with:
        name: openssl3_w19_${{ env.IMAGE_VERSION}}_artifact
    - name: extract openssl artifact
      shell: bash
      run: |
        tar xvJf openssl3_w19.tar.xz
        rm -f openssl3_w19.tar.xz
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v4
      with:
        path: ${{ github.job }}.tar.xz
        key: c02_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}_${{ env.IMAGE_VERSION }}
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "xerces-c" ] }' > vcpkg.json
    - name: install xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        set SSL_DIR=%CD%/openssl3
        cd OpenDDS
        call configure -v --optimize --ipv6 --security --ace=${{ github.workspace }}/OpenDDS/ACE_TAO/ACE --tao=${{ github.workspace }}/OpenDDS/ACE_TAO/TAO --mpc=${{ github.workspace }}/MPC --xerces3=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --openssl=%SSL_DIR% --mpcopts=-hierarchy --compile-warnings=WARNING
        echo "SSL_DIR=%SSL_DIR%" >> setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build ACE & TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ACE_TAO\ACE
        msbuild -p:Configuration=Release,Platform=x64 -m ace.sln
        cd ..\TAO
        msbuild -p:Configuration=Release,Platform=x64 -m tao.sln
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.obj" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_${{ env.IMAGE_VERSION}}_artifact
        path: ${{ github.job }}.tar.xz

  build_w19_re_o1p1_sec:

    runs-on: windows-2019

    needs: ACE_TAO_w19_re_o1p1_sec

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: download openssl artifact
      uses: actions/download-artifact@v4
      with:
        name: openssl3_w19_${{ env.IMAGE_VERSION}}_artifact
    - name: extract openssl artifact
      shell: bash
      run: |
        tar xvJf openssl3_w19.tar.xz
        rm -f openssl3_w19.tar.xz
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "xerces-c" ] }' > vcpkg.json
    - name: install xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_o1p1_sec_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_o1p1_sec.tar.xz
        rm -f ACE_TAO_w19_re_o1p1_sec.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: configure OpenDDS
      shell: cmd
      run: |
        set SSL_DIR=%CD%/openssl3
        cd OpenDDS
        configure --optimize --ipv6 --rapidjson --security --gtest=${{ github.workspace }}/OpenDDS/tests/googletest/build/install --ace=${{ github.workspace }}/OpenDDS/ACE_TAO/ACE --tao=${{ github.workspace }}/OpenDDS/ACE_TAO/TAO --mpc=${{ github.workspace }}/MPC --xerces3=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --openssl=%SSL_DIR% --compile-warnings=WARNING
        echo "SSL_DIR=%SSL_DIR%" >> setenv.cmd
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: build OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        msbuild -p:Configuration=Release,Platform=x64 -m DDS_no_tests.sln
    - name: Build CMake Tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        mkdir tests\cmake\build
        cd tests\cmake\build
        cmake ..
        cmake --build . --config Release
    - name: gitclean
      shell: bash
      run: |
        touch output.txt
        cd OpenDDS
        git clean -nd -e ext | tee ../output.txt
        if [ -s ../output.txt ]; then exit 1; fi
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.cmd
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_${{ env.IMAGE_VERSION}}_artifact
        path: ${{ github.job }}.tar.xz

  cmake_w19_re_o1p1_sec:

    runs-on: windows-2019

    needs: build_w19_re_o1p1_sec

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: download openssl artifact
      uses: actions/download-artifact@v4
      with:
        name: openssl3_w19_${{ env.IMAGE_VERSION}}_artifact
    - name: extract openssl artifact
      shell: bash
      run: |
        tar xvJf openssl3_w19.tar.xz
        rm -f openssl3_w19.tar.xz
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "xerces-c" ] }' > vcpkg.json
    - name: install xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_o1p1_sec_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_o1p1_sec.tar.xz
        rm -f ACE_TAO_w19_re_o1p1_sec.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_re_o1p1_sec_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_o1p1_sec.tar.xz
        rm -f build_w19_re_o1p1_sec.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_cmake_version"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS --no-dcps --cmake --cmake-build-cfg Release"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  messenger_w19_re_o1p1_sec:

    runs-on: windows-2019

    needs: build_w19_re_o1p1_sec

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: download openssl artifact
      uses: actions/download-artifact@v4
      with:
        name: openssl3_w19_${{ env.IMAGE_VERSION}}_artifact
    - name: extract openssl artifact
      shell: bash
      run: |
        tar xvJf openssl3_w19.tar.xz
        rm -f openssl3_w19.tar.xz
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "xerces-c" ] }' > vcpkg.json
    - name: install xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_o1p1_sec_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_o1p1_sec.tar.xz
        rm -f ACE_TAO_w19_re_o1p1_sec.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_re_o1p1_sec_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_o1p1_sec.tar.xz
        rm -f build_w19_re_o1p1_sec.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: configure messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features no_opendds_security=0
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        msbuild -p:Configuration=Release,Platform=x64 -m Messenger.sln
    - name: configure C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features no_opendds_security=0
    - name: make C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        msbuild -p:Configuration=Release,Platform=x64 -m C++11.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Release -Config STATIC_MESSENGER -Config IPV6 -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config NO_UNIT_TESTS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  compiler_w19_re_o1p1_sec:

    runs-on: windows-2019

    needs: build_w19_re_o1p1_sec

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_o1p1_sec_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_o1p1_sec.tar.xz
        rm -f ACE_TAO_w19_re_o1p1_sec.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_re_o1p1_sec_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_o1p1_sec.tar.xz
        rm -f build_w19_re_o1p1_sec.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: configure compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features no_opendds_security=0
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        msbuild -p:Configuration=Release,Platform=x64 -m Compiler.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Release -Config STATIC_COMPILER -Config IPV6 -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON -Config NO_UNIT_TESTS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  unit_w19_re_o1p1_sec:

    runs-on: windows-2019

    needs: build_w19_re_o1p1_sec

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: download openssl artifact
      uses: actions/download-artifact@v4
      with:
        name: openssl3_w19_${{ env.IMAGE_VERSION}}_artifact
    - name: extract openssl artifact
      shell: bash
      run: |
        tar xvJf openssl3_w19.tar.xz
        rm -f openssl3_w19.tar.xz
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "xerces-c" ] }' > vcpkg.json
    - name: install xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_o1p1_sec_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_o1p1_sec.tar.xz
        rm -f ACE_TAO_w19_re_o1p1_sec.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_re_o1p1_sec_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_o1p1_sec.tar.xz
        rm -f build_w19_re_o1p1_sec.tar.xz
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: configure unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\unit-tests
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features ipv6=1 -features no_cxx11=0 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features no_opendds_security=0 -value_project macros+=GTEST_LINKED_AS_SHARED_LIBRARY
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\unit-tests
        msbuild -p:Configuration=Release,Platform=x64 -m unit_tests.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Release -Config STATIC_UNIT_TESTS -Config IPV6 -Config XERCES3 -Config OPENDDS_SECURITY -Config CXX11 -Config RAPIDJSON"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  wireshark_w19-release:

    runs-on: windows-2019

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
    - name: checkout Wireshark
      shell: cmd
      run: |
        git clone -q -b release-3.6 --depth=1 https://gitlab.com/wireshark/wireshark.git
        cd wireshark
        for /f %%x in ('git rev-parse HEAD') do @echo WIRESHARK_COMMIT=%%x>> %GITHUB_ENV%
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v4
      with:
        path: ${{ github.job }}.tar.xz
        key: c02_${{ github.job }}_${{ env.WIRESHARK_COMMIT }}_${{ env.IMAGE_VERSION }}
    - name: checkout WinFlexBison
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: lexxmark/winflexbison
        path: winflexbison
        ref: v2.5.24
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1
    - name: copy CMakePresets for WinFlexBison
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: copy OpenDDS\.github\workflows\WinFlexBison_CMakePresets.json winflexbison\CMakePresets.json
    - name: build WinFlexBison
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-cmake@v10
      with:
        cmakeListsTxtPath: winflexbison/CMakeLists.txt
        configurePreset: config1
        buildPreset: build1
    - name: set Wireshark environment and copy CMakePresets
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        echo WIRESHARK_LIB_DIR=%CD%\wireshark-win64-libs-3.6>> %GITHUB_ENV%
        echo QT5_BASE_DIR=${{ steps.runvcpkg.outputs.RUNVCPKG_VCPKG_ROOT_OUT }}\installed\x64-windows>> %GITHUB_ENV%
        echo WIRESHARK_BUILD_DIR=${{ github.workspace }}\wsbuild>> %GITHUB_ENV%
        echo WINFLEXBISON_ROOT=${{ github.workspace }}\winflexbison>> %GITHUB_ENV%
        type %GITHUB_ENV%
        copy OpenDDS\.github\workflows\Wireshark_CMakePresets.json wireshark\CMakePresets.json
    - name: build Wireshark
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-cmake@v10
      with:
        cmakeListsTxtPath: wireshark/CMakeLists.txt
        configurePreset: config1
        buildPreset: build1
    - name: create Wireshark artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        find -iname "*\.obj" -delete
        tar cvhf ${{ github.job }}.tar wireshark wsbuild wireshark-win64-libs-3.6
        xz -3 ${{ github.job }}.tar
    - name: upload Wireshark artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_${{ env.IMAGE_VERSION}}_artifact
        path: ${{ github.job }}.tar.xz

  ACE_TAO_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v4
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}_${{ env.IMAGE_VERSION }}
    - name: setup for run-vcpkg
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        configure --optimize --java --no-built-in-topics --rapidjson --ace=${{ github.workspace }}/OpenDDS/ACE_TAO/ACE --tao=${{ github.workspace }}/OpenDDS/ACE_TAO/TAO --mpc=${{ github.workspace }}/MPC --xerces3=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --openssl=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --mpcopts=-hierarchy --compile-warnings=WARNING
    - name: build ACE & TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ACE_TAO\ACE
        msbuild -p:Configuration=Release,Platform=x64 -m ace.sln
        cd ..\TAO
        msbuild -p:Configuration=Release,Platform=x64 -m tao.sln
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.obj" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_${{ env.IMAGE_VERSION}}_artifact
        path: ${{ github.job }}.tar.xz

  build_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    needs: [ACE_TAO_w19_re_j_ws_FM-1f, wireshark_w19-release]

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: download Wireshark artifact
      uses: actions/download-artifact@v4
      with:
        name: wireshark_w19-release_${{ env.IMAGE_VERSION}}_artifact
    - name: extract Wireshark artifact
      shell: bash
      run: |
        tar xvJf wireshark_w19-release.tar.xz
        rm -f wireshark_w19-release.tar.xz
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_j_ws_FM-1f_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
        rm -f ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: configure OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        configure --optimize --java --no-built-in-topics --rapidjson --gtest=${{ github.workspace }}/OpenDDS/tests/googletest/build/install --ace=${{ github.workspace }}/OpenDDS/ACE_TAO/ACE --tao=${{ github.workspace }}/OpenDDS/ACE_TAO/TAO --mpc=${{ github.workspace }}/MPC --xerces3=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --wireshark-cmake=${{ github.workspace }}\wireshark --wireshark-build=${{ github.workspace }}\wsbuild --wireshark-lib=run --glib=${{ github.workspace }}\wireshark-win64-libs-3.6\vcpkg-export-20210609-1-win64ws\installed\x64-windows --openssl=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --mpcopts=-hierarchy --compile-warnings=WARNING
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: build OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        msbuild -p:Configuration=Release,Platform=x64 -m DDS_no_tests.sln
    - name: Build CMake Tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        mkdir tests\cmake\build
        cd tests\cmake\build
        cmake ..
        cmake --build . --config Release
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.cmd
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_${{ env.IMAGE_VERSION}}_artifact
        path: ${{ github.job }}.tar.xz

  cmake_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    needs: build_w19_re_j_ws_FM-1f

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_j_ws_FM-1f_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
        rm -f ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_re_j_ws_FM-1f_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_j_ws_FM-1f.tar.xz
        rm -f build_w19_re_j_ws_FM-1f.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_cmake_version"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS --no-dcps --cmake --cmake-build-cfg Release"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  messenger_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    needs: build_w19_re_j_ws_FM-1f

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "xerces-c" ] }' > vcpkg.json
    - name: install xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_j_ws_FM-1f_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
        rm -f ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_re_j_ws_FM-1f_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_j_ws_FM-1f.tar.xz
        rm -f build_w19_re_j_ws_FM-1f.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: configure messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features no_cxx11=0 -features java=1 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        msbuild -p:Configuration=Release,Platform=x64 -m Messenger.sln
    - name: configure C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features no_cxx11=0 -features java=1 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0
    - name: make C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        msbuild -p:Configuration=Release,Platform=x64 -m C++11.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Release -Config STATIC_MESSENGER -Config XERCES3 -Config CXX11 -Config RAPIDJSON -Config NO_BUILT_IN_TOPICS -Config NO_UNIT_TESTS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  compiler_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    needs: build_w19_re_j_ws_FM-1f

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "xerces-c" ] }' > vcpkg.json
    - name: install xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_j_ws_FM-1f_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
        rm -f ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_re_j_ws_FM-1f_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_j_ws_FM-1f.tar.xz
        rm -f build_w19_re_j_ws_FM-1f.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: configure compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features no_cxx11=0 -features java=1 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        msbuild -p:Configuration=Release,Platform=x64 -m Compiler.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Release -Config STATIC_COMPILER -Config XERCES3 -Config CXX11 -Config RAPIDJSON -Config NO_BUILT_IN_TOPICS -Config NO_UNIT_TESTS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  unit_w19_re_j_ws_FM-1f:

    runs-on: windows-2019

    needs: build_w19_re_j_ws_FM-1f

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "xerces-c" ] }' > vcpkg.json
    - name: install xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w19_re_j_ws_FM-1f_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
        rm -f ACE_TAO_w19_re_j_ws_FM-1f.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w19_re_j_ws_FM-1f_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w19_re_j_ws_FM-1f.tar.xz
        rm -f build_w19_re_j_ws_FM-1f.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install --config Release
    - name: check GTest Path
      shell: cmd
      run: |
        cd D:\a\OpenDDS\OpenDDS\OpenDDS\tests\googletest\build\install\
        dir
        cd lib
        dir
    - name: configure unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\unit-tests
        perl %ACE_ROOT%\bin\mwc.pl -type vs2019 -features no_cxx11=0 -features java=1 -features xerces3=1 -features no_rapidjson=0 -features ssl=1 -features openssl11=1 -features built_in_topics=0 -value_project macros+=GTEST_LINKED_AS_SHARED_LIBRARY
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\unit-tests
        msbuild -p:Configuration=Release,Platform=x64 -m unit_tests.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Release -Config STATIC_UNIT_TESTS -Config XERCES3 -Config CXX11 -Config RAPIDJSON -Config NO_BUILT_IN_TOPICS"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  ACE_TAO_w22_x86_i0:

    runs-on: windows-2022

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v4
      with:
        path: ${{ github.job }}.tar.xz
        key: c02_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}_${{ env.IMAGE_VERSION }}
    - name: setup for run-vcpkg
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
        echo "VCPKG_DEFAULT_TRIPLET=x86-windows" >> $GITHUB_ENV
    - name: install openssl & xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x86
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        call configure -v --no-inline --tests --security --ace=${{ github.workspace }}/OpenDDS/ACE_TAO/ACE --tao=${{ github.workspace }}/OpenDDS/ACE_TAO/TAO --mpc=${{ github.workspace }}/MPC --xerces3=${{ env.VCPKG_INSTALLED_DIR }}/x86-windows --openssl=${{ env.VCPKG_INSTALLED_DIR }}/x86-windows --mpcopts=-hierarchy --compile-warnings=WARNING
        perl tools\scripts\show_build_config.pl
    - name: build ACE & TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ACE_TAO\ACE
        msbuild -p:Configuration=Debug,Platform=Win32 -m ace.sln
        cd ..\TAO
        msbuild -p:Configuration=Debug,Platform=Win32 -m tao.sln
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.obj" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_${{ env.IMAGE_VERSION}}_artifact
        path: ${{ github.job }}.tar.xz

  build_w22_x86_i0_sec:

    runs-on: windows-2022

    needs: ACE_TAO_w22_x86_i0

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
        echo "VCPKG_DEFAULT_TRIPLET=x86-windows" >> $GITHUB_ENV
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: remove unused files
      shell: bash
      run: |
        cd vcpkg
        rm -rf buildtrees downloads
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w22_x86_i0_${{ env.IMAGE_VERSION}}_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_w22_x86_i0.tar.xz
        rm -f ACE_TAO_w22_x86_i0.tar.xz
    - name: move OpenDDS to C drive
      shell: bash
      run: |
        mv OpenDDS /c/
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x86
    - name: configure OpenDDS
      shell: cmd
      run: |
        cd /d C:\OpenDDS
        configure --tests --rapidjson --security --ace=${{ github.workspace }}\ACE_TAO\ACE --tao=${{ github.workspace }}\ACE_TAO\TAO --mpc=${{ github.workspace }}\MPC --xerces3="${{ env.VCPKG_INSTALLED_DIR }}\x86-windows" --openssl="${{ env.VCPKG_INSTALLED_DIR }}\x86-windows" --compile-warnings=WARNING
    - name: check build configuration
      shell: cmd
      run: |
        cd /d C:\OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: build OpenDDS
      shell: cmd
      run: |
        cd /d C:\OpenDDS
        call setenv.cmd
        msbuild -p:Configuration=Debug,Platform=Win32 -m DDS.sln
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd /c/OpenDDS
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.cmd
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
        mv ../${{ github.job }}.tar.xz $GITHUB_WORKSPACE
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_${{ env.IMAGE_VERSION}}_artifact
        path: ${{ github.job }}.tar.xz

  cmake_w22_x86_i0_sec:

    runs-on: windows-2022

    needs: build_w22_x86_i0_sec

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
        echo "VCPKG_DEFAULT_TRIPLET=x86-windows" >> $GITHUB_ENV
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w22_x86_i0_${{ env.IMAGE_VERSION}}_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_w22_x86_i0.tar.xz
        rm -f ACE_TAO_w22_x86_i0.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w22_x86_i0_sec_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w22_x86_i0_sec.tar.xz
        rm -f build_w22_x86_i0_sec.tar.xz
    - name: move OpenDDS to C drive
      shell: bash
      run: |
        mv OpenDDS /c/
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: Build CMake Tests
      shell: cmd
      run: |
        cd /d C:\OpenDDS
        call setenv.cmd
        mkdir tests\cmake\build
        cd tests\cmake\build
        cmake -A Win32 ..
        cmake --build .
    - name: check build configuration
      shell: cmd
      run: |
        cd /d C:\OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: create autobuild config
      shell: bash
      run: |
        cd /c/OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="C:/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="C:/OpenDDS"/>
        <variable name="root" value="C:/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_cmake_version"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=C:/OpenDDS --no-dcps --cmake"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
    - name: run OpenDDS CMake tests
      shell: cmd
      run: |
        cd /d C:\OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "C:\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: C:\OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd /c/OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: C:\OpenDDS\${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        /c/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "/c/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "/c/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "/c/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  test_w22_x86_i0_sec:

    runs-on: windows-2022

    needs: build_w22_x86_i0_sec

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
        echo "VCPKG_DEFAULT_TRIPLET=x86-windows" >> $GITHUB_ENV
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w22_x86_i0_${{ env.IMAGE_VERSION}}_artifact
        path: ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd ACE_TAO
        tar xvfJ ACE_TAO_w22_x86_i0.tar.xz
        rm -f ACE_TAO_w22_x86_i0.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w22_x86_i0_sec_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w22_x86_i0_sec.tar.xz
        rm -f build_w22_x86_i0_sec.tar.xz
    - name: move OpenDDS to C drive
      shell: bash
      run: |
        mv OpenDDS /c/
    - name: setup gtest
      shell: cmd
      run: |
        cd /d C:\OpenDDS\tests\googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -A Win32 ..
        cmake --build . --target install
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: check build configuration
      shell: cmd
      run: |
        cd /d C:\OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: create autobuild config
      shell: bash
      run: |
        cd /c/OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="C:/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="C:/OpenDDS"/>
        <variable name="root" value="C:/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_cmake_version"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=C:/OpenDDS -Config DCPS_MIN"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd /d C:\OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "C:\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: C:\OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd /c/OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: C:\OpenDDS\${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        /c/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "/c/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "/c/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "/c/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  build_w22_x86_i0_j_FM-1f:

    runs-on: windows-2022

    needs: ACE_TAO_w22_x86_i0

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "xerces-c" ] }' > vcpkg.json
        echo "VCPKG_DEFAULT_TRIPLET=x86-windows" >> $GITHUB_ENV
    - name: install xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w22_x86_i0_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w22_x86_i0.tar.xz
        rm -f ACE_TAO_w22_x86_i0.tar.xz
    - name: Move OpenDDS to C Drive
      shell: bash
      run: |
        mv OpenDDS /c/
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x86
    - name: configure OpenDDS
      shell: cmd
      run: |
        cd /d C:\OpenDDS
        configure --tests --java --no-built-in-topics --rapidjson --mpc=${{ github.workspace }}\MPC --xerces3="${{ env.VCPKG_INSTALLED_DIR }}\x86-windows" --features no_opendds_testing_features=0 --compile-warnings=WARNING
    - name: check build configuration
      shell: cmd
      run: |
        cd /d C:\OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: build OpenDDS
      shell: cmd
      run: |
        cd /d C:\OpenDDS
        call setenv.cmd
        msbuild -p:Configuration=Debug,Platform=Win32 -m DDS.sln
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd /c/OpenDDS
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.cmd
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
        mv ../${{ github.job }}.tar.xz $GITHUB_WORKSPACE
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_${{ env.IMAGE_VERSION}}_artifact
        path: ${{ github.job }}.tar.xz

  cmake_w22_x86_i0_j_FM-1f:

    runs-on: windows-2022

    needs: build_w22_x86_i0_j_FM-1f

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
        echo "VCPKG_DEFAULT_TRIPLET=x86-windows" >> $GITHUB_ENV
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w22_x86_i0_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w22_x86_i0.tar.xz
        rm -f ACE_TAO_w22_x86_i0.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w22_x86_i0_j_FM-1f_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w22_x86_i0_j_FM-1f.tar.xz
        rm -f build_w22_x86_i0_j_FM-1f.tar.xz
    - name: Move OpenDDS to C Drive
      shell: bash
      run: |
        mv OpenDDS /c/
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: check build configuration
      shell: cmd
      run: |
        cd /d C:\OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: Build CMake Tests
      shell: cmd
      run: |
        cd /d C:\OpenDDS
        call setenv.cmd
        mkdir C:\tests\cmake\build
        cd /d C:\tests\cmake\build
        cmake -A Win32 %DDS_ROOT%\tests\cmake
        cmake --build .
    - name: create autobuild config
      shell: bash
      run: |
        cd /c/OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="c:/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="c:/OpenDDS"/>
        <variable name="root" value="c:/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_cmake_version"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=c:/OpenDDS --no-dcps --cmake --cmake-build-dir=c:/tests/cmake/build -Config OPENDDS_TESTING_FEATURES"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS tests
      shell: cmd
      run: |
        cd /d C:\OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "C:\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: c:/OpenDDS/${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd /c/OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: c:/OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        /c/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "c:/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "c:/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "c:/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  ACE_TAO_w22_p1:

    runs-on: windows-2022

    steps:
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: get ACE_TAO commit
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        export ACE_COMMIT=$(git rev-parse HEAD)
        echo "ACE_COMMIT=$ACE_COMMIT" >> $GITHUB_ENV
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v4
      with:
        path: ${{ github.job }}.tar.xz
        key: c02_${{ github.job }}_ace6tao2_${{ env.ACE_COMMIT }}_${{ env.IMAGE_VERSION }}
    - name: setup for run-vcpkg
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1
    - name: configure OpenDDS
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        configure --std=c++20 --tests --ipv6 --rapidjson --ace=${{ github.workspace }}/OpenDDS/ACE_TAO/ACE --tao=${{ github.workspace }}/OpenDDS/ACE_TAO/TAO --mpc=${{ github.workspace }}/MPC --xerces3=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --openssl=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --mpcopts=-hierarchy --compile-warnings=WARNING
    - name: build ACE & TAO
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ACE_TAO\ACE
        msbuild -p:Configuration=Debug,Platform=x64 -m ace.sln
        cd ..\TAO
        msbuild -p:Configuration=Debug,Platform=x64 -m tao.sln
    - name: create ACE_TAO tar.xz artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        perl -ni.bak -e "print unless /opendds/" ACE/bin/MakeProjectCreator/config/default.features # remove opendds features from here, let individual build configure scripts handle those
        find . -iname "*\.obj" | xargs rm
        tar cvf ../../${{ github.job }}.tar ACE/ace/config.h
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../../${{ github.job }}.tar
        xz -3 ../../${{ github.job }}.tar
    - name: upload ACE_TAO artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_${{ env.IMAGE_VERSION}}_artifact
        path: ${{ github.job }}.tar.xz

  build_w22_p1:

    runs-on: windows-2022

    needs: ACE_TAO_w22_p1

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w22_p1_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w22_p1.tar.xz
        rm -f ACE_TAO_w22_p1.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install
    - name: configure OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        configure --std=c++20 --ipv6 --rapidjson --gtest=${{ github.workspace }}/OpenDDS/tests/googletest/build/install --ace=${{ github.workspace }}/OpenDDS/ACE_TAO/ACE --tao=${{ github.workspace }}/OpenDDS/ACE_TAO/TAO --mpc=${{ github.workspace }}/MPC --xerces3=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --openssl=${{ env.VCPKG_INSTALLED_DIR }}/x64-windows --compile-warnings=WARNING
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: build OpenDDS
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        msbuild -p:Configuration=Debug,Platform=x64 -m DDS_no_tests.sln
    - name: create OpenDDS tar.xz artifact
      shell: bash
      run: |
        cd OpenDDS
        rm -rf ACE_TAO
        find . -iname "*\.obj" -o -iname "*\.pdb" -o -iname "*\.idb" -o -type f -iname "*\.tlog" | xargs rm
        tar cvf ../${{ github.job }}.tar setenv.cmd
        git clean -xdfn | cut -d ' ' -f 3- | xargs tar uvf ../${{ github.job }}.tar
        xz -3 ../${{ github.job }}.tar
    - name: upload OpenDDS artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_${{ env.IMAGE_VERSION}}_artifact
        path: ${{ github.job }}.tar.xz

  cmake_w22_p1:

    runs-on: windows-2022

    needs: build_w22_p1

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w22_p1_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w22_p1.tar.xz
        rm -f ACE_TAO_w22_p1.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w22_p1_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w22_p1.tar.xz
        rm -f build_w22_p1.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: Build CMake Tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        mkdir tests\cmake\build
        cd tests\cmake\build
        cmake .. -DCMAKE_CXX_STANDARD=20
        cmake --build .
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_cmake_version"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS --no-dcps --cmake"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS CMake tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  messenger_w22_p1:

    runs-on: windows-2022

    needs: build_w22_p1

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w22_p1_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w22_p1.tar.xz
        rm -f ACE_TAO_w22_p1.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w22_p1_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w22_p1.tar.xz
        rm -f build_w22_p1.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: configure messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        perl %DDS_ROOT%\bin\opendds_mwc.pl
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Messenger
        msbuild -p:Configuration=Debug,Platform=x64 -m Messenger.sln
    - name: configure C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        perl %DDS_ROOT%\bin\opendds_mwc.pl
    - name: make C++11 messenger test
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\C++11
        msbuild -p:Configuration=Debug,Platform=x64 -m C++11.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Debug -Config STATIC_MESSENGER -Config IPV6 -Config XERCES3 -Config CXX11 -Config NO_UNIT_TESTS -Config RAPIDJSON"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS Messenger tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  compiler_w22_p1:

    runs-on: windows-2022

    needs: build_w22_p1

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w22_p1_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w22_p1.tar.xz
        rm -f ACE_TAO_w22_p1.tar.xz
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w22_p1_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w22_p1.tar.xz
        rm -f build_w22_p1.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install
    - name: configure compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        perl %DDS_ROOT%\bin\opendds_mwc.pl -value_project macros+=GTEST_LINKED_AS_SHARED_LIBRARY
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\DCPS\Compiler
        msbuild -p:Configuration=Debug,Platform=x64 -m Compiler.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Debug -Config STATIC_COMPILER -Config STATIC_COMPILER2 -Config IPV6 -Config XERCES3 -Config CXX11 -Config NO_UNIT_TESTS -Config RAPIDJSON"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS compiler tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  unit_w22_p1:

    runs-on: windows-2022

    needs: build_w22_p1

    permissions:
      contents: read
      id-token: write

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: setup for run-vcpkg
      shell: bash
      run: |
        echo '{ "name": "opendds", "version-string": "github-actions", "dependencies": [ "openssl", "xerces-c" ] }' > vcpkg.json
    - name: install openssl & xerces-c
      uses: lukka/run-vcpkg@v11
      with:
        vcpkgGitCommitId: '${{ env.VCPKG_GIT_COMMIT }}'
        runVcpkgInstall: true
    - name: checkout MPC
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/MPC
        path: MPC
    - name: checkout autobuild
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/autobuild
        path: autobuild
    - name: checkout OpenDDS
      uses: actions/checkout@v4
      with:
        path: OpenDDS
        submodules: true
    - name: checkout ACE_TAO
      uses: actions/checkout@v4
      with:
        repository: DOCGroup/ACE_TAO
        ref: ace6tao2
        path: OpenDDS/ACE_TAO
    - name: download ACE_TAO artifact
      uses: actions/download-artifact@v4
      with:
        name: ACE_TAO_w22_p1_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS/ACE_TAO
    - name: extract ACE_TAO artifact
      shell: bash
      run: |
        cd OpenDDS/ACE_TAO
        tar xvfJ ACE_TAO_w22_p1.tar.xz
        rm -f ACE_TAO_w22_p1.tar.xz
    - name: set up msvc env
      uses: ilammy/msvc-dev-cmd@v1
    - name: download OpenDDS artifact
      uses: actions/download-artifact@v4
      with:
        name: build_w22_p1_${{ env.IMAGE_VERSION}}_artifact
        path: OpenDDS
    - name: extract OpenDDS artifact
      shell: bash
      run: |
        cd OpenDDS
        tar xvfJ build_w22_p1.tar.xz
        rm -f build_w22_p1.tar.xz
    - name: check build configuration
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        perl tools\scripts\show_build_config.pl
    - name: setup gtest
      shell: cmd
      run: |
        cd OpenDDS/tests/googletest
        git submodule init
        git submodule update
        mkdir build
        cd build
        mkdir install
        cmake -DCMAKE_INSTALL_PREFIX=./install -DBUILD_SHARED_LIBS=ON ..
        cmake --build . --target install
    - name: configure unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\unit-tests
        perl %DDS_ROOT%\bin\opendds_mwc.pl -value_project macros+=GTEST_LINKED_AS_SHARED_LIBRARY
    - uses: ammaraskar/msvc-problem-matcher@0.3.0
    - name: make unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd tests\unit-tests
        msbuild -p:Configuration=Debug,Platform=x64 -m unit_tests.sln
    - name: create autobuild config
      shell: bash
      run: |
        cd OpenDDS
        mkdir ${{ github.job }}_autobuild_workspace
        cd ${{ github.job }}_autobuild_workspace
        export FS_GHW=$(echo $GITHUB_WORKSPACE | sed 's/\\/\//g')
        echo using commit $TRIGGERING_COMMIT for SHA
        echo $TRIGGERING_COMMIT >> ./SHA
        cat > config.xml <<EOF
        <autobuild>
        <configuration>
        <variable name="log_file" value="output"/>
        <variable name="log_root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace/logs"/>
        <variable name="project_root" value="$FS_GHW/OpenDDS"/>
        <variable name="root" value="$FS_GHW/OpenDDS/${{ github.job }}_autobuild_workspace"/>
        <variable name="junit_xml_output" value="Tests"/>
        </configuration>
        <command name="log" options="on"/>
        <command name="print_os_version"/>
        <command name="print_ace_config"/>
        <command name="print_make_version"/>
        <command name="check_compiler" options="msvc"/>
        <command name="print_perl_version"/>
        <command name="print_autobuild_config"/>
        <command name="auto_run_tests" options="script_path=tests dir=$FS_GHW/OpenDDS tests\core_ci_tests.lst -ExeSubDir Debug -Config STATIC_UNIT_TESTS -Config IPV6 -Config XERCES3 -Config CXX11 -Config RAPIDJSON"/>
        <command name="log" options="off"/>
        <command name="process_logs" options="move prettify index"/>
        </autobuild>
        EOF
        cat config.xml
    - name: run OpenDDS unit tests
      shell: cmd
      run: |
        cd OpenDDS
        call setenv.cmd
        cd ${{ github.job }}_autobuild_workspace
        perl "${{ github.workspace }}\autobuild\autobuild.pl" "${{ github.workspace }}\OpenDDS\${{ github.job }}_autobuild_workspace\config.xml"
    - name: upload autobuild output
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_autobuild_output
        path: OpenDDS\${{ github.job }}_autobuild_workspace
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: projects/30587790497/locations/global/workloadIdentityPools/gha-scoreboard-upload/providers/gha-provider
        service_account: gha-scoreboard-uploader@opendds-support.iam.gserviceaccount.com
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: get OpenDDS version
      shell: bash
      run: |
        cd OpenDDS
        echo "OPENDDS_MAJOR_VERSION=$(grep '#define OPENDDS_MAJOR_VERSION' dds/Version.h | cut -d' ' -f3)" >> $GITHUB_ENV
    - name: upload to Google Cloud
      uses: 'google-github-actions/upload-cloud-storage@v2'
      with:
        path: OpenDDS/${{ github.job }}_autobuild_workspace/logs
        destination: opendds-gha-scoreboard-uploads/${{ env.OPENDDS_MAJOR_VERSION }}/${{ github.job }}
        parent: false
        process_gcloudignore: false
      if: ${{ github.repository == 'OpenDDS/OpenDDS' && github.ref == env.SCOREBOARD_UPLOAD_BRANCH }}
    - name: check results
      shell: bash
      run: |
        $GITHUB_WORKSPACE/OpenDDS/tools/scripts/autobuild_brief_html_to_text.pl "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/"*_Brief.html
        cat "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"
        grep -q 'Failures: 0' "$GITHUB_WORKSPACE/OpenDDS/${{ github.job }}_autobuild_workspace/logs/latest.txt"

  openssl3_w19:

    runs-on: windows-2019

    steps:
    - name: get image version
      shell: bash
      run: |
        export IMAGE_VERSION=$ImageVersion
        echo "IMAGE_VERSION=$IMAGE_VERSION" >> $GITHUB_ENV
    - name: checkout openssl 3.0.2
      shell: cmd
      run: |
        git clone --branch openssl-3.0.2 --depth 1 https://github.com/openssl/openssl.git
        cd openssl
        for /f %%x in ('git rev-parse HEAD') do @echo OPENSSL_COMMIT=%%x>> %GITHUB_ENV%
    - name: Cache Artifact
      id: cache-artifact
      uses: actions/cache@v4
      with:
        path: ${{ github.job }}.tar.xz
        key: c01_${{ github.job }}_${{ env.OPENSSL_COMMIT }}_${{ env.IMAGE_VERSION }}
    - name: set up msvc env
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/msvc-dev-cmd@v1
    - name: set up nasm
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      uses: ilammy/setup-nasm@v1
    - name: set openssl environment
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        echo SSL_ROOT=%CD%\openssl3>> %GITHUB_ENV%
        echo OPENSSLDIR=%CD%\openssl3dir>> %GITHUB_ENV%
        type %GITHUB_ENV%
    - name: build openssl
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: cmd
      run: |
        cd openssl
        perl Configure --prefix=%SSL_ROOT% --openssldir=%OPENSSLDIR% --no-asm VC-WIN64A
        nmake
        nmake install
    - name: create openssl artifact
      if: steps.cache-artifact.outputs.cache-hit != 'true'
      shell: bash
      run: |
        tar cvhf ${{ github.job }}.tar openssl3
        xz -3 ${{ github.job }}.tar
    - name: upload openssl artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ github.job }}_${{ env.IMAGE_VERSION}}_artifact
        path: ${{ github.job }}.tar.xz
