/*
 * Distributed under the OpenDDS License.
 * See: http://www.opendds.org/license.html
 */

#ifndef OPENDDS_RTPSRELAYLIB_RELAY_IDL
#define OPENDDS_RTPSRELAYLIB_RELAY_IDL

#include <dds/DdsDcpsCore.idl>

module RtpsRelay {

  const string HSPDP = "HSPDP";
  const string HSEDP = "HSEDP";
  const string HDATA = "HDATA";
  const string VSPDP = "VSPDP";
  const string VSEDP = "VSEDP";
  const string VDATA = "VDATA";

  // GUID prefix bytes - uniquely specify the participant.
  typedef octet GuidPrefix_t[12];

  // Key portion of Entity identifier.
  typedef octet EntityKey_t[3];

  // Uniquely identify each entity within a participant.
  @final
  struct EntityId_t {
    @key EntityKey_t entityKey;
    @key octet entityKind;
  };

  // The actual GUID itself.
  @final
  struct GUID_t {
    @key GuidPrefix_t guidPrefix;
    @key EntityId_t entityId;
  };

  typedef sequence<string> StringSequence;
  typedef sequence<GUID_t> GuidSequence;

  const string RELAY_PARTITIONS_TOPIC_NAME = "Relay Partitions";
  @topic
  struct RelayPartitions {
    @key string relay_id;
    @key unsigned long slot;
    StringSequence partitions;
  };

  const string RELAY_ADDRESSES_TOPIC_NAME = "Relay Addresses";
  @topic
  struct RelayAddress {
    @key string relay_id;
    @key string name;
    string address;
  };

  const string RELAY_STATUS_TOPIC_NAME = "Relay Status";
  @topic
  struct RelayStatus {
    @key string relay_id;
    boolean admitting;
  };

  const string RELAY_PARTICIPANT_STATUS_TOPIC_NAME = "Relay Participant Status";

  @topic
  @mutable
  @autoid(HASH)
  struct RelayParticipantStatus {
    @key string relay_id;
    @key GUID_t guid;
    boolean active;
    DDS::Time_t active_ts;
    boolean alive;
    DDS::Time_t alive_ts;
    DDS::UserDataQosPolicy user_data;
  };

  const string SPDP_REPLAY_TOPIC_NAME = "SPDP Replay";
  @topic
  struct SpdpReplay {
    StringSequence partitions;
    string address;
    GUID_t guid;
  };

  struct RelayHeader {
    StringSequence to_partitions;
    GuidSequence to_guids;
  };

  struct Duration_t {
    long sec;
    unsigned long nanosec;
  };

  @mutable
  @autoid(HASH)
  struct ProtocolStatistics {
    unsigned long messages_in;
    unsigned long long bytes_in;
    unsigned long messages_ignored;
    unsigned long long bytes_ignored;
    Duration_t input_processing_time;
    unsigned long messages_out;
    unsigned long long bytes_out;
    unsigned long messages_dropped;
    unsigned long long bytes_dropped;
    Duration_t output_processing_time;
  };

  const string PARTICIPANT_STATISTICS_TOPIC_NAME = "Participant Statistics";

  @topic
  @mutable
  @autoid(HASH)
  struct ParticipantStatistics {
    @key GUID_t guid;
    @key string name;
    Duration_t session_time;
    ProtocolStatistics rtps;
    ProtocolStatistics stun;
  };

  const string HANDLER_STATISTICS_TOPIC_NAME = "Handler Statistics";

  @topic
  @mutable
  @autoid(HASH)
  struct HandlerStatistics {
    @key string relay_id;
    @key string name;
    Duration_t interval;
    ProtocolStatistics rtps;
    ProtocolStatistics stun;
    unsigned long max_gain;
    unsigned long error_count;
    unsigned long max_queue_size;
    Duration_t max_queue_latency;
  };

  const string RELAY_STATISTICS_TOPIC_NAME = "Relay Statistics";

  @topic
  @mutable
  @autoid(HASH)
  struct RelayStatistics {
    @key string relay_id;
    Duration_t interval;
    ProtocolStatistics rtps;
    ProtocolStatistics stun;
    unsigned long max_gain;
    unsigned long error_count;
    unsigned long local_active_participants;
    unsigned long new_address_count;
    unsigned long expired_address_count;
    unsigned long max_queue_size;
    Duration_t max_queue_latency;
    unsigned long local_participants;
    unsigned long local_writers;
    unsigned long local_readers;
    unsigned long relay_partitions_pub_count;
    unsigned long relay_address_pub_count;
    unsigned long spdp_replay_pub_count;
    unsigned long admission_deferral_count;
  };
};

#endif
