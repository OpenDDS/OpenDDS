/*
 *
 *
 * Distributed under the OpenDDS License.
 * See: http://www.opendds.org/license.html
 */

#ifndef OPENDDS_DDSDCPSPUBLICATION_IDL
#define OPENDDS_DDSDCPSPUBLICATION_IDL

#include <dds/DdsDcpsInfrastructure.idl>

#pragma ciao lem "dds/DdsDcpsPublicationE.idl"

module DDS {
   local interface Topic;
   local interface DomainParticipant;
   local interface DataWriter;
   local interface Publisher;

   local interface DataWriterListener : Listener {
    void on_offered_deadline_missed(
      in DataWriter writer,
      in OfferedDeadlineMissedStatus status);

    void on_offered_incompatible_qos(
      in DataWriter writer,
      in OfferedIncompatibleQosStatus status);

    void on_liveliness_lost(
      in DataWriter writer,
      in LivelinessLostStatus status);

    void on_publication_matched(
      in DataWriter writer,
      in PublicationMatchedStatus status);
    };

    local interface PublisherListener : DataWriterListener {
  };


   local interface DataWriter : Entity {
    // InstanceHandle_t register_instance(
    //          in Data instance);
    // InstanceHandle_t register_instance_w_timestamp(
    //          in Data instance,
    //          in Time_t timestamp);
    // ReturnCode_t unregister_instance(
    //          in Data instance,
    //          in InstanceHandle_t handle);
    // ReturnCode_t unregister_instance_w_timestamp(
    //          in Data instance,
    //          in InstanceHandle_t handle,
    //          in Time_t timestamp);
    // ReturnCode_t write(
    //          in Data instance_data,
    //          in InstanceHandle_t handle);
    // ReturnCode_t write_w_timestamp(
    //          in Data instance_data,
    //          in InstanceHandle_t handle,
    //          in Time_t source_timestamp);
    // ReturnCode_t dispose(
    //          in Data instance_data,
    //          in InstanceHandle_t instance_handle);
    // ReturnCode_t dispose_w_timestamp(
    //          in Data instance_data,
    //          in InstanceHandle_t instance_handle,
    //          in Time_t source_timestamp);
    // ReturnCode_t get_key_value(
    //          inout Data key_holder,
    //          in InstanceHandle_t handle);
    // InstanceHandle_t lookup_instance(
    //      in Data instance_data);

    ReturnCode_t set_qos(
      in DataWriterQos qos);

    ReturnCode_t get_qos(inout DataWriterQos qos);

    ReturnCode_t set_listener(
      in DataWriterListener a_listener,
      in StatusMask mask);

    DataWriterListener get_listener();

    Topic get_topic();

    Publisher get_publisher();

    ReturnCode_t wait_for_acknowledgments(in Duration_t max_wait);

    // Access the status
    ReturnCode_t get_liveliness_lost_status(
        inout LivelinessLostStatus status);
    ReturnCode_t get_offered_deadline_missed_status(
        inout OfferedDeadlineMissedStatus status);
    ReturnCode_t get_offered_incompatible_qos_status(
        inout OfferedIncompatibleQosStatus status);
    ReturnCode_t get_publication_matched_status(
        inout PublicationMatchedStatus status);

    ReturnCode_t assert_liveliness();

    ReturnCode_t get_matched_subscriptions(
      inout InstanceHandleSeq subscription_handles);

#if !defined (DDS_HAS_MINIMUM_BIT)
    ReturnCode_t get_matched_subscription_data(
      inout SubscriptionBuiltinTopicData subscription_data,
      in InstanceHandle_t subscription_handle);
#endif // !defined (DDS_HAS_MINIMUM_BIT)

    };

    // ----------------------------------------------------------------------
    local interface Publisher : Entity {
    DataWriter create_datawriter(
      in Topic a_topic,
      in DataWriterQos qos,
      in DataWriterListener a_listener,
      in StatusMask mask);

    ReturnCode_t delete_datawriter(
      in DataWriter a_datawriter);

    DataWriter lookup_datawriter(
      in string topic_name);

    ReturnCode_t delete_contained_entities();

    ReturnCode_t set_qos(
      in PublisherQos qos);

    ReturnCode_t get_qos(
      inout PublisherQos qos);

    ReturnCode_t set_listener(
      in PublisherListener a_listener,
      in StatusMask mask);

    PublisherListener get_listener();

    ReturnCode_t suspend_publications();

    ReturnCode_t resume_publications();

#ifndef OPENDDS_NO_OBJECT_MODEL_PROFILE

    ReturnCode_t begin_coherent_changes();

    ReturnCode_t end_coherent_changes();

#endif

    ReturnCode_t wait_for_acknowledgments(
        in Duration_t max_wait);

    DomainParticipant get_participant();

    ReturnCode_t set_default_datawriter_qos(
      in DataWriterQos qos);

    ReturnCode_t get_default_datawriter_qos(
      inout DataWriterQos qos);

    ReturnCode_t copy_from_topic_qos(
      inout DataWriterQos a_datawriter_qos,
      in TopicQos a_topic_qos);
    };

};

module OpenDDS {
  module DCPS {

    struct PublicationLostStatus {
      ::DDS::InstanceHandleSeq subscription_handles;
    };

    typedef PublicationLostStatus PublicationDisconnectedStatus;
    typedef PublicationLostStatus PublicationReconnectedStatus;
    typedef PublicationLostStatus DisassociationStatus;

    local interface DataWriterListener : ::DDS::DataWriterListener {

      /// Called when a connection failure has been detected
      /// and there are still associations using the connection
      /// after the configurable graceful_disconnected_period.
      void on_publication_disconnected(
        in ::DDS::DataWriter reader,
        in PublicationDisconnectedStatus status);

      /// Called when a disconnected connection
      /// has been reconnected.
      void on_publication_reconnected(
        in ::DDS::DataWriter reader,
        in PublicationReconnectedStatus status);

      /// called when a connection is lost and hence one
      /// or more associations from this publication to
      /// some subscribers have been lost.
      /// A connection is "lost" when the retry attempts
      /// have been exhausted.
      void on_publication_lost(
        in ::DDS::DataWriter writer,
        in PublicationLostStatus status);
    };

  }; // End of module DCPS
}; // End of module OpenDDS

#endif /* OPENDDS_DCPS_PUBLICATION_IDL */
