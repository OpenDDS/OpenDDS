/*
 * This code was generated by the XML Schema Compiler.
 *
 * Changes made to this code will most likely be overwritten
 * when the handlers are recompiled.
 *
 * If you find errors or feel that there are bugfixes to be made,
 * please report this to the XSC project at
 * https://github.com/DOCGroup/XSC
 */
#ifndef OPENDDS_DCPS_QOS_XML_HANDLER_DDS_QOS_HPP
#define OPENDDS_DCPS_QOS_XML_HANDLER_DDS_QOS_HPP

#include "OpenDDS_XML_QOS_Handler_Export.h"
// Forward declarations.
namespace dds
{
  class destinationOrderKind;
  class durabilityKind;
  class historyKind;
  class livelinessKind;
  class presentationAccessScopeKind;
  class reliabilityKind;
  class ownershipKind;
  class duration;
  class stringSeq;
  class deadlineQosPolicy;
  class destinationOrderQosPolicy;
  class durabilityQosPolicy;
  class durabilityServiceQosPolicy;
  class entityFactoryQosPolicy;
  class groupDataQosPolicy;
  class historyQosPolicy;
  class latencyBudgetQosPolicy;
  class lifespanQosPolicy;
  class livelinessQosPolicy;
  class ownershipQosPolicy;
  class ownershipStrengthQosPolicy;
  class partitionQosPolicy;
  class presentationQosPolicy;
  class readerDataLifecycleQosPolicy;
  class reliabilityQosPolicy;
  class resourceLimitsQosPolicy;
  class timeBasedFilterQosPolicy;
  class topicDataQosPolicy;
  class transportPriorityQosPolicy;
  class userDataQosPolicy;
  class writerDataLifecycleQosPolicy;
  class domainparticipantQos;
  class publisherQos;
  class subscriberQos;
  class topicQos;
  class datareaderQos;
  class datawriterQos;
  class qosProfile;
  class qosProfile_seq;
}

#include <memory>
#include <string>
#include <list>
#include "ace/XML_Utils/XMLSchema/Types.hpp"
#include "ace/XML_Utils/XMLSchema/id_map.hpp"
#include "ace/Refcounted_Auto_Ptr.h"
#include "ace/Null_Mutex.h"
#include "ace/ace_wchar.h"

#if !defined(XML_XSC_SMART_PTR)
# if defined(ACE_HAS_CPP11)
#   define XML_XSC_SMART_PTR(X) std::unique_ptr<X>
# else
#   define XML_XSC_SMART_PTR(X) std::auto_ptr<X>
# endif
#endif

namespace dds
{
  class OpenDDS_XML_QOS_Handler_Export destinationOrderKind : public ::XSCRT::Type
  {
    public:
    explicit destinationOrderKind (::XSCRT::XML::Element<ACE_TCHAR> const&);
    explicit destinationOrderKind (::XSCRT::XML::Attribute<ACE_TCHAR> const&);

    static destinationOrderKind const BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS;
    static destinationOrderKind const BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS;

    enum Value
    {
      BY_RECEPTION_TIMESTAMP_DESTINATIONORDER_QOS_l, BY_SOURCE_TIMESTAMP_DESTINATIONORDER_QOS_l
    };


    Value
    integral () const;

    friend bool OpenDDS_XML_QOS_Handler_Export
    operator== (destinationOrderKind const& a, destinationOrderKind const& b);

    friend bool OpenDDS_XML_QOS_Handler_Export
    operator!= (destinationOrderKind const& a, destinationOrderKind const& b);

    private:
    destinationOrderKind (Value v);

    Value v_;
  };

  bool OpenDDS_XML_QOS_Handler_Export operator== (destinationOrderKind const &a, destinationOrderKind const &b);

  bool OpenDDS_XML_QOS_Handler_Export operator!= (destinationOrderKind const &a, destinationOrderKind const &b);


  class OpenDDS_XML_QOS_Handler_Export durabilityKind : public ::XSCRT::Type
  {
    public:
    explicit durabilityKind (::XSCRT::XML::Element<ACE_TCHAR> const&);
    explicit durabilityKind (::XSCRT::XML::Attribute<ACE_TCHAR> const&);

    static durabilityKind const VOLATILE_DURABILITY_QOS;
    static durabilityKind const TRANSIENT_LOCAL_DURABILITY_QOS;
    static durabilityKind const TRANSIENT_DURABILITY_QOS;
    static durabilityKind const PERSISTENT_DURABILITY_QOS;

    enum Value
    {
      VOLATILE_DURABILITY_QOS_l, TRANSIENT_LOCAL_DURABILITY_QOS_l, TRANSIENT_DURABILITY_QOS_l, PERSISTENT_DURABILITY_QOS_l
    };


    Value
    integral () const;

    friend bool OpenDDS_XML_QOS_Handler_Export
    operator== (durabilityKind const& a, durabilityKind const& b);

    friend bool OpenDDS_XML_QOS_Handler_Export
    operator!= (durabilityKind const& a, durabilityKind const& b);

    private:
    durabilityKind (Value v);

    Value v_;
  };

  bool OpenDDS_XML_QOS_Handler_Export operator== (durabilityKind const &a, durabilityKind const &b);

  bool OpenDDS_XML_QOS_Handler_Export operator!= (durabilityKind const &a, durabilityKind const &b);


  class OpenDDS_XML_QOS_Handler_Export historyKind : public ::XSCRT::Type
  {
    public:
    explicit historyKind (::XSCRT::XML::Element<ACE_TCHAR> const&);
    explicit historyKind (::XSCRT::XML::Attribute<ACE_TCHAR> const&);

    static historyKind const KEEP_LAST_HISTORY_QOS;
    static historyKind const KEEP_ALL_HISTORY_QOS;

    enum Value
    {
      KEEP_LAST_HISTORY_QOS_l, KEEP_ALL_HISTORY_QOS_l
    };


    Value
    integral () const;

    friend bool OpenDDS_XML_QOS_Handler_Export
    operator== (historyKind const& a, historyKind const& b);

    friend bool OpenDDS_XML_QOS_Handler_Export
    operator!= (historyKind const& a, historyKind const& b);

    private:
    historyKind (Value v);

    Value v_;
  };

  bool OpenDDS_XML_QOS_Handler_Export operator== (historyKind const &a, historyKind const &b);

  bool OpenDDS_XML_QOS_Handler_Export operator!= (historyKind const &a, historyKind const &b);


  class OpenDDS_XML_QOS_Handler_Export livelinessKind : public ::XSCRT::Type
  {
    public:
    explicit livelinessKind (::XSCRT::XML::Element<ACE_TCHAR> const&);
    explicit livelinessKind (::XSCRT::XML::Attribute<ACE_TCHAR> const&);

    static livelinessKind const AUTOMATIC_LIVELINESS_QOS;
    static livelinessKind const MANUAL_BY_PARTICIPANT_LIVELINESS_QOS;
    static livelinessKind const MANUAL_BY_TOPIC_LIVELINESS_QOS;

    enum Value
    {
      AUTOMATIC_LIVELINESS_QOS_l, MANUAL_BY_PARTICIPANT_LIVELINESS_QOS_l, MANUAL_BY_TOPIC_LIVELINESS_QOS_l
    };


    Value
    integral () const;

    friend bool OpenDDS_XML_QOS_Handler_Export
    operator== (livelinessKind const& a, livelinessKind const& b);

    friend bool OpenDDS_XML_QOS_Handler_Export
    operator!= (livelinessKind const& a, livelinessKind const& b);

    private:
    livelinessKind (Value v);

    Value v_;
  };

  bool OpenDDS_XML_QOS_Handler_Export operator== (livelinessKind const &a, livelinessKind const &b);

  bool OpenDDS_XML_QOS_Handler_Export operator!= (livelinessKind const &a, livelinessKind const &b);


  class OpenDDS_XML_QOS_Handler_Export presentationAccessScopeKind : public ::XSCRT::Type
  {
    public:
    explicit presentationAccessScopeKind (::XSCRT::XML::Element<ACE_TCHAR> const&);
    explicit presentationAccessScopeKind (::XSCRT::XML::Attribute<ACE_TCHAR> const&);

    static presentationAccessScopeKind const INSTANCE_PRESENTATION_QOS;
    static presentationAccessScopeKind const TOPIC_PRESENTATION_QOS;
    static presentationAccessScopeKind const GROUP_PRESENTATION_QOS;

    enum Value
    {
      INSTANCE_PRESENTATION_QOS_l, TOPIC_PRESENTATION_QOS_l, GROUP_PRESENTATION_QOS_l
    };


    Value
    integral () const;

    friend bool OpenDDS_XML_QOS_Handler_Export
    operator== (presentationAccessScopeKind const& a, presentationAccessScopeKind const& b);

    friend bool OpenDDS_XML_QOS_Handler_Export
    operator!= (presentationAccessScopeKind const& a, presentationAccessScopeKind const& b);

    private:
    presentationAccessScopeKind (Value v);

    Value v_;
  };

  bool OpenDDS_XML_QOS_Handler_Export operator== (presentationAccessScopeKind const &a, presentationAccessScopeKind const &b);

  bool OpenDDS_XML_QOS_Handler_Export operator!= (presentationAccessScopeKind const &a, presentationAccessScopeKind const &b);


  class OpenDDS_XML_QOS_Handler_Export reliabilityKind : public ::XSCRT::Type
  {
    public:
    explicit reliabilityKind (::XSCRT::XML::Element<ACE_TCHAR> const&);
    explicit reliabilityKind (::XSCRT::XML::Attribute<ACE_TCHAR> const&);

    static reliabilityKind const BEST_EFFORT_RELIABILITY_QOS;
    static reliabilityKind const RELIABLE_RELIABILITY_QOS;

    enum Value
    {
      BEST_EFFORT_RELIABILITY_QOS_l, RELIABLE_RELIABILITY_QOS_l
    };


    Value
    integral () const;

    friend bool OpenDDS_XML_QOS_Handler_Export
    operator== (reliabilityKind const& a, reliabilityKind const& b);

    friend bool OpenDDS_XML_QOS_Handler_Export
    operator!= (reliabilityKind const& a, reliabilityKind const& b);

    private:
    reliabilityKind (Value v);

    Value v_;
  };

  bool OpenDDS_XML_QOS_Handler_Export operator== (reliabilityKind const &a, reliabilityKind const &b);

  bool OpenDDS_XML_QOS_Handler_Export operator!= (reliabilityKind const &a, reliabilityKind const &b);


  class OpenDDS_XML_QOS_Handler_Export ownershipKind : public ::XSCRT::Type
  {
    public:
    explicit ownershipKind (::XSCRT::XML::Element<ACE_TCHAR> const&);
    explicit ownershipKind (::XSCRT::XML::Attribute<ACE_TCHAR> const&);

    static ownershipKind const SHARED_OWNERSHIP_QOS;
    static ownershipKind const EXCLUSIVE_OWNERSHIP_QOS;

    enum Value
    {
      SHARED_OWNERSHIP_QOS_l, EXCLUSIVE_OWNERSHIP_QOS_l
    };


    Value
    integral () const;

    friend bool OpenDDS_XML_QOS_Handler_Export
    operator== (ownershipKind const& a, ownershipKind const& b);

    friend bool OpenDDS_XML_QOS_Handler_Export
    operator!= (ownershipKind const& a, ownershipKind const& b);

    private:
    ownershipKind (Value v);

    Value v_;
  };

  bool OpenDDS_XML_QOS_Handler_Export operator== (ownershipKind const &a, ownershipKind const &b);

  bool OpenDDS_XML_QOS_Handler_Export operator!= (ownershipKind const &a, ownershipKind const &b);


  class OpenDDS_XML_QOS_Handler_Export duration : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::duration, ACE_Null_Mutex> _ptr;

    // sec
    public:
    bool sec_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& sec () const;
    void sec (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) sec_auto_ptr_type;
    sec_auto_ptr_type sec_;

    // nanosec
    public:
    bool nanosec_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& nanosec () const;
    void nanosec (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) nanosec_auto_ptr_type;
    nanosec_auto_ptr_type nanosec_;

    public:
    duration ();

    explicit duration (::XSCRT::XML::Element<ACE_TCHAR> const&);
    duration (duration const& s);
    duration& operator= (duration const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export stringSeq : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::stringSeq, ACE_Null_Mutex> _ptr;

    // element
    public:
    typedef ACE_Refcounted_Auto_Ptr < ::XMLSchema::string<ACE_TCHAR>, ACE_Null_Mutex> element_value_type;
    typedef std::list<element_value_type> element_container_type;
    typedef element_container_type::iterator element_iterator;
    typedef element_container_type::const_iterator element_const_iterator;
    element_iterator begin_element ();
    element_iterator end_element ();
    element_const_iterator begin_element () const;
    element_const_iterator end_element () const;
    void add_element (element_value_type const&);
    size_t count_element () const;

    protected:
    element_container_type element_;

    public:
    stringSeq ();

    explicit stringSeq (::XSCRT::XML::Element<ACE_TCHAR> const&);
    stringSeq (stringSeq const& s);
    stringSeq& operator= (stringSeq const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export deadlineQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::deadlineQosPolicy, ACE_Null_Mutex> _ptr;

    // period
    public:
    bool period_p () const;
    ::dds::duration const& period () const;
    void period (::dds::duration const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::duration ) period_auto_ptr_type;
    period_auto_ptr_type period_;

    public:
    deadlineQosPolicy ();

    explicit deadlineQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    deadlineQosPolicy (deadlineQosPolicy const& s);
    deadlineQosPolicy& operator= (deadlineQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export destinationOrderQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::destinationOrderQosPolicy, ACE_Null_Mutex> _ptr;

    // kind
    public:
    bool kind_p () const;
    ::dds::destinationOrderKind const& kind () const;
    void kind (::dds::destinationOrderKind const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::destinationOrderKind ) kind_auto_ptr_type;
    kind_auto_ptr_type kind_;

    public:
    destinationOrderQosPolicy ();

    explicit destinationOrderQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    destinationOrderQosPolicy (destinationOrderQosPolicy const& s);
    destinationOrderQosPolicy& operator= (destinationOrderQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export durabilityQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::durabilityQosPolicy, ACE_Null_Mutex> _ptr;

    // kind
    public:
    bool kind_p () const;
    ::dds::durabilityKind const& kind () const;
    void kind (::dds::durabilityKind const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::durabilityKind ) kind_auto_ptr_type;
    kind_auto_ptr_type kind_;

    public:
    durabilityQosPolicy ();

    explicit durabilityQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    durabilityQosPolicy (durabilityQosPolicy const& s);
    durabilityQosPolicy& operator= (durabilityQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export durabilityServiceQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::durabilityServiceQosPolicy, ACE_Null_Mutex> _ptr;

    // service_cleanup_delay
    public:
    bool service_cleanup_delay_p () const;
    ::dds::duration const& service_cleanup_delay () const;
    void service_cleanup_delay (::dds::duration const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::duration ) service_cleanup_delay_auto_ptr_type;
    service_cleanup_delay_auto_ptr_type service_cleanup_delay_;

    // history_kind
    public:
    bool history_kind_p () const;
    ::dds::historyKind const& history_kind () const;
    void history_kind (::dds::historyKind const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::historyKind ) history_kind_auto_ptr_type;
    history_kind_auto_ptr_type history_kind_;

    // history_depth
    public:
    bool history_depth_p () const;
    ::XMLSchema::positiveInteger const& history_depth () const;
    void history_depth (::XMLSchema::positiveInteger const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::positiveInteger ) history_depth_auto_ptr_type;
    history_depth_auto_ptr_type history_depth_;

    // max_samples
    public:
    bool max_samples_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& max_samples () const;
    void max_samples (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) max_samples_auto_ptr_type;
    max_samples_auto_ptr_type max_samples_;

    // max_instances
    public:
    bool max_instances_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& max_instances () const;
    void max_instances (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) max_instances_auto_ptr_type;
    max_instances_auto_ptr_type max_instances_;

    // max_samples_per_instance
    public:
    bool max_samples_per_instance_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& max_samples_per_instance () const;
    void max_samples_per_instance (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) max_samples_per_instance_auto_ptr_type;
    max_samples_per_instance_auto_ptr_type max_samples_per_instance_;

    public:
    durabilityServiceQosPolicy ();

    explicit durabilityServiceQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    durabilityServiceQosPolicy (durabilityServiceQosPolicy const& s);
    durabilityServiceQosPolicy& operator= (durabilityServiceQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export entityFactoryQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::entityFactoryQosPolicy, ACE_Null_Mutex> _ptr;

    // autoenable_created_entities
    public:
    bool autoenable_created_entities_p () const;
    ::XMLSchema::boolean const& autoenable_created_entities () const;
    void autoenable_created_entities (::XMLSchema::boolean const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::boolean ) autoenable_created_entities_auto_ptr_type;
    autoenable_created_entities_auto_ptr_type autoenable_created_entities_;

    public:
    entityFactoryQosPolicy ();

    explicit entityFactoryQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    entityFactoryQosPolicy (entityFactoryQosPolicy const& s);
    entityFactoryQosPolicy& operator= (entityFactoryQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export groupDataQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::groupDataQosPolicy, ACE_Null_Mutex> _ptr;

    // value
    public:
    bool value_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& value () const;
    void value (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) value_auto_ptr_type;
    value_auto_ptr_type value_;

    public:
    groupDataQosPolicy ();

    explicit groupDataQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    groupDataQosPolicy (groupDataQosPolicy const& s);
    groupDataQosPolicy& operator= (groupDataQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export historyQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::historyQosPolicy, ACE_Null_Mutex> _ptr;

    // kind
    public:
    bool kind_p () const;
    ::dds::historyKind const& kind () const;
    void kind (::dds::historyKind const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::historyKind ) kind_auto_ptr_type;
    kind_auto_ptr_type kind_;

    // depth
    public:
    bool depth_p () const;
    ::XMLSchema::positiveInteger const& depth () const;
    void depth (::XMLSchema::positiveInteger const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::positiveInteger ) depth_auto_ptr_type;
    depth_auto_ptr_type depth_;

    public:
    historyQosPolicy ();

    explicit historyQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    historyQosPolicy (historyQosPolicy const& s);
    historyQosPolicy& operator= (historyQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export latencyBudgetQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::latencyBudgetQosPolicy, ACE_Null_Mutex> _ptr;

    // duration
    public:
    bool duration_p () const;
    ::dds::duration const& duration () const;
    void duration (::dds::duration const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::duration ) duration_auto_ptr_type;
    duration_auto_ptr_type duration_;

    public:
    latencyBudgetQosPolicy ();

    explicit latencyBudgetQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    latencyBudgetQosPolicy (latencyBudgetQosPolicy const& s);
    latencyBudgetQosPolicy& operator= (latencyBudgetQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export lifespanQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::lifespanQosPolicy, ACE_Null_Mutex> _ptr;

    // duration
    public:
    bool duration_p () const;
    ::dds::duration const& duration () const;
    void duration (::dds::duration const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::duration ) duration_auto_ptr_type;
    duration_auto_ptr_type duration_;

    public:
    lifespanQosPolicy ();

    explicit lifespanQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    lifespanQosPolicy (lifespanQosPolicy const& s);
    lifespanQosPolicy& operator= (lifespanQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export livelinessQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::livelinessQosPolicy, ACE_Null_Mutex> _ptr;

    // kind
    public:
    bool kind_p () const;
    ::dds::livelinessKind const& kind () const;
    void kind (::dds::livelinessKind const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::livelinessKind ) kind_auto_ptr_type;
    kind_auto_ptr_type kind_;

    // lease_duration
    public:
    bool lease_duration_p () const;
    ::dds::duration const& lease_duration () const;
    void lease_duration (::dds::duration const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::duration ) lease_duration_auto_ptr_type;
    lease_duration_auto_ptr_type lease_duration_;

    public:
    livelinessQosPolicy ();

    explicit livelinessQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    livelinessQosPolicy (livelinessQosPolicy const& s);
    livelinessQosPolicy& operator= (livelinessQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export ownershipQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::ownershipQosPolicy, ACE_Null_Mutex> _ptr;

    // kind
    public:
    bool kind_p () const;
    ::dds::ownershipKind const& kind () const;
    void kind (::dds::ownershipKind const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::ownershipKind ) kind_auto_ptr_type;
    kind_auto_ptr_type kind_;

    public:
    ownershipQosPolicy ();

    explicit ownershipQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    ownershipQosPolicy (ownershipQosPolicy const& s);
    ownershipQosPolicy& operator= (ownershipQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export ownershipStrengthQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::ownershipStrengthQosPolicy, ACE_Null_Mutex> _ptr;

    // value
    public:
    bool value_p () const;
    ::XMLSchema::nonNegativeInteger const& value () const;
    void value (::XMLSchema::nonNegativeInteger const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::nonNegativeInteger ) value_auto_ptr_type;
    value_auto_ptr_type value_;

    public:
    ownershipStrengthQosPolicy ();

    explicit ownershipStrengthQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    ownershipStrengthQosPolicy (ownershipStrengthQosPolicy const& s);
    ownershipStrengthQosPolicy& operator= (ownershipStrengthQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export partitionQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::partitionQosPolicy, ACE_Null_Mutex> _ptr;

    // name
    public:
    bool name_p () const;
    ::dds::stringSeq const& name () const;
    void name (::dds::stringSeq const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::stringSeq ) name_auto_ptr_type;
    name_auto_ptr_type name_;

    public:
    partitionQosPolicy ();

    explicit partitionQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    partitionQosPolicy (partitionQosPolicy const& s);
    partitionQosPolicy& operator= (partitionQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export presentationQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::presentationQosPolicy, ACE_Null_Mutex> _ptr;

    // access_scope
    public:
    bool access_scope_p () const;
    ::dds::presentationAccessScopeKind const& access_scope () const;
    void access_scope (::dds::presentationAccessScopeKind const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::presentationAccessScopeKind ) access_scope_auto_ptr_type;
    access_scope_auto_ptr_type access_scope_;

    // coherent_access
    public:
    bool coherent_access_p () const;
    ::XMLSchema::boolean const& coherent_access () const;
    void coherent_access (::XMLSchema::boolean const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::boolean ) coherent_access_auto_ptr_type;
    coherent_access_auto_ptr_type coherent_access_;

    // ordered_access
    public:
    bool ordered_access_p () const;
    ::XMLSchema::boolean const& ordered_access () const;
    void ordered_access (::XMLSchema::boolean const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::boolean ) ordered_access_auto_ptr_type;
    ordered_access_auto_ptr_type ordered_access_;

    public:
    presentationQosPolicy ();

    explicit presentationQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    presentationQosPolicy (presentationQosPolicy const& s);
    presentationQosPolicy& operator= (presentationQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export readerDataLifecycleQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::readerDataLifecycleQosPolicy, ACE_Null_Mutex> _ptr;

    // autopurge_nowriter_samples_delay
    public:
    bool autopurge_nowriter_samples_delay_p () const;
    ::dds::duration const& autopurge_nowriter_samples_delay () const;
    void autopurge_nowriter_samples_delay (::dds::duration const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::duration ) autopurge_nowriter_samples_delay_auto_ptr_type;
    autopurge_nowriter_samples_delay_auto_ptr_type autopurge_nowriter_samples_delay_;

    // autopurge_disposed_samples_delay
    public:
    bool autopurge_disposed_samples_delay_p () const;
    ::dds::duration const& autopurge_disposed_samples_delay () const;
    void autopurge_disposed_samples_delay (::dds::duration const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::duration ) autopurge_disposed_samples_delay_auto_ptr_type;
    autopurge_disposed_samples_delay_auto_ptr_type autopurge_disposed_samples_delay_;

    public:
    readerDataLifecycleQosPolicy ();

    explicit readerDataLifecycleQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    readerDataLifecycleQosPolicy (readerDataLifecycleQosPolicy const& s);
    readerDataLifecycleQosPolicy& operator= (readerDataLifecycleQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export reliabilityQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::reliabilityQosPolicy, ACE_Null_Mutex> _ptr;

    // kind
    public:
    bool kind_p () const;
    ::dds::reliabilityKind const& kind () const;
    void kind (::dds::reliabilityKind const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::reliabilityKind ) kind_auto_ptr_type;
    kind_auto_ptr_type kind_;

    // max_blocking_time
    public:
    bool max_blocking_time_p () const;
    ::dds::duration const& max_blocking_time () const;
    void max_blocking_time (::dds::duration const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::duration ) max_blocking_time_auto_ptr_type;
    max_blocking_time_auto_ptr_type max_blocking_time_;

    public:
    reliabilityQosPolicy ();

    explicit reliabilityQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    reliabilityQosPolicy (reliabilityQosPolicy const& s);
    reliabilityQosPolicy& operator= (reliabilityQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export resourceLimitsQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::resourceLimitsQosPolicy, ACE_Null_Mutex> _ptr;

    // max_samples
    public:
    bool max_samples_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& max_samples () const;
    void max_samples (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) max_samples_auto_ptr_type;
    max_samples_auto_ptr_type max_samples_;

    // max_instances
    public:
    bool max_instances_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& max_instances () const;
    void max_instances (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) max_instances_auto_ptr_type;
    max_instances_auto_ptr_type max_instances_;

    // max_samples_per_instance
    public:
    bool max_samples_per_instance_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& max_samples_per_instance () const;
    void max_samples_per_instance (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) max_samples_per_instance_auto_ptr_type;
    max_samples_per_instance_auto_ptr_type max_samples_per_instance_;

    // initial_samples
    public:
    bool initial_samples_p () const;
    ::XMLSchema::positiveInteger const& initial_samples () const;
    void initial_samples (::XMLSchema::positiveInteger const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::positiveInteger ) initial_samples_auto_ptr_type;
    initial_samples_auto_ptr_type initial_samples_;

    // initial_instances
    public:
    bool initial_instances_p () const;
    ::XMLSchema::positiveInteger const& initial_instances () const;
    void initial_instances (::XMLSchema::positiveInteger const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::positiveInteger ) initial_instances_auto_ptr_type;
    initial_instances_auto_ptr_type initial_instances_;

    public:
    resourceLimitsQosPolicy ();

    explicit resourceLimitsQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    resourceLimitsQosPolicy (resourceLimitsQosPolicy const& s);
    resourceLimitsQosPolicy& operator= (resourceLimitsQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export timeBasedFilterQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::timeBasedFilterQosPolicy, ACE_Null_Mutex> _ptr;

    // minimum_separation
    public:
    bool minimum_separation_p () const;
    ::dds::duration const& minimum_separation () const;
    void minimum_separation (::dds::duration const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::duration ) minimum_separation_auto_ptr_type;
    minimum_separation_auto_ptr_type minimum_separation_;

    public:
    timeBasedFilterQosPolicy ();

    explicit timeBasedFilterQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    timeBasedFilterQosPolicy (timeBasedFilterQosPolicy const& s);
    timeBasedFilterQosPolicy& operator= (timeBasedFilterQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export topicDataQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::topicDataQosPolicy, ACE_Null_Mutex> _ptr;

    // value
    public:
    bool value_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& value () const;
    void value (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) value_auto_ptr_type;
    value_auto_ptr_type value_;

    public:
    topicDataQosPolicy ();

    explicit topicDataQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    topicDataQosPolicy (topicDataQosPolicy const& s);
    topicDataQosPolicy& operator= (topicDataQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export transportPriorityQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::transportPriorityQosPolicy, ACE_Null_Mutex> _ptr;

    // value
    public:
    bool value_p () const;
    ::XMLSchema::nonNegativeInteger const& value () const;
    void value (::XMLSchema::nonNegativeInteger const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::nonNegativeInteger ) value_auto_ptr_type;
    value_auto_ptr_type value_;

    public:
    transportPriorityQosPolicy ();

    explicit transportPriorityQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    transportPriorityQosPolicy (transportPriorityQosPolicy const& s);
    transportPriorityQosPolicy& operator= (transportPriorityQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export userDataQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::userDataQosPolicy, ACE_Null_Mutex> _ptr;

    // value
    public:
    bool value_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& value () const;
    void value (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) value_auto_ptr_type;
    value_auto_ptr_type value_;

    public:
    userDataQosPolicy ();

    explicit userDataQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    userDataQosPolicy (userDataQosPolicy const& s);
    userDataQosPolicy& operator= (userDataQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export writerDataLifecycleQosPolicy : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::writerDataLifecycleQosPolicy, ACE_Null_Mutex> _ptr;

    // autodispose_unregistered_instances
    public:
    bool autodispose_unregistered_instances_p () const;
    ::XMLSchema::boolean const& autodispose_unregistered_instances () const;
    void autodispose_unregistered_instances (::XMLSchema::boolean const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::boolean ) autodispose_unregistered_instances_auto_ptr_type;
    autodispose_unregistered_instances_auto_ptr_type autodispose_unregistered_instances_;

    public:
    writerDataLifecycleQosPolicy ();

    explicit writerDataLifecycleQosPolicy (::XSCRT::XML::Element<ACE_TCHAR> const&);
    writerDataLifecycleQosPolicy (writerDataLifecycleQosPolicy const& s);
    writerDataLifecycleQosPolicy& operator= (writerDataLifecycleQosPolicy const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export domainparticipantQos : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::domainparticipantQos, ACE_Null_Mutex> _ptr;

    // user_data
    public:
    bool user_data_p () const;
    ::dds::userDataQosPolicy const& user_data () const;
    void user_data (::dds::userDataQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::userDataQosPolicy ) user_data_auto_ptr_type;
    user_data_auto_ptr_type user_data_;

    // entity_factory
    public:
    bool entity_factory_p () const;
    ::dds::entityFactoryQosPolicy const& entity_factory () const;
    void entity_factory (::dds::entityFactoryQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::entityFactoryQosPolicy ) entity_factory_auto_ptr_type;
    entity_factory_auto_ptr_type entity_factory_;

    // name
    public:
    bool name_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& name () const;
    ::XMLSchema::string<ACE_TCHAR>& name ();
    void name (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) name_auto_ptr_type;
    name_auto_ptr_type name_;

    // base_name
    public:
    bool base_name_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& base_name () const;
    ::XMLSchema::string<ACE_TCHAR>& base_name ();
    void base_name (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) base_name_auto_ptr_type;
    base_name_auto_ptr_type base_name_;

    public:
    domainparticipantQos ();

    explicit domainparticipantQos (::XSCRT::XML::Element<ACE_TCHAR> const&);
    domainparticipantQos (domainparticipantQos const& s);
    domainparticipantQos& operator= (domainparticipantQos const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export publisherQos : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::publisherQos, ACE_Null_Mutex> _ptr;

    // presentation
    public:
    bool presentation_p () const;
    ::dds::presentationQosPolicy const& presentation () const;
    void presentation (::dds::presentationQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::presentationQosPolicy ) presentation_auto_ptr_type;
    presentation_auto_ptr_type presentation_;

    // partition
    public:
    bool partition_p () const;
    ::dds::partitionQosPolicy const& partition () const;
    void partition (::dds::partitionQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::partitionQosPolicy ) partition_auto_ptr_type;
    partition_auto_ptr_type partition_;

    // group_data
    public:
    bool group_data_p () const;
    ::dds::groupDataQosPolicy const& group_data () const;
    void group_data (::dds::groupDataQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::groupDataQosPolicy ) group_data_auto_ptr_type;
    group_data_auto_ptr_type group_data_;

    // entity_factory
    public:
    bool entity_factory_p () const;
    ::dds::entityFactoryQosPolicy const& entity_factory () const;
    void entity_factory (::dds::entityFactoryQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::entityFactoryQosPolicy ) entity_factory_auto_ptr_type;
    entity_factory_auto_ptr_type entity_factory_;

    // name
    public:
    bool name_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& name () const;
    ::XMLSchema::string<ACE_TCHAR>& name ();
    void name (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) name_auto_ptr_type;
    name_auto_ptr_type name_;

    // base_name
    public:
    bool base_name_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& base_name () const;
    ::XMLSchema::string<ACE_TCHAR>& base_name ();
    void base_name (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) base_name_auto_ptr_type;
    base_name_auto_ptr_type base_name_;

    public:
    publisherQos ();

    explicit publisherQos (::XSCRT::XML::Element<ACE_TCHAR> const&);
    publisherQos (publisherQos const& s);
    publisherQos& operator= (publisherQos const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export subscriberQos : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::subscriberQos, ACE_Null_Mutex> _ptr;

    // presentation
    public:
    bool presentation_p () const;
    ::dds::presentationQosPolicy const& presentation () const;
    void presentation (::dds::presentationQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::presentationQosPolicy ) presentation_auto_ptr_type;
    presentation_auto_ptr_type presentation_;

    // partition
    public:
    bool partition_p () const;
    ::dds::partitionQosPolicy const& partition () const;
    void partition (::dds::partitionQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::partitionQosPolicy ) partition_auto_ptr_type;
    partition_auto_ptr_type partition_;

    // group_data
    public:
    bool group_data_p () const;
    ::dds::groupDataQosPolicy const& group_data () const;
    void group_data (::dds::groupDataQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::groupDataQosPolicy ) group_data_auto_ptr_type;
    group_data_auto_ptr_type group_data_;

    // entity_factory
    public:
    bool entity_factory_p () const;
    ::dds::entityFactoryQosPolicy const& entity_factory () const;
    void entity_factory (::dds::entityFactoryQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::entityFactoryQosPolicy ) entity_factory_auto_ptr_type;
    entity_factory_auto_ptr_type entity_factory_;

    // name
    public:
    bool name_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& name () const;
    ::XMLSchema::string<ACE_TCHAR>& name ();
    void name (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) name_auto_ptr_type;
    name_auto_ptr_type name_;

    // base_name
    public:
    bool base_name_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& base_name () const;
    ::XMLSchema::string<ACE_TCHAR>& base_name ();
    void base_name (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) base_name_auto_ptr_type;
    base_name_auto_ptr_type base_name_;

    public:
    subscriberQos ();

    explicit subscriberQos (::XSCRT::XML::Element<ACE_TCHAR> const&);
    subscriberQos (subscriberQos const& s);
    subscriberQos& operator= (subscriberQos const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export topicQos : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::topicQos, ACE_Null_Mutex> _ptr;

    // topic_data
    public:
    bool topic_data_p () const;
    ::dds::topicDataQosPolicy const& topic_data () const;
    void topic_data (::dds::topicDataQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::topicDataQosPolicy ) topic_data_auto_ptr_type;
    topic_data_auto_ptr_type topic_data_;

    // durability
    public:
    bool durability_p () const;
    ::dds::durabilityQosPolicy const& durability () const;
    void durability (::dds::durabilityQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::durabilityQosPolicy ) durability_auto_ptr_type;
    durability_auto_ptr_type durability_;

    // durability_service
    public:
    bool durability_service_p () const;
    ::dds::durabilityServiceQosPolicy const& durability_service () const;
    void durability_service (::dds::durabilityServiceQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::durabilityServiceQosPolicy ) durability_service_auto_ptr_type;
    durability_service_auto_ptr_type durability_service_;

    // deadline
    public:
    bool deadline_p () const;
    ::dds::deadlineQosPolicy const& deadline () const;
    void deadline (::dds::deadlineQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::deadlineQosPolicy ) deadline_auto_ptr_type;
    deadline_auto_ptr_type deadline_;

    // latency_budget
    public:
    bool latency_budget_p () const;
    ::dds::latencyBudgetQosPolicy const& latency_budget () const;
    void latency_budget (::dds::latencyBudgetQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::latencyBudgetQosPolicy ) latency_budget_auto_ptr_type;
    latency_budget_auto_ptr_type latency_budget_;

    // liveliness
    public:
    bool liveliness_p () const;
    ::dds::livelinessQosPolicy const& liveliness () const;
    void liveliness (::dds::livelinessQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::livelinessQosPolicy ) liveliness_auto_ptr_type;
    liveliness_auto_ptr_type liveliness_;

    // reliability
    public:
    bool reliability_p () const;
    ::dds::reliabilityQosPolicy const& reliability () const;
    void reliability (::dds::reliabilityQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::reliabilityQosPolicy ) reliability_auto_ptr_type;
    reliability_auto_ptr_type reliability_;

    // destination_order
    public:
    bool destination_order_p () const;
    ::dds::destinationOrderQosPolicy const& destination_order () const;
    void destination_order (::dds::destinationOrderQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::destinationOrderQosPolicy ) destination_order_auto_ptr_type;
    destination_order_auto_ptr_type destination_order_;

    // history
    public:
    bool history_p () const;
    ::dds::historyQosPolicy const& history () const;
    void history (::dds::historyQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::historyQosPolicy ) history_auto_ptr_type;
    history_auto_ptr_type history_;

    // resource_limits
    public:
    bool resource_limits_p () const;
    ::dds::resourceLimitsQosPolicy const& resource_limits () const;
    void resource_limits (::dds::resourceLimitsQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::resourceLimitsQosPolicy ) resource_limits_auto_ptr_type;
    resource_limits_auto_ptr_type resource_limits_;

    // transport_priority
    public:
    bool transport_priority_p () const;
    ::dds::transportPriorityQosPolicy const& transport_priority () const;
    void transport_priority (::dds::transportPriorityQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::transportPriorityQosPolicy ) transport_priority_auto_ptr_type;
    transport_priority_auto_ptr_type transport_priority_;

    // lifespan
    public:
    bool lifespan_p () const;
    ::dds::lifespanQosPolicy const& lifespan () const;
    void lifespan (::dds::lifespanQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::lifespanQosPolicy ) lifespan_auto_ptr_type;
    lifespan_auto_ptr_type lifespan_;

    // ownership
    public:
    bool ownership_p () const;
    ::dds::ownershipQosPolicy const& ownership () const;
    void ownership (::dds::ownershipQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::ownershipQosPolicy ) ownership_auto_ptr_type;
    ownership_auto_ptr_type ownership_;

    // name
    public:
    bool name_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& name () const;
    ::XMLSchema::string<ACE_TCHAR>& name ();
    void name (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) name_auto_ptr_type;
    name_auto_ptr_type name_;

    // base_name
    public:
    bool base_name_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& base_name () const;
    ::XMLSchema::string<ACE_TCHAR>& base_name ();
    void base_name (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) base_name_auto_ptr_type;
    base_name_auto_ptr_type base_name_;

    // topic_filter
    public:
    bool topic_filter_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& topic_filter () const;
    ::XMLSchema::string<ACE_TCHAR>& topic_filter ();
    void topic_filter (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) topic_filter_auto_ptr_type;
    topic_filter_auto_ptr_type topic_filter_;

    public:
    topicQos ();

    explicit topicQos (::XSCRT::XML::Element<ACE_TCHAR> const&);
    topicQos (topicQos const& s);
    topicQos& operator= (topicQos const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export datareaderQos : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::datareaderQos, ACE_Null_Mutex> _ptr;

    // durability
    public:
    bool durability_p () const;
    ::dds::durabilityQosPolicy const& durability () const;
    void durability (::dds::durabilityQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::durabilityQosPolicy ) durability_auto_ptr_type;
    durability_auto_ptr_type durability_;

    // deadline
    public:
    bool deadline_p () const;
    ::dds::deadlineQosPolicy const& deadline () const;
    void deadline (::dds::deadlineQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::deadlineQosPolicy ) deadline_auto_ptr_type;
    deadline_auto_ptr_type deadline_;

    // latency_budget
    public:
    bool latency_budget_p () const;
    ::dds::latencyBudgetQosPolicy const& latency_budget () const;
    void latency_budget (::dds::latencyBudgetQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::latencyBudgetQosPolicy ) latency_budget_auto_ptr_type;
    latency_budget_auto_ptr_type latency_budget_;

    // liveliness
    public:
    bool liveliness_p () const;
    ::dds::livelinessQosPolicy const& liveliness () const;
    void liveliness (::dds::livelinessQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::livelinessQosPolicy ) liveliness_auto_ptr_type;
    liveliness_auto_ptr_type liveliness_;

    // reliability
    public:
    bool reliability_p () const;
    ::dds::reliabilityQosPolicy const& reliability () const;
    void reliability (::dds::reliabilityQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::reliabilityQosPolicy ) reliability_auto_ptr_type;
    reliability_auto_ptr_type reliability_;

    // destination_order
    public:
    bool destination_order_p () const;
    ::dds::destinationOrderQosPolicy const& destination_order () const;
    void destination_order (::dds::destinationOrderQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::destinationOrderQosPolicy ) destination_order_auto_ptr_type;
    destination_order_auto_ptr_type destination_order_;

    // history
    public:
    bool history_p () const;
    ::dds::historyQosPolicy const& history () const;
    void history (::dds::historyQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::historyQosPolicy ) history_auto_ptr_type;
    history_auto_ptr_type history_;

    // resource_limits
    public:
    bool resource_limits_p () const;
    ::dds::resourceLimitsQosPolicy const& resource_limits () const;
    void resource_limits (::dds::resourceLimitsQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::resourceLimitsQosPolicy ) resource_limits_auto_ptr_type;
    resource_limits_auto_ptr_type resource_limits_;

    // user_data
    public:
    bool user_data_p () const;
    ::dds::userDataQosPolicy const& user_data () const;
    void user_data (::dds::userDataQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::userDataQosPolicy ) user_data_auto_ptr_type;
    user_data_auto_ptr_type user_data_;

    // ownership
    public:
    bool ownership_p () const;
    ::dds::ownershipQosPolicy const& ownership () const;
    void ownership (::dds::ownershipQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::ownershipQosPolicy ) ownership_auto_ptr_type;
    ownership_auto_ptr_type ownership_;

    // time_based_filter
    public:
    bool time_based_filter_p () const;
    ::dds::timeBasedFilterQosPolicy const& time_based_filter () const;
    void time_based_filter (::dds::timeBasedFilterQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::timeBasedFilterQosPolicy ) time_based_filter_auto_ptr_type;
    time_based_filter_auto_ptr_type time_based_filter_;

    // reader_data_lifecycle
    public:
    bool reader_data_lifecycle_p () const;
    ::dds::readerDataLifecycleQosPolicy const& reader_data_lifecycle () const;
    void reader_data_lifecycle (::dds::readerDataLifecycleQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::readerDataLifecycleQosPolicy ) reader_data_lifecycle_auto_ptr_type;
    reader_data_lifecycle_auto_ptr_type reader_data_lifecycle_;

    // name
    public:
    bool name_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& name () const;
    ::XMLSchema::string<ACE_TCHAR>& name ();
    void name (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) name_auto_ptr_type;
    name_auto_ptr_type name_;

    // base_name
    public:
    bool base_name_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& base_name () const;
    ::XMLSchema::string<ACE_TCHAR>& base_name ();
    void base_name (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) base_name_auto_ptr_type;
    base_name_auto_ptr_type base_name_;

    // topic_filter
    public:
    bool topic_filter_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& topic_filter () const;
    ::XMLSchema::string<ACE_TCHAR>& topic_filter ();
    void topic_filter (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) topic_filter_auto_ptr_type;
    topic_filter_auto_ptr_type topic_filter_;

    public:
    datareaderQos ();

    explicit datareaderQos (::XSCRT::XML::Element<ACE_TCHAR> const&);
    datareaderQos (datareaderQos const& s);
    datareaderQos& operator= (datareaderQos const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export datawriterQos : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::datawriterQos, ACE_Null_Mutex> _ptr;

    // durability
    public:
    bool durability_p () const;
    ::dds::durabilityQosPolicy const& durability () const;
    void durability (::dds::durabilityQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::durabilityQosPolicy ) durability_auto_ptr_type;
    durability_auto_ptr_type durability_;

    // durability_service
    public:
    bool durability_service_p () const;
    ::dds::durabilityServiceQosPolicy const& durability_service () const;
    void durability_service (::dds::durabilityServiceQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::durabilityServiceQosPolicy ) durability_service_auto_ptr_type;
    durability_service_auto_ptr_type durability_service_;

    // deadline
    public:
    bool deadline_p () const;
    ::dds::deadlineQosPolicy const& deadline () const;
    void deadline (::dds::deadlineQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::deadlineQosPolicy ) deadline_auto_ptr_type;
    deadline_auto_ptr_type deadline_;

    // latency_budget
    public:
    bool latency_budget_p () const;
    ::dds::latencyBudgetQosPolicy const& latency_budget () const;
    void latency_budget (::dds::latencyBudgetQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::latencyBudgetQosPolicy ) latency_budget_auto_ptr_type;
    latency_budget_auto_ptr_type latency_budget_;

    // liveliness
    public:
    bool liveliness_p () const;
    ::dds::livelinessQosPolicy const& liveliness () const;
    void liveliness (::dds::livelinessQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::livelinessQosPolicy ) liveliness_auto_ptr_type;
    liveliness_auto_ptr_type liveliness_;

    // reliability
    public:
    bool reliability_p () const;
    ::dds::reliabilityQosPolicy const& reliability () const;
    void reliability (::dds::reliabilityQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::reliabilityQosPolicy ) reliability_auto_ptr_type;
    reliability_auto_ptr_type reliability_;

    // destination_order
    public:
    bool destination_order_p () const;
    ::dds::destinationOrderQosPolicy const& destination_order () const;
    void destination_order (::dds::destinationOrderQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::destinationOrderQosPolicy ) destination_order_auto_ptr_type;
    destination_order_auto_ptr_type destination_order_;

    // history
    public:
    bool history_p () const;
    ::dds::historyQosPolicy const& history () const;
    void history (::dds::historyQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::historyQosPolicy ) history_auto_ptr_type;
    history_auto_ptr_type history_;

    // resource_limits
    public:
    bool resource_limits_p () const;
    ::dds::resourceLimitsQosPolicy const& resource_limits () const;
    void resource_limits (::dds::resourceLimitsQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::resourceLimitsQosPolicy ) resource_limits_auto_ptr_type;
    resource_limits_auto_ptr_type resource_limits_;

    // transport_priority
    public:
    bool transport_priority_p () const;
    ::dds::transportPriorityQosPolicy const& transport_priority () const;
    void transport_priority (::dds::transportPriorityQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::transportPriorityQosPolicy ) transport_priority_auto_ptr_type;
    transport_priority_auto_ptr_type transport_priority_;

    // lifespan
    public:
    bool lifespan_p () const;
    ::dds::lifespanQosPolicy const& lifespan () const;
    void lifespan (::dds::lifespanQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::lifespanQosPolicy ) lifespan_auto_ptr_type;
    lifespan_auto_ptr_type lifespan_;

    // user_data
    public:
    bool user_data_p () const;
    ::dds::userDataQosPolicy const& user_data () const;
    void user_data (::dds::userDataQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::userDataQosPolicy ) user_data_auto_ptr_type;
    user_data_auto_ptr_type user_data_;

    // ownership
    public:
    bool ownership_p () const;
    ::dds::ownershipQosPolicy const& ownership () const;
    void ownership (::dds::ownershipQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::ownershipQosPolicy ) ownership_auto_ptr_type;
    ownership_auto_ptr_type ownership_;

    // ownership_strength
    public:
    bool ownership_strength_p () const;
    ::dds::ownershipStrengthQosPolicy const& ownership_strength () const;
    void ownership_strength (::dds::ownershipStrengthQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::ownershipStrengthQosPolicy ) ownership_strength_auto_ptr_type;
    ownership_strength_auto_ptr_type ownership_strength_;

    // writer_data_lifecycle
    public:
    bool writer_data_lifecycle_p () const;
    ::dds::writerDataLifecycleQosPolicy const& writer_data_lifecycle () const;
    void writer_data_lifecycle (::dds::writerDataLifecycleQosPolicy const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::dds::writerDataLifecycleQosPolicy ) writer_data_lifecycle_auto_ptr_type;
    writer_data_lifecycle_auto_ptr_type writer_data_lifecycle_;

    // name
    public:
    bool name_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& name () const;
    ::XMLSchema::string<ACE_TCHAR>& name ();
    void name (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) name_auto_ptr_type;
    name_auto_ptr_type name_;

    // base_name
    public:
    bool base_name_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& base_name () const;
    ::XMLSchema::string<ACE_TCHAR>& base_name ();
    void base_name (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) base_name_auto_ptr_type;
    base_name_auto_ptr_type base_name_;

    // topic_filter
    public:
    bool topic_filter_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& topic_filter () const;
    ::XMLSchema::string<ACE_TCHAR>& topic_filter ();
    void topic_filter (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) topic_filter_auto_ptr_type;
    topic_filter_auto_ptr_type topic_filter_;

    public:
    datawriterQos ();

    explicit datawriterQos (::XSCRT::XML::Element<ACE_TCHAR> const&);
    datawriterQos (datawriterQos const& s);
    datawriterQos& operator= (datawriterQos const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export qosProfile : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::qosProfile, ACE_Null_Mutex> _ptr;

    // datareader_qos
    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::datareaderQos, ACE_Null_Mutex> datareader_qos_value_type;
    typedef std::list<datareader_qos_value_type> datareader_qos_container_type;
    typedef datareader_qos_container_type::iterator datareader_qos_iterator;
    typedef datareader_qos_container_type::const_iterator datareader_qos_const_iterator;
    datareader_qos_iterator begin_datareader_qos ();
    datareader_qos_iterator end_datareader_qos ();
    datareader_qos_const_iterator begin_datareader_qos () const;
    datareader_qos_const_iterator end_datareader_qos () const;
    void add_datareader_qos (datareader_qos_value_type const&);
    size_t count_datareader_qos () const;

    protected:
    datareader_qos_container_type datareader_qos_;

    // datawriter_qos
    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::datawriterQos, ACE_Null_Mutex> datawriter_qos_value_type;
    typedef std::list<datawriter_qos_value_type> datawriter_qos_container_type;
    typedef datawriter_qos_container_type::iterator datawriter_qos_iterator;
    typedef datawriter_qos_container_type::const_iterator datawriter_qos_const_iterator;
    datawriter_qos_iterator begin_datawriter_qos ();
    datawriter_qos_iterator end_datawriter_qos ();
    datawriter_qos_const_iterator begin_datawriter_qos () const;
    datawriter_qos_const_iterator end_datawriter_qos () const;
    void add_datawriter_qos (datawriter_qos_value_type const&);
    size_t count_datawriter_qos () const;

    protected:
    datawriter_qos_container_type datawriter_qos_;

    // topic_qos
    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::topicQos, ACE_Null_Mutex> topic_qos_value_type;
    typedef std::list<topic_qos_value_type> topic_qos_container_type;
    typedef topic_qos_container_type::iterator topic_qos_iterator;
    typedef topic_qos_container_type::const_iterator topic_qos_const_iterator;
    topic_qos_iterator begin_topic_qos ();
    topic_qos_iterator end_topic_qos ();
    topic_qos_const_iterator begin_topic_qos () const;
    topic_qos_const_iterator end_topic_qos () const;
    void add_topic_qos (topic_qos_value_type const&);
    size_t count_topic_qos () const;

    protected:
    topic_qos_container_type topic_qos_;

    // domainparticipant_qos
    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::domainparticipantQos, ACE_Null_Mutex> domainparticipant_qos_value_type;
    typedef std::list<domainparticipant_qos_value_type> domainparticipant_qos_container_type;
    typedef domainparticipant_qos_container_type::iterator domainparticipant_qos_iterator;
    typedef domainparticipant_qos_container_type::const_iterator domainparticipant_qos_const_iterator;
    domainparticipant_qos_iterator begin_domainparticipant_qos ();
    domainparticipant_qos_iterator end_domainparticipant_qos ();
    domainparticipant_qos_const_iterator begin_domainparticipant_qos () const;
    domainparticipant_qos_const_iterator end_domainparticipant_qos () const;
    void add_domainparticipant_qos (domainparticipant_qos_value_type const&);
    size_t count_domainparticipant_qos () const;

    protected:
    domainparticipant_qos_container_type domainparticipant_qos_;

    // publisher_qos
    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::publisherQos, ACE_Null_Mutex> publisher_qos_value_type;
    typedef std::list<publisher_qos_value_type> publisher_qos_container_type;
    typedef publisher_qos_container_type::iterator publisher_qos_iterator;
    typedef publisher_qos_container_type::const_iterator publisher_qos_const_iterator;
    publisher_qos_iterator begin_publisher_qos ();
    publisher_qos_iterator end_publisher_qos ();
    publisher_qos_const_iterator begin_publisher_qos () const;
    publisher_qos_const_iterator end_publisher_qos () const;
    void add_publisher_qos (publisher_qos_value_type const&);
    size_t count_publisher_qos () const;

    protected:
    publisher_qos_container_type publisher_qos_;

    // subscriber_qos
    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::subscriberQos, ACE_Null_Mutex> subscriber_qos_value_type;
    typedef std::list<subscriber_qos_value_type> subscriber_qos_container_type;
    typedef subscriber_qos_container_type::iterator subscriber_qos_iterator;
    typedef subscriber_qos_container_type::const_iterator subscriber_qos_const_iterator;
    subscriber_qos_iterator begin_subscriber_qos ();
    subscriber_qos_iterator end_subscriber_qos ();
    subscriber_qos_const_iterator begin_subscriber_qos () const;
    subscriber_qos_const_iterator end_subscriber_qos () const;
    void add_subscriber_qos (subscriber_qos_value_type const&);
    size_t count_subscriber_qos () const;

    protected:
    subscriber_qos_container_type subscriber_qos_;

    // name
    public:
    ::XMLSchema::string<ACE_TCHAR> const& name () const;
    ::XMLSchema::string<ACE_TCHAR>& name ();
    void name (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) name_auto_ptr_type;
    name_auto_ptr_type name_;

    // base_name
    public:
    bool base_name_p () const;
    ::XMLSchema::string<ACE_TCHAR> const& base_name () const;
    ::XMLSchema::string<ACE_TCHAR>& base_name ();
    void base_name (::XMLSchema::string<ACE_TCHAR> const& );

    protected:
    typedef XML_XSC_SMART_PTR( ::XMLSchema::string<ACE_TCHAR> ) base_name_auto_ptr_type;
    base_name_auto_ptr_type base_name_;

    public:
    qosProfile (::XMLSchema::string<ACE_TCHAR> const& name__);

    explicit qosProfile (::XSCRT::XML::Element<ACE_TCHAR> const&);
    qosProfile (qosProfile const& s);
    qosProfile& operator= (qosProfile const& s);
  };


  class OpenDDS_XML_QOS_Handler_Export qosProfile_seq : public ::XSCRT::Type
  {
    typedef ::XSCRT::Type Base;

    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::qosProfile_seq, ACE_Null_Mutex> _ptr;

    // qos_profile
    public:
    typedef ACE_Refcounted_Auto_Ptr < ::dds::qosProfile, ACE_Null_Mutex> qos_profile_value_type;
    typedef std::list<qos_profile_value_type> qos_profile_container_type;
    typedef qos_profile_container_type::iterator qos_profile_iterator;
    typedef qos_profile_container_type::const_iterator qos_profile_const_iterator;
    qos_profile_iterator begin_qos_profile ();
    qos_profile_iterator end_qos_profile ();
    qos_profile_const_iterator begin_qos_profile () const;
    qos_profile_const_iterator end_qos_profile () const;
    void add_qos_profile (qos_profile_value_type const&);
    void del_qos_profile (qos_profile_value_type const&);
    size_t count_qos_profile () const;

    protected:
    qos_profile_container_type qos_profile_;

    public:
    qosProfile_seq ();

    explicit qosProfile_seq (::XSCRT::XML::Element<ACE_TCHAR> const&);
    qosProfile_seq (qosProfile_seq const& s);
    qosProfile_seq& operator= (qosProfile_seq const& s);
  };
}

namespace dds
{
  namespace reader
  {
    OpenDDS_XML_QOS_Handler_Export
    ::dds::qosProfile_seq
    dds (xercesc::DOMDocument const*);
  }
}

#endif // DDS_QOS_HPP
