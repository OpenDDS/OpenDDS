// OpenDDS_Util is a small subset of OpenDDS_Dcps that's only used
// by opendds_idl to have objects of common classes (like TypeObject)
// instantiated within the IDL compiler.

project: acelib, dds_macros, install, crosscompile {
  requires += no_opendds_safety_profile
  sharedname = OpenDDS_Util
  dynamicflags = OPENDDS_DCPS_BUILD_DLL
  includes += $(DDS_ROOT) $(DDS_ROOT)/dds
  includes += $(TAO_ROOT) // only for orbconf.h and idl_features.h in our Definitions.h
  libout = $(DDS_ROOT)/lib
  pch_header =
  pch_source =
  macros += OPENDDS_UTIL_BUILD

  Header_Files {
    // These headers are included (directly or indirectly) in the translation
    // units listed below in Source_Files.
    // Note that headers matching a Source_File but with a .h extension don't
    // get listed here since MPC adds them for us.
    dcps_export.h
    Definitions.h
    Message_Block_Ptr.h
    PoolAllocationBase.h
    PoolAllocator.h
    unique_ptr.h
    Util.h
    ../Version.h
    ../Versioned_Namespace.h
    XTypes/External.h
  }

  specific {
    install_headers =
  }

  Source_Files {
    debug.cpp
    Hash.cpp
    SafetyProfileStreams.cpp
    Serializer.cpp
    XTypes/TypeObject.cpp
  }

  Template_Files {
  }

  // If the 'idl_stubs' make target is built, this library is needed.
  verbatim(gnuace, local) {
    ifeq ($(CROSS-COMPILE),)
      idl_stubs: all
    endif
  }
}
