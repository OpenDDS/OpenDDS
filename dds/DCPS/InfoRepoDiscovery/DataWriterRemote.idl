/*
 *
 *
 * Distributed under the OpenDDS License.
 * See: http://www.opendds.org/license.html
 */

#ifndef OPENDDS_DCPS_INFOREPODISCOVERY_DATAWRITERREMOTE_IDL
#define OPENDDS_DCPS_INFOREPODISCOVERY_DATAWRITERREMOTE_IDL

#include "dds/DdsDcpsInfoUtils.idl"
#include "dds/DdsDcpsPublication.idl"

module OpenDDS {
  module DCPS {

    // This interface contains OpenDDS-specific operations
    // related to a DDS::DataWriter servant.
    // It is split out so the DDS::DataWriter interface can be local.
    interface DataWriterRemote {

      // will tell transport and call on_publication_matched()
      oneway void add_association(
        in RepoId yourId,
        in ReaderAssociation reader,
        in boolean active);

      // will tell transport that associations are going away
      // The notify_lost flag true indicates the remove_association is invoked
      // by the InfoRepo after it detected a lost reader. The InfoRepo detects
      // the lost reader when the add_association/remove_association invocations
      // on the reader object reference fail. The datawriter need notify the
      // the DataWriterListener on_subscription_lost.
      oneway void remove_associations(
        in ReaderIdSeq readers,
        in boolean notify_lost);

      // supporting DataWriterListener::on_offered_incompatible_qos()
      // May get called even if add_associations() is not called.
      oneway void update_incompatible_qos(
        in IncompatibleQosStatus status);

      // This call is two-way because the InfoRepo will block the reader
      // in CFT::set_expression_parameters() until each associated writer
      // is notified synchronously by this call.
      void update_subscription_params(
        in RepoId readerId,
        in ::DDS::StringSeq exprParams);
    };
  }; // module DDS
}; // module OpenDDS

#endif
