/*
 *
 *
 * Distributed under the OpenDDS License.
 * See: http://www.opendds.org/license.html
 */

#ifndef OPENDDS_DCPS_INFOREPODISCOVERY_DATAREADERREMOTE_IDL
#define OPENDDS_DCPS_INFOREPODISCOVERY_DATAREADERREMOTE_IDL

#include "dds/DdsDcpsInfoUtils.idl"
#include "dds/DdsDcpsSubscription.idl"

module OpenDDS {
  module DCPS {

    // This interface contains OpenDDS-specific operations
    // related to a DDS::DataReader servant.
    // It is split out so the DDS::DataReader interface can be local.
    interface DataReaderRemote  {

      // will tell transport and call on_subscription_matched()
      oneway void add_association(
        in RepoId yourId,
        in WriterAssociation writer,
        in boolean active);

      // will tell transport that associations are going away
      // The notify_lost flag true indicates the remove_association is invoked
      // by the InfoRepo after it detected a lost writer. The InfoRepo detects
      // the lost writer when the add_association/remove_association invocations
      // on the writer object reference fail. The datareader need notify the
      // the DataReaderListener on_publication_lost.
      oneway void remove_associations(
        in WriterIdSeq writers,
        in boolean notify_lost);

      // Supporting - DataReaderListener::on_offered_incompatible_qos()
      // May get called even if add_associations() is not called.
      oneway void update_incompatible_qos(
        in IncompatibleQosStatus status);

    };
  }; // module DDS
}; // module OpenDDS

#endif
