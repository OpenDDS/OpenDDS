/*
 *
 *
 * Distributed under the OpenDDS License.
 * See: http://www.opendds.org/license.html
 */

#ifndef OPENDDS_DDSDCPSINFOUTILS_IDL
#define OPENDDS_DDSDCPSINFOUTILS_IDL

#include <dds/DdsDcpsCore.idl>
#include <dds/DdsDcpsGuid.idl>

module OpenDDS
{
  module DCPS
  {
    // These are unique across a domain
    // They are also the InstanceHandle_t in Sample_Info for built-in Topics
    typedef GUID_t RepoId;

    typedef DDS::OctetSeq TransportBLOB;

    struct TransportLocator {
      /// The transport type (e.g. tcp or udp)
      string transport_type;
      /// Information about the transport instance that is opaque to all but
      /// code specific to that transport implementation.
      TransportBLOB data;
    };

    typedef sequence<TransportLocator> TransportLocatorSeq;

    struct IncompatibleQosStatus {
      long total_count;
      long count_since_last_send;
      DDS::QosPolicyId_t last_policy_id;
      DDS::QosPolicyCountSeq policies;
    };

    // Information returned from call to add_domain_participant()
    struct AddDomainStatus {
      RepoId  id;
      boolean federated;
    };

    // Status returned by a topic operation
    enum TopicStatus {
      CREATED,
      ENABLED,
      FOUND,
      NOT_FOUND,
      REMOVED,
      CONFLICTING_TYPENAME,
      PRECONDITION_NOT_MET,
      INTERNAL_ERROR,
      TOPIC_DISABLED
    };

    struct WriterAssociation {
      TransportLocatorSeq writerTransInfo;
      unsigned long transportContext;
      RepoId writerId;
      ::DDS::PublisherQos pubQos;
      ::DDS::DataWriterQos writerQos;
      ::DDS::OctetSeq serializedTypeInfo;
      MonotonicTime_t participantDiscoveredAt;
    };

    struct ReaderAssociation {
      TransportLocatorSeq readerTransInfo;
      unsigned long transportContext;
      RepoId readerId;
      ::DDS::SubscriberQos subQos;
      ::DDS::DataReaderQos readerQos;
      string filterClassName;
      string filterExpression;
      ::DDS::StringSeq exprParams;
      ::DDS::OctetSeq serializedTypeInfo;
      MonotonicTime_t participantDiscoveredAt;
    };

    typedef sequence<RepoId> WriterIdSeq;

    typedef sequence<RepoId> ReaderIdSeq;

    typedef octet OctetArray16[16];

    /* Type used to represent the addressing information needed to send a
       message to an RTPS Endpoint */
    struct Locator_t {
      long kind;
      unsigned long _port;
      OctetArray16 address;
    };

    typedef sequence<Locator_t> LocatorSeq;

    typedef string<256> String256;

    /* information to enable content filtering */
    struct ContentFilterProperty_t {
      String256 contentFilteredTopicName;
      String256 relatedTopicName;
      String256 filterClassName;
      string filterExpression;
      DDS::StringSeq expressionParameters;
    };

    struct ReaderProxy_t {
      GUID_t remoteReaderGuid;  // optional in DiscoveredReaderData
      boolean expectsInlineQos;
      TransportLocatorSeq allLocators;
      GUIDSeq associatedWriters;
    };

    // top-level data type for SEDPbuiltinSubscriptions
    struct DiscoveredReaderData {
      DDS::SubscriptionBuiltinTopicData ddsSubscriptionData;
      ReaderProxy_t readerProxy;
      ContentFilterProperty_t contentFilterProperty;
    };

    struct WriterProxy_t {
      GUID_t remoteWriterGuid;  // optional in DiscoveredWriterData
      TransportLocatorSeq allLocators;
    };

    // top-level data type for SEDPbuiltinPublications
    struct DiscoveredWriterData {
      DDS::PublicationBuiltinTopicData ddsPublicationData;
      WriterProxy_t writerProxy;
    };

  }; // module DDS
}; // module OpenDDS

#endif /* OPENDDS_DCPS_INFO_UTILS_IDL */
