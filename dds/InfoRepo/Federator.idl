/*
 *
 *
 * Distributed under the OpenDDS License.
 * See: http://www.opendds.org/license.html
 */

#ifndef OPENDDS_FEDERATOR_IDL
#define OPENDDS_FEDERATOR_IDL

#include "dds/DCPS/InfoRepoDiscovery/Info.idl"
#include "dds/DdsDcpsGuid.idl"
#include "tao/OctetSeq.pidl"

module OpenDDS { module Federator {

    // Unique identifier for a repository.
    typedef long RepoKey;

    // Value of DomainId for federation.
    typedef DDS::DomainId_t FederationDomain;

    // Unique identifier for all entities within federation.
    typedef DCPS::GUID_t FederationId;

    // Types of updates that can be performed.
    enum UpdateType {
      CreateEntity,
      DestroyEntity,
      UpdateQosValue1,
      UpdateQosValue2,
      UpdateFilterExpressionParams
    };

    // Constant values.
    const RepoKey          NIL_REPOSITORY           = 0; // Reserved repository Id value.
    const FederationDomain DEFAULT_FEDERATIONDOMAIN = -2107281297;
    const FederationDomain ANY_FEDERATIONDOMAIN     = -1;

    ////////////////////////////////////////////////////////////////////
    //
    // Ownership updates
    //

    @topic
    struct OwnerUpdate {
      @key RepoKey sender;
      RepoKey owner;
      FederationId participant;
      DDS::DomainId_t domain;
      UpdateType action;
    };

    // Constant values.
    const string OWNERUPDATETOPICNAME = "OwnerUpdate";
    const string OWNERUPDATETYPENAME  = "OwnerUpdate";

    ////////////////////////////////////////////////////////////////////
    //
    // Topic data updates
    //

    @topic
    struct TopicUpdate {
      FederationId id;
      @key RepoKey sender;
      FederationId participant;
      DDS::DomainId_t domain;
      UpdateType action;
      string topic;
      string datatype;
      DDS::TopicQos qos;
    };

    // Constant values.
    const string TOPICUPDATETOPICNAME = "TopicUpdate";
    const string TOPICUPDATETYPENAME  = "TopicUpdate";

    ////////////////////////////////////////////////////////////////////
    //
    // Participant data updates
    //

    @topic
    struct ParticipantUpdate {
      FederationId id;
      @key RepoKey sender;
      RepoKey owner;
      DDS::DomainId_t domain;
      UpdateType action;
      DDS::DomainParticipantQos qos;
    };

    // Constant values.
    const string PARTICIPANTUPDATETOPICNAME = "ParticipantUpdate";
    const string PARTICIPANTUPDATETYPENAME  = "ParticipantUpdate";

    ////////////////////////////////////////////////////////////////////
    //
    // Publication data updates
    //

    @topic
    struct PublicationUpdate {
      FederationId id;
      @key RepoKey sender;
      FederationId topic;
      FederationId participant;
      DDS::DomainId_t domain;
      UpdateType action;
      string callback;
      DDS::PublisherQos publisher_qos;
      DDS::DataWriterQos datawriter_qos;

      OpenDDS::DCPS::TransportLocatorSeq  transport_info;
      unsigned long transport_context;
      DDS::OctetSeq serialized_type_info;
    };

    // Constant values.
    const string PUBLICATIONUPDATETOPICNAME = "PublicationUpdate";
    const string PUBLICATIONUPDATETYPENAME  = "PublicationUpdate";

    ////////////////////////////////////////////////////////////////////
    //
    // Subscription data updates
    //

    @topic
    struct SubscriptionUpdate {
      FederationId id;
      @key RepoKey sender;
      FederationId topic;
      FederationId participant;
      DDS::DomainId_t domain;
      UpdateType action;
      string callback;
      DDS::SubscriberQos subscriber_qos;
      DDS::DataReaderQos datareader_qos;

      OpenDDS::DCPS::TransportLocatorSeq transport_info;
      unsigned long transport_context;

      // The following are for Content-Subscription Profile
      string filter_class_name;
      string filter_expression;
      DDS::StringSeq expression_params;
      DDS::OctetSeq serialized_type_info;
    };

    // Constant values.
    const string SUBSCRIPTIONUPDATETOPICNAME = "SubscriptionUpdate";
    const string SUBSCRIPTIONUPDATETYPENAME  = "SubscriptionUpdate";

    //
    // Exceptions.
    //

    //
    // Processing has started and failed, leaving the called object in an
    // unknown - and likely unstable - state.
    //
    exception Incomplete {};

    ////////////////////////////////////////////////////////////////////
    //
    // Federation manager interface.
    //
    interface Manager {
      //
      // Initiates the discovery process to establish connectivity with a
      // federation having the specified DomainId value.
      //
      boolean discover_federation(in string ior) raises(Incomplete);

      //
      // Called to join a federation initially or to redirect the active
      // connection of an already federated repository Manager.
      //
      Manager join_federation(
                in Manager          peer,
                in FederationDomain federation
              ) raises(Incomplete);

      //
      // Called to leave a federation to allow the federation to cleanup
      // storage associated with the repository leaving the federation.
      //
      void leave_federation(in RepoKey id) raises(Incomplete);

      //
      // Return the FederationId value for the managed repository.  This
      // value can only be set on creation and initialization of the
      // repository.
      //
      RepoKey federation_id();

      //
      // Return a reference to the managed DCPSInfo object within this
      // repository.
      //
      OpenDDS::DCPS::DCPSInfo repository();

      //
      // The following methods allow the current state of a repository to
      // be pushed to a newly joining repository.
      // N.B. These are not 'oneway' since we need to be assured that the
      //      previous operation has completed on the remote side before
      //      starting the next call.
      //

      void initializeOwner(in OwnerUpdate data) raises(Incomplete);
      void initializeTopic(in TopicUpdate data) raises(Incomplete);
      void initializeParticipant(in ParticipantUpdate data) raises(Incomplete);
      void initializePublication(in PublicationUpdate data) raises(Incomplete);
      void initializeSubscription(in SubscriptionUpdate data) raises(Incomplete);

      //////////////////////////////////
      //
      // Administrative methods.
      //

      //
      // Leave the federation gracefully and shutdown the repository.
      //
      void leave_and_shutdown() raises(Incomplete);

      //
      // Shutdown without leaving the federation.  This leaves existing
      // application associations in place and their management will
      // transfer to a different repository within the federation.
      //
      void shutdown() raises(Incomplete);

      //
      //////////////////////////////////

    };

    // Constant values.
    const string  REPOSITORY_IORTABLE_KEY = "DCPSInfoRepo";
    const string  FEDERATOR_IORTABLE_KEY  = "Federator";

}; }; // End of OpenDDS::Federator

#endif /* OPENDDS_FEDERATOR_IDL */
