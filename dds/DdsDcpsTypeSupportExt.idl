/*
 * Distributed under the OpenDDS License.
 * See: http://www.opendds.org/license.html
 */

#ifndef OPENDDS_DDSDCPSTYPESUPPORTEXT_IDL
#define OPENDDS_DDSDCPSTYPESUPPORTEXT_IDL

#include <dds/DdsDcpsTopic.idl>
#include <dds/DdsDcpsPublication.idl>
#include <dds/DdsDcpsSubscription.idl>

module OpenDDS {
  module DCPS {

    local interface TypeSupport : ::DDS::TypeSupport {

      /**
      * create and activate a FooDataWriter.
      * Implemented by FooTypeSupportImpl.
      * Publisher::create_datawriter() will set the topic, listener, qos and
      * other initialization so the implementation of this method
      * is as small and simple as possible.
      */
      ::DDS::DataWriter create_datawriter();

      /**
      * create and activate a FooDataReader.
      * Implemented by FooTypeSupportImpl.
      * Subscriber::create_datareader() will set the topic, listener, qos and
      * other initialization so the implementation of this method
      * is as small and simple as possible.
      */
      ::DDS::DataReader create_datareader();

  #ifndef OPENDDS_NO_MULTI_TOPIC
      ::DDS::DataReader create_multitopic_datareader();
  #endif

      boolean has_dcps_key();

      ::DDS::ReturnCode_t unregister_type(
          in ::DDS::DomainParticipant domain,
          in string type_name);

      /// Get allowed representations defined by IDL annotations
      void representations_allowed_by_type(
        inout ::DDS::DataRepresentationIdSeq seq);
    };
  };
};

#endif /* OPENDDS_DCPS_TYPE_SUPPORT_IDL */
