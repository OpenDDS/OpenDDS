#ifndef OPENDDS_MONITOR_MONITOR_IDL
#define OPENDDS_MONITOR_MONITOR_IDL

#include <dds/DdsDcpsInfrastructure.idl>
#include <dds/DdsDcpsGuid.idl>

#include <tao/ULongSeq.pidl>

module OpenDDS {

  module DCPS {

    const long MONITOR_DOMAIN_ID = -999;
    const long MONITOR_TRANSPORT_ID = 999;
    const string SERVICE_PARTICIPANT_MONITOR_TOPIC = "Service Participant Monitor";
    const string DOMAIN_PARTICIPANT_MONITOR_TOPIC = "Domain Participant Monitor";
    const string TOPIC_MONITOR_TOPIC = "Topic Monitor";
    const string PUBLISHER_MONITOR_TOPIC = "Publisher Monitor";
    const string SUBSCRIBER_MONITOR_TOPIC = "Subscriber Monitor";
    const string DATA_WRITER_MONITOR_TOPIC = "Data Writer Monitor";
    const string DATA_WRITER_PERIODIC_MONITOR_TOPIC = "Data Writer Periodic Monitor";
    const string DATA_READER_MONITOR_TOPIC = "Data Reader Monitor";
    const string DATA_READER_PERIODIC_MONITOR_TOPIC = "Data Reader Periodic Monitor";
    const string TRANSPORT_MONITOR_TOPIC = "Transport Monitor";

    struct Statistics {
      unsigned long           n;
      double                  maximum;
      double                  minimum;
      double                  mean;
      double                  variance;
    };

    enum ValueEnumType { INTEGER_TYPE, DOUBLE_TYPE, STRING_TYPE,
                         STATISTICS_TYPE, STRING_LIST_TYPE };
    union ValueUnion switch (ValueEnumType) {
      case INTEGER_TYPE:     long       integer_value;
      case DOUBLE_TYPE:      double     double_value;
      case STRING_TYPE:      string     string_value;
      case STATISTICS_TYPE:  Statistics stat_value;
      case STRING_LIST_TYPE: DDS::StringSeq  string_seq_value;
    };
    struct NameValuePair {
      string     name;
      ValueUnion value;
    };
    typedef sequence<NameValuePair> NVPSeq;


    @topic
    struct ServiceParticipantReport {
      /// Host name
      @key string host;
      /// Process ID
      @key long pid;
      GUIDSeq domain_participants;
      CORBA::ULongSeq transports;
      NVPSeq values;
    };

    @topic
    struct DomainParticipantReport {
      /// Host name
      string host;
      /// Process ID
      long pid;
      /// GUID of the Domain Participant
      @key GUID_t dp_id;
      DDS::DomainId_t domain_id;
      GUIDSeq topics;
      NVPSeq values;
    };

    @topic
    struct TopicReport {
      /// GUID of the Domain Participant this Topic belongs to
      GUID_t dp_id;
      /// GUID for the Topic
      @key GUID_t topic_id;
      string topic_name;
      string type_name;
      NVPSeq values;
    };

    @topic
    struct PublisherReport {
      /// Instance handle of this Publisher. Unique within the DP.
      @key DDS::InstanceHandle_t handle;
      /// GUID of the Domain Participant this Publisher belongs to
      @key GUID_t dp_id;
      unsigned long transport_id;
      GUIDSeq writers;
      NVPSeq values;
    };

    @topic
    struct SubscriberReport {
      /// Instance handle of this Subscriber. Unique within the DP.
      @key DDS::InstanceHandle_t handle;
      /// GUID of the Domain Participant this Subscriber belongs to
      @key GUID_t dp_id;
      unsigned long transport_id;
      GUIDSeq readers;
      NVPSeq values;
    };

    struct DataWriterAssociation {
      GUID_t        dr_id;
    };
    typedef sequence<DataWriterAssociation> DWAssociations;

    @topic
    struct DataWriterReport {
      /// GUID of the Domain Participant this Data Writer belongs to
      GUID_t dp_id;
      /// Instance handle of this Data Writer's Publisher
      DDS::InstanceHandle_t pub_handle;
      /// GUID for the Data Writer
      @key GUID_t dw_id;
      /// GUID for the Topic this Data Writer is using
      GUID_t topic_id;
      /// Sequence of instances that this Data Writer has registered
      DDS::InstanceHandleSeq instances;
      /// Sequence of Data Reader GUIDs that this Data Writer is associated with
      DWAssociations associations;
      NVPSeq values;
    };

    struct DataWriterAssociationPeriodic {
      GUID_t        dr_id;
      unsigned long sequence_number;
    };
    typedef sequence<DataWriterAssociationPeriodic> DWAssociationsPeriodic;

    @topic
    struct DataWriterPeriodicReport {
      @key GUID_t dw_id;
      unsigned long data_dropped_count;
      unsigned long data_delivered_count;
      unsigned long control_dropped_count;
      unsigned long control_delivered_count;
      DWAssociationsPeriodic associations;
      NVPSeq values;
    };

    struct DataReaderAssociation {
      GUID_t        dw_id;
      short         state;
    };
    typedef sequence<DataReaderAssociation> DRAssociations;

    @topic
    struct DataReaderReport {
      /// GUID of the Domain Participant this Data Reader belongs to
      GUID_t dp_id;
      /// Instance handle of this Data Reader's Subscriber
      DDS::InstanceHandle_t sub_handle;
      /// GUID for the Data Reader
      @key GUID_t dr_id;
      /// GUID for the Topic this Data Reader is using
      GUID_t topic_id;
      /// Sequence of instances that this Data Reader has received
      DDS::InstanceHandleSeq instances;
      /// Sequence of Data Writer GUIDs that this Data Reader is associated with
      DRAssociations associations;
      NVPSeq values;
    };

    struct DataReaderAssociationPeriodic {
      GUID_t        dw_id;
      unsigned long samples_available;
      // Stats      latency_stats;
    };
    typedef sequence<DataReaderAssociationPeriodic> DRAssociationsPeriodic;

    @topic
    struct DataReaderPeriodicReport {
      @key GUID_t dr_id;
      DRAssociationsPeriodic associations;
      NVPSeq values;
    };

    @topic
    struct TransportReport {
      @key string host;
      @key long pid;
      @key unsigned long transport_id;
      string transport_type;
      NVPSeq values;
    };

    enum ReportType {
      SERVICE_PARTICIPANT_REPORT_TYPE,
      DOMAIN_PARTICIPANT_REPORT_TYPE,
      TOPIC_REPORT_TYPE,
      PUBLISHER_REPORT_TYPE,
      SUBSCRIBER_REPORT_TYPE,
      DATA_WRITER_REPORT_TYPE,
      DATA_WRITER_PERIODIC_REPORT_TYPE,
      DATA_READER_REPORT_TYPE,
      DATA_READER_PERIODIC_REPORT_TYPE,
      TRANSPORT_REPORT_TYPE
    };
    union GenericReport switch (ReportType) {
      case SERVICE_PARTICIPANT_REPORT_TYPE:
        ServiceParticipantReport sp_report;
      case DOMAIN_PARTICIPANT_REPORT_TYPE:
        DomainParticipantReport dp_report;
      case TOPIC_REPORT_TYPE:
        TopicReport topic_report;
      case PUBLISHER_REPORT_TYPE:
        PublisherReport publisher_report;
      case SUBSCRIBER_REPORT_TYPE:
        SubscriberReport subscriber_report;
      case DATA_WRITER_REPORT_TYPE:
        DataWriterReport dw_report;
      case DATA_WRITER_PERIODIC_REPORT_TYPE:
        DataWriterPeriodicReport dw_per_report;
      case DATA_READER_REPORT_TYPE:
        DataReaderReport dr_report;
      case DATA_READER_PERIODIC_REPORT_TYPE:
        DataReaderPeriodicReport dr_per_report;
      case TRANSPORT_REPORT_TYPE:
        TransportReport transport_report;
    };

    interface ProcessMonitor {
      // Pass a name that acts as a global identifier for a given
      // entity or individual statistic.  Need to define the actual
      // format for this name, but concatenating the entity identifiers
      // together with "/" separators should work.  Passing an empty
      // string would retrieve the ServiceParticipant information
      // (which would list the Domain Participants).
      GenericReport retrieve_report(in string name);

      // Allow global enabling disabling of report collection for
      // this process.
      void enable_report_collection();
      void disable_report_collection();

      // Allow global enabling/disabling of report publication
      // for this process.
      void enable_report_publishing();
      void diable_report_publishing();

      // Set the period between publishing samples
      void set_publishing_period(in DDS::Duration_t period);
      DDS::Duration_t get_publishing_period();
    };

  };

};

#endif // OPENDDS_MONITOR_MONITOR_IDL
