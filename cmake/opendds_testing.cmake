function(opendds_add_test)
  set(no_value_options)
  set(single_value_options NAME)
  set(multi_value_options COMMAND ARGS EXTRA_LIB_DIRS)
  cmake_parse_arguments(arg
    "${no_value_options}" "${single_value_options}" "${multi_value_options}" ${ARGN})

  find_package(Perl REQUIRED)

  set(test_name "${PROJECT_NAME}_test")
  if(arg_NAME)
    set(test_name "${test_name}_${arg_NAME}")
  endif()
  if(NOT arg_COMMAND)
    set(arg_COMMAND ${PERL_EXECUTABLE} run_test.pl)
    if(CMAKE_CONFIGURATION_TYPES)
      list(APPEND arg_COMMAND $<$<BOOL:$<CONFIG>>:-ExeSubDir> $<CONFIG>)
    endif()
  endif()
  list(APPEND arg_COMMAND ${arg_ARGS})
  add_test(NAME "${test_name}" ${arg_UNPARSED_ARGUMENTS} COMMAND ${arg_COMMAND})

  _opendds_env(OUT env EXTRA_LIB_DIRS ${arg_EXTRA_LIB_DIRS})
  if(env)
    set_property(TEST "${test_name}" PROPERTY ENVIRONMENT "${env}")
  endif()
  if(arg_NAME)
    _opendds_write_setenv(SUFFIX "${arg_NAME}" EXTRA_LIB_DIRS ${arg_EXTRA_LIB_DIRS})
  else()
    _opendds_write_setenv(EXTRA_LIB_DIRS ${arg_EXTRA_LIB_DIRS})
  endif()
endfunction()

function(_opendds_env_append name value)
  if(arg_SETENV)
    if(WIN32)
      set(env "${env}set \"${name}=${value}\"\n")
    else()
      set(env "${env}export ${name}=\"${value}\"\n")
    endif()
  else()
    list(APPEND env "${name}=${value}")
  endif()
  set(env "${env}" PARENT_SCOPE)
endfunction()

function(_opendds_env)
  set(no_value_options SETENV)
  set(single_value_options OUT DIR)
  set(multi_value_options EXTRA_LIB_DIRS)
  cmake_parse_arguments(arg
    "${no_value_options}" "${single_value_options}" "${multi_value_options}" ${ARGN})

  set(env "")
  _opendds_env_append(ACE_ROOT "${ACE_ROOT}")
  _opendds_env_append(TAO_ROOT "${TAO_ROOT}")

  if(WIN32)
    set(env_var_name PATH)
  else()
    set(env_var_name LD_LIBRARY_PATH)
  endif()
  if(arg_SETENV)
    if(WIN32)
      set(first "%PATH%")
    else()
      set(first "$LD_LIBRARY_PATH")
    endif()
  else()
    set(first "$ENV{${env_var_name}}")
  endif()
  _opendds_path_list(lib_dir_list "${first}" "${TAO_LIB_DIR}")
  if(DEFINED _OPENDDS_GOOGLE_TEST_DIR)
    _opendds_path_list(lib_dir_list APPEND "${_OPENDDS_GOOGLE_TEST_DIR}")
    if(CMAKE_CONFIGURATION_TYPES)
      _opendds_path_list(lib_dir_list APPEND
        "${_OPENDDS_GOOGLE_TEST_DIR}$<$<BOOL:$<CONFIG>>:/$<CONFIG>>")
    endif()
  endif()
  foreach(lib_dir "${OPENDDS_LIB_DIR}" ${arg_EXTRA_LIB_DIRS})
    _opendds_path_list(lib_dir_list APPEND "${lib_dir}")
    if(CMAKE_CONFIGURATION_TYPES)
      _opendds_path_list(lib_dir_list APPEND "${lib_dir}$<$<BOOL:$<CONFIG>>:/$<CONFIG>>")
    endif()
  endforeach()
  if(WIN32)
    string(REPLACE "/" "\\" lib_dir_list "${lib_dir_list}")
    string(REPLACE ";" "\;" lib_dir_list "${lib_dir_list}")
  endif()
  _opendds_env_append(${env_var_name} "${lib_dir_list}")

  if(DEFINED OPENDDS_BUILD_DIR)
    _opendds_env_append(OPENDDS_BUILD_DIR "${OPENDDS_BUILD_DIR}")
  endif()

  if(DEFINED OPENDDS_CONFIG_DIR)
    _opendds_env_append(OPENDDS_CONFIG_DIR "${OPENDDS_CONFIG_DIR}")
  endif()

  if(DEFINED OPENDDS_SOURCE_DIR)
    if(NOT DEFINED ACE_SOURCE_DIR)
      set(ACE_SOURCE_DIR "${ACE_ROOT}")
    endif()
    _opendds_path_list(perl5lib "${OPENDDS_SOURCE_DIR}/bin" "${ACE_SOURCE_DIR}/bin")
    _opendds_env_append(OPENDDS_SOURCE_DIR "${OPENDDS_SOURCE_DIR}")
    _opendds_env_append(PERL5LIB "${perl5lib}")
  endif()

  set("${arg_OUT}" ${env} PARENT_SCOPE)
endfunction()

function(_opendds_write_setenv)
  set(no_value_options)
  set(single_value_options DIR SUFFIX)
  set(multi_value_options EXTRA_LIB_DIRS)
  cmake_parse_arguments(arg
    "${no_value_options}" "${single_value_options}" "${multi_value_options}" ${ARGN})
  if(NOT DEFINED arg_DIR)
    set(arg_DIR "${CMAKE_CURRENT_BINARY_DIR}")
  endif()
  if(DEFINED arg_SUFFIX)
    set(arg_SUFFIX "${arg_SUFFIX}_")
  endif()

  _opendds_env(SETENV OUT setenv_contents EXTRA_LIB_DIRS "${arg_EXTRA_LIB_DIRS}")
  set(path "${arg_DIR}/${arg_SUFFIX}setenv")
  if(WIN32)
    set(path "${path}.bat")
  else()
    set(path "${path}.sh")
  endif()
  file(WRITE "${path}" "${setenv_contents}")
endfunction()
