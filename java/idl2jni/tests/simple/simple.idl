/*
 *
 *
 * Distributed under the OpenDDS License.
 * See: http://www.opendds.org/license.html
 */

module simple {

  typedef long TestTypedef;
  typedef string StringTypedef;
  typedef sequence<long> TestSeqTypedef;
  typedef sequence<TestTypedef> SeqOfTypedefedLong;
  typedef sequence<string> StringSeq; //because CORBA's isn't good enough???
  const long ArrayBounds = 4;
  typedef long TestArrayTypedef[ArrayBounds];
  typedef TestArrayTypedef TestArrayTypedef2;
  typedef long TestArray2Typedef[ArrayBounds];
  typedef string TestStringArray[ArrayBounds];

  typedef sequence<StringSeq> StringSeqSeq;
  typedef sequence<StringSeqSeq> StringSeqSeqSeq;
  typedef sequence<TestSeqTypedef> LongSeqSeq;
  typedef sequence<LongSeqSeq> LongSeqSeqSeq;

  // Test of nested primitive arrays
  typedef sequence<boolean> BoolSeq;
  typedef sequence<BoolSeq> BoolSeqSeq;
  typedef sequence<octet> ByteSeq;
  typedef sequence<ByteSeq> ByteSeqSeq;
  typedef sequence<char> CharSeq;
  typedef sequence<CharSeq> CharSeqSeq;
  typedef sequence<short> ShortSeq;
  typedef sequence<ShortSeq> ShortSeqSeq;
  typedef sequence<unsigned short> UShortSeq;
  typedef sequence<UShortSeq> UShortSeqSeq;
  typedef sequence<float> FloatSeq;
  typedef sequence<FloatSeq> FloatSeqSeq;
  typedef sequence<double> DoubleSeq;
  typedef sequence<DoubleSeq> DoubleSeqSeq;

  struct TestStruct {
    long m1;
    unsigned long m2;
    TestSeqTypedef seq1;
    SeqOfTypedefedLong seq2;
    StringTypedef st;
  };

  typedef sequence<TestStruct> TestStructSequence;
  typedef TestStruct TestStructArray[ArrayBounds];

  struct TestNestedStruct {
    TestStruct m;
    string str;
    TestArrayTypedef arr;
    StringSeqSeq sss;
    StringSeqSeqSeq ssss;
    LongSeqSeq lss;
    LongSeqSeqSeq lsss;
  };

  const long TestConstLong = 0;
  //const long long TestConstLongLong = 4294967296;
  const unsigned long TIMESTAMP_INVALID_NSEC = 0xffffffff;
  const float TestConstFloat = 3.14;
  const double TestConstDouble = 2.17;
  const boolean TestConstBool = TRUE;
  const string TestConstString = "Hello World.";
  const TestTypedef TestConstTypedef = 42;
  const char TestConstChar = 'c';
  const wchar TestConstWchar = L'A';

  enum TestEnum {a, b, c, d, e};

  union TestUnion1 switch (TestEnum) {
  case a: octet   o;
  case b: short   s;
  case c: long    l;
  case d: boolean n;
  case e: double  u;
  };

  union TestUnion2 switch (short) {
  case  0: string         s;
  case  1: TestStruct     t;
  case  2:
  case  3: TestSeqTypedef q;
  case  4: StringTypedef  d;
  default: TestEnum       e;
  };

  // test the case where there is no "default" and the labels do not cover the
  // range of the discriminator's type -- an implicit default
  union TestUnion4 switch (boolean) {
  case TRUE: char c;
  };

  typedef sequence<TestEnum> EnumSeq;
  typedef TestEnum EnumArray[ArrayBounds];

  struct TestStructWithEnum {
    long count;
    TestEnum which;
    EnumSeq lotsOfEm;
    TestUnion1 fixedUnion;
    TestUnion2 variableUnion;
  };

  interface TestInterf {
    TestArrayTypedef op1(in TestEnum p1, inout unsigned short p2,
                         out TestSeqTypedef p3, out string p4);
    TestUnion4 opu(in TestUnion1 p1, inout TestUnion2 p2, out TestUnion1 p4);

    attribute long attr1;
  };

  typedef sequence<TestUnion2> TestUnion2Seq;

  union TestUnion3 switch (TestEnum) {
  case  a: TestStructArray sa;
  case  b: TestInterf obj;
  case  c: TestUnion2Seq us;
  default: double fp;
  };

  interface TestInterf2 : TestInterf {
    long op2(in TestArrayTypedef p1, in LongSeqSeq p2);
  };

  interface TestInterf3 : TestInterf2 {
    void op3(in TestNestedStruct p1);
  };

#ifdef USE_LOCAL
  local
#endif
  interface TestLI {
    //FUTURE: support for passing arrays
    //boolean localOp(inout EnumSeq p1, out TestStructSequence p2, in TestStructArray p3);
    boolean localOp(inout EnumSeq p1, out TestStructSequence p2);
    boolean localOp2(inout TestStructSequence s1);
    EnumSeq returnASequence(out short p1, inout TestStruct p2);
    void primitive(inout boolean p1, out char p2, inout octet p3, out short p4,
                   inout unsigned long p5, out long long p6, inout float p7,
                   out double p8);

    //FUTURE: support for passing arrays
    /*
    TestArrayTypedef primArray(in TestArrayTypedef p1,
                               inout TestArrayTypedef p2,
                               out TestArrayTypedef p3);
    */
    attribute long attr1;
    attribute double attr2;
  };

#ifdef USE_LOCAL
  local
#endif
  interface Local2 : TestLI {
    TestLI op(in TestLI p1, inout TestLI p2, out TestLI p3);
  };

  typedef sequence<Local2> Local2Seq;
  struct StructWithObjref {
    Local2 objref;
    Local2Seq objrefsequence;
  };

#ifdef USE_LOCAL
  local
#endif
  interface Local3 : Local2 {
    StructWithObjref op3(in StructWithObjref p1, inout StructWithObjref p2,
                         out StructWithObjref p3);
  };

};
