#include <dds/DdsDcpsCore.idl>

module Mod {

  enum MyEnum { one, two, three, four };

  struct BasicTypes {
    octet o;
    uint8 u8;
    int8 i8;
    unsigned short us;
    short s;
    unsigned long ul;
    long l;
    unsigned long long ull;
    long long ll;
    float f;
    double d;
    boolean b;
    char c;
    string str;
  };

  typedef sequence<short> MySeq;
  typedef sequence<long> LongSeq;
  typedef sequence<DDS::StringSeq> NestedSeq;

  union MyUnion switch (MyEnum) {
  case one:
    long a;
  case two:
    boolean b;
  case three:
    double d;
  case four:
    NestedSeq s;
  };

  typedef sequence<NestedSeq> NestedNestedSeq;
  typedef sequence<NestedNestedSeq> NestedNestedNestedSeq;

  typedef char CharArray[6];
  typedef string StringArray[4];

  @topic
  struct Sample {
    @key long id;
    string data;
    MyEnum enu;
    MyEnum enu2;
    BasicTypes bt;
    MySeq seq1;
    LongSeq seq2;
    NestedSeq ns;
    MyUnion mu;
    CharArray ca;
    StringArray sa;
  };

  typedef sequence<MyUnion> MyUnionSeq;

  enum MyOtherEnum { small, medium, large };

  union MyOtherUnion switch (MyOtherEnum) {
  case small:
    string one;
  case medium:
    NestedSeq two;
  case large:
    Sample three;
  };

  typedef MyOtherUnion JunkType[2];
  typedef boolean MaskType[2];

  @topic
  struct MaskedJunk {
    JunkType junk;
    MaskType mask;
  };

};
