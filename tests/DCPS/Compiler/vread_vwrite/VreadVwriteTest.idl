#if defined __TAO_IDL_FEATURES
#  include __TAO_IDL_FEATURES
#  if TAO_IDL_HAS_EXPLICIT_INTS
#    define EXPLICIT_INTS
#  endif
#endif

#include <tao/LongSeq.pidl>
#include <tao/ShortSeq.pidl>
#include <tao/StringSeq.pidl>

module Mod {

  enum MyEnum { one, two, three, four };

  struct BasicTypes {
    octet o;
#ifdef EXPLICIT_INTS
    uint8 u8;
    int8 i8;
#endif
    unsigned short us;
    short s;
    unsigned long ul;
    long l;
    unsigned long long ull;
    long long ll;
    float f;
    double d;
    long double ld;
    boolean b;
    char c;
    // Not all supported C++ compilers handle the code generated from this type.
    // wchar wc;
    string str;
    wstring wstr;
  };

  typedef sequence<short, 7> MyBoundedSeq;
  typedef sequence<short> MyUnboundedSeq;
  typedef sequence<CORBA::StringSeq> NestedSeq;

  union MyUnion switch (MyEnum) {
  case one:
    long a;
  case two:
    boolean b;
  case three:
    double d;
  case four:
    NestedSeq s;
  };

  typedef sequence<NestedSeq> NestedNestedSeq;
  typedef sequence<NestedNestedSeq> NestedNestedNestedSeq;

  typedef char CharArray[6];
  typedef string StringArray[4];

  @topic
  struct Sample {
    @key long id;
    string data;
    MyEnum enu;
    MyEnum enu2;
    BasicTypes bt;
    MyBoundedSeq seq1;
    CORBA::LongSeq seq2;
    MyUnboundedSeq seq3;
    NestedSeq ns;
    MyUnion mu;
    CharArray ca;
    StringArray sa;
  };

  typedef sequence<MyUnion> MyUnionSeq;

  enum MyOtherEnum { small, medium, large };

  union MyOtherUnion switch (MyOtherEnum) {
  case small:
    string one;
  case medium:
    NestedSeq two;
  case large:
    Sample three;
  };

  typedef MyOtherUnion JunkType[2];
  typedef boolean MaskType[2];

  @topic
  struct MaskedJunk {
    JunkType junk;
    MaskType mask;
  };

  /////// For KeyOnly tests
  struct ExplicitKeysStruct {
    @key short s;
    @key string str;
    unsigned long long ull;
  };

  typedef ExplicitKeysStruct ExplicitKeysStructArr[2][2];

  @topic
  struct NoExplicitKeysStruct {
    boolean b;
    char c;
    long l;
  };

#define COMMON_BRANCHES  \
  case one:              \
    boolean b;           \
  case two:              \
    char c;              \
  default:               \
    octet o;             \

  @topic
  union ExplicitKeyUnion switch (@key MyEnum) {
    COMMON_BRANCHES
  };

  @topic
  union NoExplicitKeyUnion switch (MyEnum) {
    COMMON_BRANCHES
  };

  @topic
  struct KeyOnlyStruct {
    @key long id;
    @key ExplicitKeysStruct eks;
    @key NoExplicitKeysStruct neks;
    @key ExplicitKeysStructArr eksarr;
    @key ExplicitKeyUnion eku;
    @key NoExplicitKeyUnion neku;
    @key string str;
    octet o;
    MaskedJunk mj;
    long long ll;
  };

};
