/*
 *
 *
 * Distributed under the OpenDDS License.
 * See: http://www.opendds.org/license.html
 */

#include <tao/ShortSeq.pidl>
#include <tao/UShortSeq.pidl>
#include <tao/StringSeq.pidl>
#include <tao/WStringSeq.pidl>


//bounded string definitions for trim
typedef string<20> str20;
typedef wstring<20> wstr20;
typedef string<64> str64;
typedef wstring<64> wstr64;

typedef sequence <@try_construct(USE_DEFAULT) str20> BoundStringSeq_ud;
typedef sequence <@try_construct(TRIM) str20> BoundStringSeq_t;
typedef sequence <@try_construct(DISCARD) str20> BoundStringSeq_d;
typedef sequence <@try_construct(USE_DEFAULT) wstr20> BoundWStringSeq_ud;
typedef sequence <@try_construct(TRIM) wstr20> BoundWStringSeq_t;
typedef sequence <@try_construct(DISCARD) wstr20> BoundWStringSeq_d;

//array for use in struct, union, and sequence
typedef short ShortArray[15];
typedef str64 str64Array[10];
typedef str20 str20Array[10];
typedef str20 str20ArrayTrim @try_construct(TRIM) [10];

//enum for use in struct, union, and sequence
//due to issue 1900, enums in C++11 need an extra value beyond each case when used as a union discriminator
enum EnumType {VALUE1, VALUE2, ValueExtra};
enum EnumType2 {B1, B2, B3, B4, BExtra};

//nested union for use in struct, union, and sequence
union NestedUnion switch (EnumType) {
  case VALUE1: boolean u_b;
  case VALUE2: short u_s;
};

//sequences
//enum
typedef sequence <EnumType> EnumSeqUnbound;
typedef sequence <EnumType, 2> EnumSeqBound;
typedef sequence <EnumType, 3> EnumSeqBound2;
//primitives
typedef sequence <short> ShortSeqUnbound;
typedef sequence <short, 2> ShortSeqBound;
typedef sequence <short, 3> ShortSeqBound2;
typedef sequence <unsigned short> UnsignedShortSeqUnbound;
typedef sequence <unsigned short, 2> UnsignedShortSeqBound;
typedef sequence <unsigned short, 3> UnsignedShortSeqBound2;
//string
typedef sequence <str64> StringSeqUnbound;
typedef sequence <str64, 2> StringSeqBound;
typedef sequence <str64, 3> StringSeqBound2;
//wstring
typedef sequence <wstr64> WideStringSeqUnbound;
typedef sequence <wstr64, 2> WideStringSeqBound;
typedef sequence <wstr64, 3> WideStringSeqBound2;
//array
typedef sequence <ShortArray> ShortArraySeqUnbound;
typedef sequence <ShortArray, 2> ShortArraySeqBound;
typedef sequence <ShortArray, 3> ShortArraySeqBound2;
//sequence
typedef sequence <ShortSeqUnbound> SeqShortSeqUnboundUnbound;
typedef sequence <ShortSeqUnbound, 2> SeqShortSeqUnboundBound;
typedef sequence <ShortSeqUnbound, 3> SeqShortSeqUnboundBound2;
typedef sequence <@try_construct(TRIM) ShortSeqBound> SeqShortSeqBoundUnbound;
typedef sequence <ShortSeqBound2> SeqShortSeqBoundUnbound2;
typedef sequence <@try_construct(TRIM) ShortSeqBound, 2> SeqShortSeqBoundBound;
typedef sequence <ShortSeqBound2, 3> SeqShortSeqBoundBound2;


//arrays
//enum
typedef EnumType EnumArr[3];
//primitives
typedef short ShortArr[3];
typedef unsigned short UnsignedShortArr[3];
//string
typedef str64 StringArr[3];
//wstring
typedef wstr64 WideStringArr[3];
//multi-dimensional arrays
typedef short ShortArrTwoDim[3][3];
typedef short ShortArrThreeDim[3][3][3];
//sequence
typedef ShortSeqUnbound ArrSeqUnbound[3];
typedef ShortSeqBound ArrSeqBound[3];

//anon seq
//enum
struct AnonSeqStruct {
  sequence <EnumType> AnonEnumSeqUnbound;
  sequence <EnumType, 2> AnonEnumSeqBound;
  sequence <EnumType, 3> AnonEnumSeqBound2;
  //primitives
  sequence <short> AnonShortSeqUnbound;
  sequence <short, 2> AnonShortSeqBound;
  sequence <short, 3> AnonShortSeqBound2;
  sequence <unsigned short> AnonUnsignedShortSeqUnbound;
  sequence <unsigned short, 2> AnonUnsignedShortSeqBound;
  sequence <unsigned short, 3> AnonUnsignedShortSeqBound2;
  //string
  sequence <str64> AnonStringSeqUnbound;
  sequence <str64, 2> AnonStringSeqBound;
  sequence <str64, 3> AnonStringSeqBound2;
  //wstring
  sequence <wstr64> AnonWideStringSeqUnbound;
  sequence <wstr64, 2> AnonWideStringSeqBound;
  sequence <wstr64, 3> AnonWideStringSeqBound2;
  //array
  sequence <ShortArray> AnonShortArraySeqUnbound;
  sequence <ShortArray, 2> AnonShortArraySeqBound;
  sequence <ShortArray, 3> AnonShortArraySeqBound2;
  //sequence
  sequence <ShortSeqUnbound> AnonSeqShortSeqUnboundUnbound;
  sequence <ShortSeqUnbound, 2> AnonSeqShortSeqUnboundBound;
  sequence <ShortSeqUnbound, 3> AnonSeqShortSeqUnboundBound2;
  sequence <ShortSeqBound> AnonSeqShortSeqBoundUnbound;
  sequence <ShortSeqBound2> AnonSeqShortSeqBoundUnbound2;
  sequence <ShortSeqBound, 2> AnonSeqShortSeqBoundBound;
  sequence <ShortSeqBound2, 3> AnonSeqShortSeqBoundBound2;
};

//anon arr
//enum
  struct AnonArrStruct {
  EnumType AnonEnumArr[3];
  //primitives
  short AnonShortArr[3];
  unsigned short AnonUnsignedShortArr[3];
  //string
  str64 AnonStringArr[3];
  //wstring
  wstr64 AnonWideStringArr[3];
  //multi-dimensional arrays
  short AnonShortArrTwoDim[3][3];
  short AnonShortArrThreeDim[3][3][3];
  //sequence
  ShortSeqUnbound AnonArrSeqUnbound[3];
  ShortSeqBound AnonArrSeqBound[3];
};

//nested struct for use in struct, union, and sequence
@mutable
struct NestedStruct {
  @try_construct(DISCARD) str64 str64_d;
  @try_construct(USE_DEFAULT) str64 str64_ud;
  @try_construct(TRIM) str64 str64_t;
};

@mutable
struct NestedStructTrim {
  @try_construct(DISCARD) str20 str20_d;
  @try_construct(USE_DEFAULT) str20 str20_ud;
  @try_construct(TRIM) str20 str20_t;
};

//struct
typedef sequence <NestedStruct> StructSeqUnbound;
typedef sequence <NestedStructTrim> StructSeqUnboundTrim;
typedef sequence <NestedStruct, 2> StructSeqBound;
typedef sequence <NestedStructTrim, 2> StructSeqBoundTrim;
typedef sequence <NestedStruct, 3> StructSeqBound2;

//union
// typedef sequence <NestedUnion> UnionSeqUnbound;
// typedef sequence <NestedUnion, 2> UnionSeqBound;
// typedef sequence <NestedUnion, 3> UnionSeqBound2;

//nested struct for use in struct, union, and sequence
struct NestedStruct2 {
  @try_construct(USE_DEFAULT) wstr64 wstr64_ud;
  @try_construct(USE_DEFAULT) ShortSeqUnbound psu_ud;
  @try_construct(USE_DEFAULT) ShortSeqBound psb_ud;
  @try_construct(USE_DEFAULT) UnsignedShortSeqUnbound upsu_ud;
  @try_construct(USE_DEFAULT) UnsignedShortSeqBound upsb_ud;
  @try_construct(USE_DEFAULT) EnumSeqUnbound esu_ud;
  @try_construct(USE_DEFAULT) EnumSeqBound esb_ud;
  @try_construct(USE_DEFAULT) StringSeqUnbound strsu_ud;
  @try_construct(USE_DEFAULT) StringSeqBound strsb_ud;
  @try_construct(USE_DEFAULT) WideStringSeqUnbound wstrsu_ud;
  @try_construct(USE_DEFAULT) WideStringSeqBound wstrsb_ud;
  @try_construct(USE_DEFAULT) StructSeqUnbound ssu_ud;
  @try_construct(USE_DEFAULT) StructSeqBound ssb_ud;
  @try_construct(USE_DEFAULT) ShortArraySeqUnbound sasu_ud;
  @try_construct(USE_DEFAULT) ShortArraySeqBound sasb_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqUnboundUnbound sssuu_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqUnboundBound sssub_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqBoundUnbound sssbu_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqBoundBound sssbb_ud;
  // @try_construct(USE_DEFAULT) UnionSeqUnbound usu_ud;
  // @try_construct(USE_DEFAULT) UnionSeqBound usb_ud;
  @try_construct(USE_DEFAULT) NestedStruct ns_ud;
  // @try_construct(USE_DEFAULT) NestedUnion nu_ud;
  @try_construct(USE_DEFAULT) ShortArray sa_mud;
  @try_construct(USE_DEFAULT) EnumType e_ud;
  @try_construct(USE_DEFAULT) octet by_ud;
  @try_construct(USE_DEFAULT) boolean bo_ud;
  @try_construct(USE_DEFAULT) short s_ud;
  @try_construct(USE_DEFAULT) unsigned short us_ud;
  @try_construct(DISCARD) str64 str64_d;
  @try_construct(USE_DEFAULT) str64 str64_ud;
  @try_construct(TRIM) str64 str64_t;
};

//nested struct for use in struct, union, and sequence
struct NestedStruct3 {
  @try_construct(USE_DEFAULT) wstr64 wstr64_ud;
  @try_construct(USE_DEFAULT) ShortSeqUnbound psu_ud;
  @try_construct(USE_DEFAULT) ShortSeqBound psb_ud;
  @try_construct(USE_DEFAULT) UnsignedShortSeqUnbound upsu_ud;
  @try_construct(USE_DEFAULT) UnsignedShortSeqBound upsb_ud;
  @try_construct(USE_DEFAULT) EnumSeqUnbound esu_ud;
  @try_construct(USE_DEFAULT) EnumSeqBound esb_ud;
  @try_construct(USE_DEFAULT) StringSeqUnbound strsu_ud;
  @try_construct(USE_DEFAULT) StringSeqBound strsb_ud;
  @try_construct(USE_DEFAULT) WideStringSeqUnbound wstrsu_ud;
  @try_construct(USE_DEFAULT) WideStringSeqBound wstrsb_ud;
  @try_construct(USE_DEFAULT) StructSeqUnbound ssu_ud;
  @try_construct(USE_DEFAULT) StructSeqBound ssb_ud;
  @try_construct(USE_DEFAULT) ShortArraySeqUnbound sasu_ud;
  @try_construct(USE_DEFAULT) ShortArraySeqBound sasb_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqUnboundUnbound sssuu_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqUnboundBound sssub_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqBoundUnbound sssbu_ud;
  @try_construct(USE_DEFAULT) SeqShortSeqBoundBound sssbb_ud;
  // @try_construct(USE_DEFAULT) UnionSeqUnbound usu_ud;
  // @try_construct(USE_DEFAULT) UnionSeqBound usb_ud;
  @try_construct(USE_DEFAULT) NestedStruct ns_ud;
  //@try_construct(USE_DEFAULT) NestedUnion nu_ud;
  @try_construct(USE_DEFAULT) ShortArray sa_mud;
  @try_construct(USE_DEFAULT) EnumType e_ud;
  @try_construct(USE_DEFAULT) octet by_ud;
  @try_construct(USE_DEFAULT) boolean bo_ud;
  @try_construct(USE_DEFAULT) short s_ud;
  @try_construct(USE_DEFAULT) unsigned short us_ud;
  @try_construct(DISCARD) str20 str20_d;
  @try_construct(USE_DEFAULT) str20 str20_ud;
  @try_construct(TRIM) str20 str20_t;
};

module TryCon {
  @mutable
  struct StringTest1 {
    str64 str64_d;
    str64 str64_ud;
    str64 str64_t;
  };

  @mutable
  struct StringTest2 {
    @try_construct(DISCARD) str20 str20_d;
    @try_construct(USE_DEFAULT) str20 str20_ud;
    @try_construct(TRIM) str20 str20_t;
  };

  @mutable
  struct NestedStructTest1{
    NestedStruct2 ns;
  };

  @mutable
  struct NestedStructTest2{
    @try_construct(USE_DEFAULT) NestedStruct3 ns;
  };

  @mutable
  struct TrimStruct1 {
    str64 str64_t;
    wstr64 wstr64_t;
    ShortSeqUnbound psu_t;
    ShortSeqBound2 psb_t;
    UnsignedShortSeqUnbound upsu_t;
    UnsignedShortSeqBound2 upsb_t;
    EnumSeqUnbound esu_t;
    EnumSeqBound2 esb_t;
    StringSeqUnbound strsu_t;
    StringSeqBound2 strsb_t;
    WideStringSeqUnbound wstrsu_t;
    WideStringSeqBound2 wstrsb_t;
    StructSeqUnbound ssu_t;
    StructSeqBound2 ssb_t;
    ShortArraySeqUnbound sasu_t;
    ShortArraySeqBound2 sasb_t;
    SeqShortSeqUnboundUnbound sssuu_t;
    SeqShortSeqUnboundBound2 sssub_t;
    SeqShortSeqBoundUnbound2 sssbu_t;
    SeqShortSeqBoundBound2 sssbb_t;
  };

  @mutable
  struct TrimStruct2 {
    @try_construct(TRIM) str20 str20_t;
    @try_construct(TRIM) wstr20 wstr20_t;
    @try_construct(TRIM) ShortSeqUnbound psu_t;
    @try_construct(TRIM) ShortSeqBound psb_t;
    @try_construct(TRIM) UnsignedShortSeqUnbound upsu_t;
    @try_construct(TRIM) UnsignedShortSeqBound upsb_t;
    @try_construct(TRIM) EnumSeqUnbound esu_t;
    @try_construct(TRIM) EnumSeqBound esb_t;
    @try_construct(TRIM) StringSeqUnbound strsu_t;
    @try_construct(TRIM) StringSeqBound strsb_t;
    @try_construct(TRIM) WideStringSeqUnbound wstrsu_t;
    @try_construct(TRIM) WideStringSeqBound wstrsb_t;
    @try_construct(TRIM) StructSeqUnboundTrim ssu_t;
    @try_construct(TRIM) StructSeqBoundTrim ssb_t;
    @try_construct(TRIM) ShortArraySeqUnbound sasu_t;
    @try_construct(TRIM) ShortArraySeqBound sasb_t;
    //unbounded so no trim
    SeqShortSeqUnboundUnbound sssuu_t;
    @try_construct(TRIM) SeqShortSeqUnboundBound sssub_t;
    //unbounded so no trim
    SeqShortSeqBoundUnbound sssbu_t;
    @try_construct(TRIM) SeqShortSeqBoundBound sssbb_t;
  };

  @topic
  @mutable
  struct AnonSeqStruct {
    sequence <EnumType, 3> AnonEnumSeqBound;
    //primitives
    sequence <short, 3> AnonShortSeqBound;
    sequence <unsigned short, 3> AnonUnsignedShortSeqBound;
    //string
    sequence <str64, 3> AnonStringSeqBound;
    //wstring
    sequence <wstr64, 3> AnonWideStringSeqBound;
    //array
    sequence <ShortArray, 3> AnonShortArraySeqBound;
    //sequence
    sequence <ShortSeqUnbound> AnonShortSeqUnboundUnbound;
    sequence <ShortSeqUnbound, 3> AnonSeqShortSeqUnboundBound;
    sequence <ShortSeqBound2> AnonSeqShortSeqBoundUnbound;
    sequence <ShortSeqBound2, 3> AnonSeqShortSeqBoundBound;
  };

  @topic
  @mutable
  struct AnonSeqStructTrim {
    @try_construct(TRIM) sequence <EnumType, 2> AnonEnumSeqBound;
    //primitives
    @try_construct(TRIM) sequence <short, 2> AnonShortSeqBound;
    @try_construct(TRIM) sequence <unsigned short, 2> AnonUnsignedShortSeqBound;
    //string
    @try_construct(TRIM) sequence <@try_construct(TRIM) str20, 2> AnonStringSeqBound;
    //wstring
    @try_construct(TRIM) sequence <@try_construct(TRIM) wstr20, 2> AnonWideStringSeqBound;
    //array
    @try_construct(TRIM) sequence <ShortArray, 2> AnonShortArraySeqBound;
    //sequence
    @try_construct(TRIM) sequence <ShortSeqUnbound> AnonShortSeqUnboundUnbound;
    @try_construct(TRIM) sequence <ShortSeqUnbound, 2> AnonSeqShortSeqUnboundBound;
    @try_construct(TRIM) sequence <@try_construct(TRIM) ShortSeqBound> AnonSeqShortSeqBoundUnbound;
    @try_construct(TRIM) sequence <@try_construct(TRIM) ShortSeqBound, 2> AnonSeqShortSeqBoundBound;
  };

  @topic
  @mutable
  struct AnonSeqStructDefault {
    @try_construct(USE_DEFAULT) sequence < EnumType, 2> AnonEnumSeqBound;
    //primitives
    @try_construct(USE_DEFAULT) sequence <short, 2> AnonShortSeqBound;
    @try_construct(USE_DEFAULT) sequence <unsigned short, 2> AnonUnsignedShortSeqBound;
    //string
    @try_construct(USE_DEFAULT) sequence <str20, 2> AnonStringSeqBound;
    //wstring
    @try_construct(USE_DEFAULT) sequence <wstr20, 2> AnonWideStringSeqBound;
    //array
    @try_construct(USE_DEFAULT) sequence <ShortArray, 2> AnonShortArraySeqBound;
    //sequence
    @try_construct(USE_DEFAULT) sequence <ShortSeqUnbound> AnonShortSeqUnboundUnbound;
    @try_construct(USE_DEFAULT) sequence <ShortSeqUnbound, 2> AnonSeqShortSeqUnboundBound;
    @try_construct(USE_DEFAULT) sequence <ShortSeqBound> AnonSeqShortSeqBoundUnbound;
    @try_construct(USE_DEFAULT) sequence <ShortSeqBound, 2> AnonSeqShortSeqBoundBound;
  };

  @topic
  @mutable
  struct AnonArrStruct {
    //string
    str64 AnonStringArr[3];
    //wstring
    wstr64 AnonWideStringArr[3];
    //array
    str64Array AnonArrayArr[3];
    //sequence
    ShortSeqBound2 AnonArrShortSeqBound[3];
  };

  @topic
  @mutable
  struct AnonArrStructTrim {
    //string
    str20 AnonStringArr @try_construct(TRIM) [3];
    //wstring
    wstr20 AnonWideStringArr @try_construct(TRIM) [3];
    //array
    str20ArrayTrim AnonArrayArr [3];
    //sequence
    ShortSeqBound AnonArrShortSeqBound @try_construct(TRIM) [3];
  };

  @topic
  @mutable
  struct AnonArrStructUseDefault {
    //string
    str20 AnonStringArr @try_construct(USE_DEFAULT) [3];
    //wstring
    wstr20 AnonWideStringArr @try_construct(USE_DEFAULT) [3];
    //array
    str20Array AnonArrayArr @try_construct(USE_DEFAULT) [3];
    //sequence
    ShortSeqBound AnonArrShortSeqBound @try_construct(USE_DEFAULT) [3];
  };

  @mutable
  struct DiscardStructString1 {
    str64 str64_d;
  };

  @mutable
  struct DiscardStructString2 {
    str20 str20_d;
  };

  @mutable
  struct DiscardStructWString1 {
    wstr64 wstr64_d;
  };

  @mutable
  struct DiscardStructWString2 {
    wstr20 wstr20_d;
  };

  @mutable
  struct DiscardStructStruct1 {
    NestedStruct ns;
  };

  @mutable
  struct DiscardStructStruct2 {
    NestedStructTrim ns;
  };

  @mutable
  struct DiscardStructArray1 {
    str64Array sa;
  };

  @mutable
  struct DiscardStructArray2 {
    str20Array sa;
  };

  typedef sequence <str64> ss_64;
  typedef sequence <str20> ss_20;

  @mutable
  struct DiscardStructSequence1 {
    ss_64 ss64;
  };

  @mutable
  struct DiscardStructSequence2 {
    ss_20 ss20;
  };

  @mutable
  struct DiscardStructArrayAnon1 {
    str64 saa64[3];
  };

  @mutable
  struct DiscardStructArrayAnon2 {
    str20 saa20[3];
  };

  @mutable
  struct DiscardStructSequenceAnon1 {
    sequence <str64> ssa64;
  };

  @mutable
  struct DiscardStructSequenceAnon2 {
    sequence <str20> ssa20;
  };

  @topic
  @extensibility(MUTABLE)
  union BaseUnion switch (@try_construct(DISCARD) short) {
    case 0: @try_construct(DISCARD) str64 str_d;
    case 1: @try_construct(USE_DEFAULT) str64 str_ud;
    case 2: @try_construct(TRIM) str64 str_t;
    case 3: @try_construct(DISCARD) wstr64 wstr_d;
    case 4: @try_construct(USE_DEFAULT) wstr64 wstr_ud;
    case 5: @try_construct(TRIM) wstr64 wstr_t;
    case 6: @try_construct(DISCARD) str64Array stra_d;
    case 7: @try_construct(USE_DEFAULT) str64Array stra_ud;
    case 8: @try_construct(TRIM) str64Array stra_t;
    case 9: @try_construct(DISCARD) StringSeqBound2 strs_d;
    case 10: @try_construct(USE_DEFAULT) StringSeqBound2 strs_ud;
    case 11: @try_construct(TRIM) StringSeqBound2 strs_t;
    case 12: @try_construct(DISCARD) EnumType2 e_d;
    case 13: @try_construct(USE_DEFAULT) EnumType2 e_ud;
    default: @try_construct(TRIM) str64 def;
  };

  @topic
  @extensibility(MUTABLE)
  union DiscardUnion switch (@try_construct(DISCARD) short) {
    case 0: @try_construct(DISCARD) str20 str_d;
    case 3: @try_construct(DISCARD) wstr20 wstr_d;
    case 6: @try_construct(DISCARD) str20Array stra_d;
    case 9: @try_construct(DISCARD) StringSeqBound strs_d;
    case 12: @try_construct(DISCARD) EnumType e_d;
    default: @try_construct(TRIM) str20 def;
  };

  @topic
  @extensibility(MUTABLE)
  union TrimUnion switch (short) {
    case 2: @try_construct(TRIM) str20 str_t;
    case 5: @try_construct(TRIM) wstr20 wstr_t;
    case 8: @try_construct(TRIM) str20ArrayTrim stra_t;
    case 11: @try_construct(TRIM) StringSeqBound strs_t;
    default: @try_construct(TRIM) str20 def;
  };

  @topic
  @extensibility(MUTABLE)
  union DefaultUnion switch (@try_construct(USE_DEFAULT) short) {
    case 1: @try_construct(USE_DEFAULT) str20 str_ud;
    case 4: @try_construct(USE_DEFAULT) wstr20 wstr_ud;
    case 7: @try_construct(USE_DEFAULT) str20Array stra_ud;
    case 10: @try_construct(USE_DEFAULT) StringSeqBound strs_ud;
    case 13: @try_construct(USE_DEFAULT) EnumType e_ud;
    default: @try_construct(TRIM) str20 def;
  };

  @topic
  @extensibility(MUTABLE)
  union BaseDiscrimUnion switch (EnumType2) {
    case B1: short s1;
    case B2: short s2;
    case B3: short s3;
    case B4: short s4;
  };

  @topic
  @extensibility(MUTABLE)
  union DiscardDiscrimUnion switch (@try_construct(DISCARD) EnumType) {
    case VALUE1: short s1;
    case VALUE2: short s2;
  };

  @topic
  @extensibility(MUTABLE)
  union DefaultDiscrimUnion switch (@try_construct(USE_DEFAULT) EnumType) {
    case VALUE1: short s1;
    case VALUE2: short s2;
  };

};
