// note the following predefined types often have special cases:
//    char, octet, boolean, string
// where as all of the integer and float types are just one case.

#include "SharedTypes.idl"

module Xyz {

  // sequences of arrays
  typedef sequence<ArrayOfBoolean,8> SeqOfArrayOfBoolean;
  typedef sequence<ArrayOfString,8>  SeqOfArrayOfString;
  typedef sequence<ArrayOfChar,8>    SeqOfArrayOfChar;
  typedef sequence<ArrayOfOctet,8>   SeqOfArrayOfOctet;
  typedef sequence<ArrayOfLong,8>    SeqOfArrayOfLong;
  typedef sequence<ArrayOfAnEnum,8>  SeqOfArrayOfAnEnum;

  // arrays of arrays
  typedef ArrayOfBoolean ArrayOfArrayOfBoolean[7];
  typedef ArrayOfString  ArrayOfArrayOfString[7];
  typedef ArrayOfChar    ArrayOfArrayOfChar[7];
  typedef ArrayOfOctet   ArrayOfArrayOfOctet[7];
  typedef ArrayOfLong    ArrayOfArrayOfLong[7];
  typedef ArrayOfAnEnum  ArrayOfArrayOfAnEnum[7];

  // needed to call size methods on arrays
  struct StructOfArrayOfArrayOfBoolean { ArrayOfArrayOfBoolean f; };
  @topic
  struct StructOfArrayOfArrayOfString { ArrayOfArrayOfString f;};
  @topic
  struct StructOfArrayOfArrayOfChar { ArrayOfArrayOfChar f;};
  @topic
  struct StructOfArrayOfArrayOfOctet { ArrayOfArrayOfOctet f;};
  @topic
  struct StructOfArrayOfArrayOfLong { ArrayOfArrayOfLong f;};
  @topic
  struct StructOfArrayOfArrayOfAnEnum { ArrayOfArrayOfAnEnum f;};

  // sequences of sequences
  typedef sequence<SeqOfBoolean,4> SeqOfSeqOfBoolean;
  typedef sequence<SeqOfString,4>  SeqOfSeqOfString;
  typedef sequence<SeqOfChar,4>    SeqOfSeqOfChar;
  typedef sequence<SeqOfOctet,4>   SeqOfSeqOfOctet;
  typedef sequence<SeqOfLong,4>    SeqOfSeqOfLong;
  typedef sequence<SeqOfAnEnum,4>  SeqOfSeqOfAnEnum;

  // typedef of a "special" scalar type
  typedef octet OctetTypedef;

  @topic
  struct StructOfSeqOfSeqOfLong { SeqOfSeqOfLong field; };

  typedef string<7> SevenStr;
  struct AStruct {
    double  f1;
    float   f2;
    boolean f3;
    SevenStr f4;
    char f5;
    octet f6;
    OctetTypedef f6a;
    long f7;
    AnEnum f8;
    ArrayOfBoolean f10;
    ArrayOfString f11;
    ArrayOfChar f12;
    ArrayOfOctet f13;
    ArrayOfLong f14;
    ArrayOfAnEnum f15;
    SeqOfBoolean f20;
    SeqOfString f21;
    SeqOfChar f22;
    SeqOfOctet f23;
    SeqOfLong f24;
    SeqOfAnEnum f25;
    ArrayOfSeqOfBoolean f30;
    ArrayOfSeqOfString f31;
    ArrayOfSeqOfChar f32;
    ArrayOfSeqOfOctet f33;
    ArrayOfSeqOfLong f34;
    ArrayOfSeqOfAnEnum f35;
    SeqOfArrayOfBoolean f40;
    SeqOfArrayOfString f41;
    SeqOfArrayOfChar f42;
    SeqOfArrayOfOctet f43;
    SeqOfArrayOfLong f44;
    SeqOfArrayOfAnEnum f45;

    ArrayOfArrayOfBoolean f50;
    ArrayOfArrayOfString f51;
    ArrayOfArrayOfChar f52;
    ArrayOfArrayOfOctet f53;
    ArrayOfArrayOfLong f54;
    ArrayOfArrayOfAnEnum f55;

    SeqOfSeqOfBoolean f60;
    SeqOfSeqOfString f61;
    SeqOfSeqOfChar f62;
    SeqOfSeqOfOctet f63;
    SeqOfSeqOfLong f64;
    SeqOfSeqOfAnEnum f65;
  };

  typedef sequence<AStruct,2> SeqOfAStruct;

  typedef AStruct ArrayOfAStruct[3];

  // for access to _dcps_* methods
  struct StructContainingArrayOfAStruct {
    ArrayOfAStruct f1;
  };

  union AUnion switch (AnEnum) {
    case redx:
      string rv;
    case greenx:
      AStruct gv;
    default:
      SeqOfLong bv;
  };


  union BigUnion switch (long) {
    case 1:
        double  f1;
    case 2:
        float   f2;
    case 3:
        boolean f3;
    case 4:
        SevenStr f4;
    case 5:
          char f5;
    case 6:
          octet f6;
    case 7:
          long f7;
    case 8:
        AnEnum f8;

    case 10:
        ArrayOfBoolean f10;
    case 11:
        ArrayOfString f11;
    case 12:
        ArrayOfChar f12;
    case 13:
        ArrayOfOctet f13;
    case 14:
        ArrayOfLong f14;
    case 15:
        ArrayOfAnEnum f15;

    case 20:
        SeqOfBoolean f20;
    case 21:
        SeqOfString f21;
    case 22:
        SeqOfChar f22;
    case 23:
        SeqOfOctet f23;
    case 24:
        SeqOfLong f24;
    case 25:
        SeqOfAnEnum f25;

    case 30:
        ArrayOfSeqOfBoolean f30;
    case 31:
        ArrayOfSeqOfString f31;
    case 32:
        ArrayOfSeqOfChar f32;
    case 33:
        ArrayOfSeqOfOctet f33;
    case 34:
        ArrayOfSeqOfLong f34;
    case 35:
        ArrayOfSeqOfAnEnum f35;

    case 40:
        SeqOfArrayOfBoolean f40;
    case 41:
        SeqOfArrayOfString f41;
    case 42:
        SeqOfArrayOfChar f42;
    case 43:
        SeqOfArrayOfOctet f43;
    case 44:
        SeqOfArrayOfLong f44;
    case 45:
        SeqOfArrayOfAnEnum f45;

    case 50:
      ArrayOfArrayOfBoolean f50;
    case 51:
      ArrayOfArrayOfString f51;
    case 52:
      ArrayOfArrayOfChar f52;
    case 53:
      ArrayOfArrayOfOctet f53;
    case 54:
      ArrayOfArrayOfLong f54;
    case 55:
      ArrayOfArrayOfAnEnum f55;

    case 60:
      SeqOfSeqOfBoolean f60;
    case 61:
      SeqOfSeqOfString f61;
    case 62:
      SeqOfSeqOfChar f62;
    case 63:
      SeqOfSeqOfOctet f63;
    case 64:
      SeqOfSeqOfLong f64;
    case 65:
      SeqOfSeqOfAnEnum f65;
    case 66:
      OctetTypedef f6a;

    case 90:
      AStruct f90;
    case 91:
      SeqOfAStruct f91;
    case 92:
      ArrayOfAStruct v92;
    case 93:
      long double ld;
  };

  // for access to _dcps_* methods
  @topic
  struct StructAUnion {
    AUnion sau_f1;
  };

  typedef sequence<AUnion,3> SeqOfAUnion;

  typedef sequence<AStruct,3> AStructSeq;

  typedef AStructSeq ArrayOfAStructSeq[3];

  // for access to _dcps_* methods
  struct StructContainingArrayOfAStructSeq {
    ArrayOfAStructSeq f1;
  };

  // not currently supported by the TAO IDL compiler; even without -Gdcps
  //typedef fixed<10,4> AFixed;

  typedef sequence<BigUnion> BigUnionSeq;

  typedef octet OctetArray[3];

  @topic
  struct Foo {
    @key long key;
    octet octer;
    OctetTypedef theOctetTypedef;
    @key AnEnum xcolor;
    OctetArray ooo;
    string theString;
    AStruct thestruct;
    AStructSeq theStructSeq;
    ArrayOfAStruct structArray;
    AUnion theUnion;
    SeqOfAUnion theSeqOfUnion;
    BigUnion theBigUnion;
    BigUnionSeq theSeqOfBigUnion;
    float x;
    float y;
    wchar theWChar;
#if !defined OPENDDS_SAFETY_PROFILE && !defined NO_TEST_WSTRING
    wstring theWString;
#endif
    long double theLongDouble;
  };

};
