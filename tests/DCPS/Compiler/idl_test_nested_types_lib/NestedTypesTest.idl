/*
 *
 *
 * Distributed under the OpenDDS License.
 * See: http://www.opendds.org/license.html
 */

module NestedTypesTest {

  #pragma DCPS_DATA_TYPE "NestedTypesTest::KeyInNestedStruct"
  #pragma DCPS_DATA_KEY "NestedTypesTest::KeyInNestedStruct dot_.separated_.key_"

  typedef unsigned long KeyArray[3];

  struct Separated {
    unsigned long key_;
    KeyArray key2_;
  };

  typedef Separated SeparatedArray[2];

  struct Dot {
    Separated separated_;
    SeparatedArray separated2_;
  };

  struct KeyInNestedStruct {
    Dot dot_;
  };

  #pragma DCPS_DATA_TYPE "NestedTypesTest::KeyInNestedArray"
  #pragma DCPS_DATA_KEY "NestedTypesTest::KeyInNestedArray dots_[0].separated2_[1].key2_[2]"

  typedef Dot ArrayOfDotSeparatedKey[2];

  struct KeyInNestedArray {
    ArrayOfDotSeparatedKey dots_;
  };

  struct StructWithValue {
    short value;
  };
  typedef StructWithValue MyStructTypedef;

#pragma DCPS_DATA_TYPE "NestedTypesTest::TypedefStructKeyStruct"
#pragma DCPS_DATA_KEY  "NestedTypesTest::TypedefStructKeyStruct my_struct_typedef_key.value"
  struct TypedefStructKeyStruct {
    MyStructTypedef my_struct_typedef_key;
  };

  enum msgType_t {
    val1,
    val2
  };

  union msgUnion_t switch (msgType_t) {
    case val1:
      string someString;
    case val2:
      float someFloat;
  };

  @topic
  struct Message {
    @key long subject_id;
    msgUnion_t msgUnion;
  };
};
