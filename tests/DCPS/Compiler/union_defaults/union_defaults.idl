module Unions {
  struct dummy {
    long foo;
  };

  union Z switch(boolean) {
    case TRUE: short val;
  };

  union Y switch(char) {
    case 0: string val;
  };

  union X switch(short) {
    case 78: short val;
    case 0: Z zz;
  };

  union V switch(unsigned short) {
    case 0: dummy val;
  };

  typedef sequence<dummy> dummy_sequence;
  union U switch(long) {
    case 0: dummy_sequence dsequence;
  };

  typedef dummy dummy_array[10];
  union T switch(unsigned long) {
    case 0: dummy_array darray;
  };

#ifndef OPENDDS_SAFETY_PROFILE
  union S switch(long) {
    case 0: wstring val;
  };

  union R switch(unsigned long) {
    case 0: wchar val;
  };
#endif

  union Q switch(unsigned long) {
    case 0: long double val;
  };

  union P switch(unsigned long) {
    case 0: boolean val;
  };

  enum Dog { Mastiff, St_Bernard };
  union O switch(Dog) {
    case Mastiff: float mval;
    case St_Bernard: long long val;
  };
};

module DDS_Native {
  module Uni {

    enum DataType {
      dtLong,
      dtShort
    };

    @appendable
    union Data switch (Uni::DataType) {
      case Uni::dtLong:
        long longData;
      case Uni::dtShort:
        short shortData;
    };
  };
};
