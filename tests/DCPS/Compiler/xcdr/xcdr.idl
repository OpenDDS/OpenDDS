#include <tao/LongSeq.pidl>
#include <tao/ShortSeq.pidl>
#include <tao/OctetSeq.pidl>
#include <tao/StringSeq.pidl>

#define COMMON_FIELDS \
  short short_field; \
  long long_field; \
  octet octet_field; \
  long long long_long_field;

#define COMMON_BRANCHES \
  case E_SHORT_FIELD: \
    short short_field; \
  case E_LONG_FIELD: \
    long long_field; \
  case E_OCTET_FIELD: \
    octet octet_field; \
  case E_LONG_LONG_FIELD: \
    long long long_long_field;

@final
struct FinalStruct {
  COMMON_FIELDS
};

@appendable
struct AppendableStruct {
  COMMON_FIELDS
};

@mutable
struct MutableStruct {
  COMMON_FIELDS
};

enum UnionDisc {
  E_SHORT_FIELD,
  E_LONG_FIELD,
  E_OCTET_FIELD,
  E_LONG_LONG_FIELD,
  E_ADDITIONAL_FIELD
};

@mutable
union MutableUnion switch (UnionDisc) {
  COMMON_BRANCHES
};

@final
union FinalUnion switch(UnionDisc) {
  COMMON_BRANCHES
};

// Appendable Tests ==========================================================

typedef AppendableStruct NestedStruct;

@appendable
struct AppendableWithNestedStruct {
  NestedStruct nested;
  COMMON_FIELDS
};

@appendable
struct AdditionalFieldNestedStruct {
  COMMON_FIELDS
  long additional_field;
};

@appendable
struct AdditionalFieldAppendableStruct {
  AdditionalFieldNestedStruct nested;
  COMMON_FIELDS
  long additional_field;
};

@appendable
struct AppendableWithNestedStruct2 {
  string string_field;
  NestedStruct nested;
};

@appendable
union AppendableUnion switch (UnionDisc) {
  COMMON_BRANCHES
};

@appendable
union ModifiedAppendableUnion switch (UnionDisc) {
  COMMON_BRANCHES
case E_ADDITIONAL_FIELD:
  long additional_field;
};

// Mutable Tests =============================================================

@mutable
union MutableUnionWithExplicitIDs switch (UnionDisc) {
case E_SHORT_FIELD:
  @id(4) short short_field;
case E_LONG_FIELD:
  @id(6) long long_field;
case E_OCTET_FIELD:
  @id(8) octet octet_field;
case E_LONG_LONG_FIELD:
  @id(10) long long long_long_field;
};

@mutable
union ModifiedMutableUnion switch (UnionDisc) {
case E_LONG_FIELD:
  @id(6) long long_field;
case E_SHORT_FIELD:
  @id(4) short short_field;
case E_ADDITIONAL_FIELD:
  @id(12) long additional_field;
};

// Mixed Extensibility Tests =================================================

@final
struct NestingFinalStruct {
  string string_field;
  AppendableStruct appendable_nested;
  sequence<short> sequence_field;
  MutableStruct mutable_nested;
};

@appendable
struct NestingAppendableStruct {
  string string_field;
  MutableStruct mutable_nested;
  sequence<long> sequence_field;
  FinalStruct final_nested;
};

@mutable
struct NestingMutableStruct {
  string string_field;
  AppendableStruct appendable_nested;
  sequence<octet> sequence_field;
  FinalStruct final_nested;
};

// KeyOnly Serialization ======================================================

@topic
@appendable
struct BasicUnkeyedStruct {
  long long_value;
  long long_array_value[2];
  /* TODO(iguessthislldo): Sequences aren't supported. See XTYPE-152
  sequence<long> long_seq_value;
  */
  string string_value;
  long extra_value;
};

@topic
@appendable
struct BasicKeyedStruct {
  @key long long_value;
  @key long long_array_value[2];
  /* TODO(iguessthislldo): Sequences aren't supported. See XTYPE-152
  @key sequence<long> long_seq_value;
  */
  @key string string_value;
  long extra_value;
};

@topic
@appendable
union UnkeyedUnion switch (long) {
case 0:
  char short_value;
default:
  long default_value;
};

@topic
@appendable
union KeyedUnion switch (@key long) {
case 0:
  char short_value;
default:
  long default_value;
};

@topic
@appendable
struct ComplexUnkeyedStruct {
  BasicUnkeyedStruct unkeyed_struct_value;
  BasicUnkeyedStruct unkeyed_struct_array_value[2];
  /* TODO(iguessthislldo): Sequences aren't supported. See XTYPE-152
  sequence<BasicUnkeyedStruct> unkeyed_struct_seq_value;
  */
  BasicKeyedStruct keyed_struct_value;
  BasicKeyedStruct keyed_struct_array_value[2];
  /* TODO(iguessthislldo): Sequences aren't supported. See XTYPE-152
  sequence<BasicKeyedStruct> keyed_struct_seq_value;
  */
  UnkeyedUnion unkeyed_union_value;
  UnkeyedUnion unkeyed_union_array_value[2];
  /* TODO(iguessthislldo): Sequences aren't supported. See XTYPE-152
  sequence<UnkeyedUnion> unkeyed_union_seq_value
  */
  KeyedUnion keyed_union_value;
  KeyedUnion keyed_union_array_value[2];
  /* TODO(iguessthislldo): Sequences aren't supported. See XTYPE-152
  sequence<KeyedUnion> keyed_union_seq_value;
  */
  long extra_value;
};

@topic
@appendable
struct ComplexKeyedStruct {
  @key BasicUnkeyedStruct unkeyed_struct_value;
  @key BasicUnkeyedStruct unkeyed_struct_array_value[2];
  /* TODO(iguessthislldo): Sequences aren't supported. See XTYPE-152
  @key sequence<BasicUnkeyedStruct> unkeyed_struct_seq_value;
  */
  @key BasicKeyedStruct keyed_struct_value;
  @key BasicKeyedStruct keyed_struct_array_value[2];
  /* TODO(iguessthislldo): Sequences aren't supported. See XTYPE-152
  @key sequence<BasicKeyedStruct> keyed_struct_seq_value;
  */
  // TODO(iguessthislldo): Mark as Key when supported. See XTYPE-147
  UnkeyedUnion unkeyed_union_value;
  // TODO(iguessthislldo): Mark as Key when supported. See XTYPE-147
  UnkeyedUnion unkeyed_union_array_value[2];
  // TODO(iguessthislldo): Mark as Key when supported. See XTYPE-147
  /* TODO(iguessthislldo): Sequences aren't supported. See XTYPE-152
  sequence<UnkeyedUnion> unkeyed_union_seq_value
  */
  @key KeyedUnion keyed_union_value;
  @key KeyedUnion keyed_union_array_value[2];
  /* TODO(iguessthislldo): Sequences aren't supported. See XTYPE-152
  @key sequence<KeyedUnion> keyed_union_seq_value;
  */
  long extra_value;
};
